(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{304:function(e,t,n){"use strict";n.r(t);var a=n(13),s=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"beandefinition与beanfactory扩展"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beandefinition与beanfactory扩展"}},[e._v("#")]),e._v(" BeanDefinition与BeanFactory扩展")]),e._v(" "),t("h3",{attrs:{id:"beandefinitionregistrypostprocessor接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beandefinitionregistrypostprocessor接口"}},[e._v("#")]),e._v(" "),t("code",[e._v("BeanDefinitionRegistryPostProcessor")]),e._v("接口")]),e._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n * Extension to the standard {@link BeanFactoryPostProcessor} SPI, allowing for\n * the registration of further bean definitions <i>before</i> regular\n * BeanFactoryPostProcessor detection kicks in. In particular,\n * BeanDefinitionRegistryPostProcessor may register further bean definitions\n * which in turn define BeanFactoryPostProcessor instances.\n *\n * @author Juergen Hoeller\n * @since 3.0.1\n * @see org.springframework.context.annotation.ConfigurationClassPostProcessor\n */")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("interface")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("BeanDefinitionRegistryPostProcessor")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("extends")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("BeanFactoryPostProcessor")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n    * Modify the application context's internal bean definition registry after its\n    * standard initialization. All regular bean definitions will have been loaded,\n    * but no beans will have been instantiated yet. This allows for adding further\n    * bean definitions before the next post-processing phase kicks in.\n    * @param registry the bean definition registry used by the application context\n    * @throws org.springframework.beans.BeansException in case of errors\n    */")]),e._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("postProcessBeanDefinitionRegistry")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("BeanDefinitionRegistry")]),e._v(" registry"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("throws")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("BeansException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),t("p",[e._v("这个接口扩展了标准的"),t("code",[e._v("BeanFactoryPostProcessor")]),e._v("接口，允许在普通的"),t("code",[e._v("BeanFactoryPostProcessor")]),e._v("接口实现类执行之前注册更多的"),t("code",[e._v("BeanDefinition")]),e._v("。特别地是，"),t("code",[e._v("BeanDefinitionRegistryPostProcessor")]),e._v("可以注册"),t("code",[e._v("BeanFactoryPostProcessor")]),e._v("的"),t("code",[e._v("BeanDefinition")]),e._v("。")]),e._v(" "),t("p",[t("code",[e._v("postProcessBeanDefinitionRegistry")]),e._v("方法可以修改在"),t("code",[e._v("BeanDefinitionRegistry")]),e._v("接口实现类中注册的任意"),t("code",[e._v("BeanDefinition")]),e._v("，也可以增加和删除"),t("code",[e._v("BeanDefinition")]),e._v("。原因是这个方法执行前所有常规的"),t("code",[e._v("BeanDefinition")]),e._v("已经被加载到"),t("code",[e._v("BeanDefinitionRegistry")]),e._v("接口实现类中，但还没有bean被实例化。")]),e._v(" "),t("h3",{attrs:{id:"beanfactorypostprocessor接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beanfactorypostprocessor接口"}},[e._v("#")]),e._v(" "),t("code",[e._v("BeanFactoryPostProcessor")]),e._v("接口")]),e._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n * Factory hook that allows for custom modification of an application context's\n * bean definitions, adapting the bean property values of the context's underlying\n * bean factory.\n *\n * <p>Useful for custom config files targeted at system administrators that\n * override bean properties configured in the application context. See\n * {@link PropertyResourceConfigurer} and its concrete implementations for\n * out-of-the-box solutions that address such configuration needs.\n *\n * <p>A {@code BeanFactoryPostProcessor} may interact with and modify bean\n * definitions, but never bean instances. Doing so may cause premature bean\n * instantiation, violating the container and causing unintended side-effects.\n * If bean instance interaction is required, consider implementing\n * {@link BeanPostProcessor} instead.\n *\n * <h3>Registration</h3>\n * <p>An {@code ApplicationContext} auto-detects {@code BeanFactoryPostProcessor}\n * beans in its bean definitions and applies them before any other beans get created.\n * A {@code BeanFactoryPostProcessor} may also be registered programmatically\n * with a {@code ConfigurableApplicationContext}.\n *\n * <h3>Ordering</h3>\n * <p>{@code BeanFactoryPostProcessor} beans that are autodetected in an\n * {@code ApplicationContext} will be ordered according to\n * {@link org.springframework.core.PriorityOrdered} and\n * {@link org.springframework.core.Ordered} semantics. In contrast,\n * {@code BeanFactoryPostProcessor} beans that are registered programmatically\n * with a {@code ConfigurableApplicationContext} will be applied in the order of\n * registration; any ordering semantics expressed through implementing the\n * {@code PriorityOrdered} or {@code Ordered} interface will be ignored for\n * programmatically registered post-processors. Furthermore, the\n * {@link org.springframework.core.annotation.Order @Order} annotation is not\n * taken into account for {@code BeanFactoryPostProcessor} beans.\n *\n * @author Juergen Hoeller\n * @author Sam Brannen\n * @since 06.07.2003\n * @see BeanPostProcessor\n * @see PropertyResourceConfigurer\n */")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@FunctionalInterface")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("interface")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("BeanFactoryPostProcessor")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n    * Modify the application context's internal bean factory after its standard\n    * initialization. All bean definitions will have been loaded, but no beans\n    * will have been instantiated yet. This allows for overriding or adding\n    * properties even to eager-initializing beans.\n    * @param beanFactory the bean factory used by the application context\n    * @throws org.springframework.beans.BeansException in case of errors\n    */")]),e._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("postProcessBeanFactory")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ConfigurableListableBeanFactory")]),e._v(" beanFactory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("throws")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("BeansException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),t("p",[e._v("这个接口允许自定义修改应用程序上下文的"),t("code",[e._v("BeanDefinition")]),e._v("，调整上下文的"),t("code",[e._v("BeanFactory")]),e._v("的"),t("code",[e._v("bean")]),e._v("属性值。应用程序上下文可以在"),t("code",[e._v("BeanFactory")]),e._v("的"),t("code",[e._v("BeanDefinition")]),e._v("中自动检测"),t("code",[e._v("BeanFactoryPostProcessor bean")]),e._v("，并在创建任何其他bean之前应用它们。对于定位于系统管理员的自定义配置文件非常有用，它们将覆盖应用程序上下文中配置的bean属性。请参阅"),t("code",[e._v("PropertyResourceConfigurer")]),e._v("及其具体实现，了解解决此类配置需求的开箱即用解决方案。"),t("code",[e._v("BeanFactoryPostProcessor")]),e._v("可能与"),t("code",[e._v("BeanDefinition")]),e._v("交互并修改，但永远不应该将"),t("code",[e._v("bean")]),e._v("实例化。这样做可能会导致过早的"),t("code",[e._v("bean")]),e._v("实例化，违反容器执行顺序并导致意想不到的副作用。如果需要"),t("code",[e._v("bean")]),e._v("实例交互，请考虑实现"),t("code",[e._v("BeanPostProcessor")]),e._v("接口。")]),e._v(" "),t("p",[t("code",[e._v("postProcessBeanFactory")]),e._v("方法在"),t("code",[e._v("BeanFactory")]),e._v("初始化后，所有的"),t("code",[e._v("bean")]),e._v("定义都被加载，但是没有"),t("code",[e._v("bean")]),e._v("会被实例化时，允许重写或添加属性。")]),e._v(" "),t("h2",{attrs:{id:"bean实例化中的扩展"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bean实例化中的扩展"}},[e._v("#")]),e._v(" Bean实例化中的扩展")]),e._v(" "),t("h3",{attrs:{id:"beanpostprocessor接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beanpostprocessor接口"}},[e._v("#")]),e._v(" "),t("code",[e._v("BeanPostProcessor")]),e._v("接口")]),e._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n * Factory hook that allows for custom modification of new bean instances &mdash;\n * for example, checking for marker interfaces or wrapping beans with proxies.\n *\n * <p>Typically, post-processors that populate beans via marker interfaces\n * or the like will implement {@link #postProcessBeforeInitialization},\n * while post-processors that wrap beans with proxies will normally\n * implement {@link #postProcessAfterInitialization}.\n *\n * <h3>Registration</h3>\n * <p>An {@code ApplicationContext} can autodetect {@code BeanPostProcessor} beans\n * in its bean definitions and apply those post-processors to any beans subsequently\n * created. A plain {@code BeanFactory} allows for programmatic registration of\n * post-processors, applying them to all beans created through the bean factory.\n *\n * <h3>Ordering</h3>\n * <p>{@code BeanPostProcessor} beans that are autodetected in an\n * {@code ApplicationContext} will be ordered according to\n * {@link org.springframework.core.PriorityOrdered} and\n * {@link org.springframework.core.Ordered} semantics. In contrast,\n * {@code BeanPostProcessor} beans that are registered programmatically with a\n * {@code BeanFactory} will be applied in the order of registration; any ordering\n * semantics expressed through implementing the\n * {@code PriorityOrdered} or {@code Ordered} interface will be ignored for\n * programmatically registered post-processors. Furthermore, the\n * {@link org.springframework.core.annotation.Order @Order} annotation is not\n * taken into account for {@code BeanPostProcessor} beans.\n *\n * @author Juergen Hoeller\n * @author Sam Brannen\n * @since 10.10.2003\n * @see InstantiationAwareBeanPostProcessor\n * @see DestructionAwareBeanPostProcessor\n * @see ConfigurableBeanFactory#addBeanPostProcessor\n * @see BeanFactoryPostProcessor\n */")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("interface")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("BeanPostProcessor")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n    * Apply this {@code BeanPostProcessor} to the given new bean instance <i>before</i> any bean\n    * initialization callbacks (like InitializingBean's {@code afterPropertiesSet}\n    * or a custom init-method). The bean will already be populated with property values.\n    * The returned bean instance may be a wrapper around the original.\n    * <p>The default implementation returns the given {@code bean} as-is.\n    * @param bean the new bean instance\n    * @param beanName the name of the bean\n    * @return the bean instance to use, either the original or a wrapped one;\n    * if {@code null}, no subsequent BeanPostProcessors will be invoked\n    * @throws org.springframework.beans.BeansException in case of errors\n    * @see org.springframework.beans.factory.InitializingBean#afterPropertiesSet\n    */")]),e._v("\n   "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@Nullable")]),e._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("default")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Object")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("postProcessBeforeInitialization")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Object")]),e._v(" bean"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("String")]),e._v(" beanName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("throws")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("BeansException")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" bean"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n    * Apply this {@code BeanPostProcessor} to the given new bean instance <i>after</i> any bean\n    * initialization callbacks (like InitializingBean's {@code afterPropertiesSet}\n    * or a custom init-method). The bean will already be populated with property values.\n    * The returned bean instance may be a wrapper around the original.\n    * <p>In case of a FactoryBean, this callback will be invoked for both the FactoryBean\n    * instance and the objects created by the FactoryBean (as of Spring 2.0). The\n    * post-processor can decide whether to apply to either the FactoryBean or created\n    * objects or both through corresponding {@code bean instanceof FactoryBean} checks.\n    * <p>This callback will also be invoked after a short-circuiting triggered by a\n    * {@link InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation} method,\n    * in contrast to all other {@code BeanPostProcessor} callbacks.\n    * <p>The default implementation returns the given {@code bean} as-is.\n    * @param bean the new bean instance\n    * @param beanName the name of the bean\n    * @return the bean instance to use, either the original or a wrapped one;\n    * if {@code null}, no subsequent BeanPostProcessors will be invoked\n    * @throws org.springframework.beans.BeansException in case of errors\n    * @see org.springframework.beans.factory.InitializingBean#afterPropertiesSet\n    * @see org.springframework.beans.factory.FactoryBean\n    */")]),e._v("\n   "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@Nullable")]),e._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("default")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Object")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("postProcessAfterInitialization")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Object")]),e._v(" bean"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("String")]),e._v(" beanName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("throws")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("BeansException")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" bean"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),t("p",[e._v("这个接口，允许自定义修改新的"),t("code",[e._v("bean")]),e._v("实例，例如检查标记接口或用代理包装，注意，如果有相互依赖的"),t("code",[e._v("bean")]),e._v("，这里可能无法使用代理。")]),e._v(" "),t("p",[t("code",[e._v("postProcessBeforeInitialization")]),e._v("方法，在任何"),t("code",[e._v("bean")]),e._v("初始化回调（如"),t("code",[e._v("InitializingBean")]),e._v("的"),t("code",[e._v("afterPropertiesSet")]),e._v("或自定义"),t("code",[e._v("init")]),e._v("方法）之前，将此"),t("code",[e._v("BeanPostProcessor")]),e._v("应用于给定的新的bean实例。 这个"),t("code",[e._v("bean")]),e._v("已经被填充了属性值。 返回的"),t("code",[e._v("bean")]),e._v("实例可能是原始的包装器。")]),e._v(" "),t("p",[t("code",[e._v("postProcessAfterInitialization")]),e._v("方法，在"),t("code",[e._v("Bean")]),e._v("初始化回调（如"),t("code",[e._v("InitializingBean")]),e._v("的"),t("code",[e._v("afterPropertiesSet")]),e._v("或自定义"),t("code",[e._v("init")]),e._v("方法）之后，将此"),t("code",[e._v("BeanPostProcessor")]),e._v("应用于给定的新bean实例。 这个"),t("code",[e._v("bean")]),e._v("已经被填充了属性值。  返回的"),t("code",[e._v("bean")]),e._v("实例可能是原始的包装器。这个方法也会在"),t("code",[e._v("InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation")]),e._v("方法生成对象后再次不让他生成对象（具体可以参考Spring生成bean的过程）。")]),e._v(" "),t("h3",{attrs:{id:"instantiationawarebeanpostprocessor接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#instantiationawarebeanpostprocessor接口"}},[e._v("#")]),e._v(" "),t("code",[e._v("InstantiationAwareBeanPostProcessor")]),e._v("接口")]),e._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n * Subinterface of {@link BeanPostProcessor} that adds a before-instantiation callback,\n * and a callback after instantiation but before explicit properties are set or\n * autowiring occurs.\n *\n * <p>Typically used to suppress default instantiation for specific target beans,\n * for example to create proxies with special TargetSources (pooling targets,\n * lazily initializing targets, etc), or to implement additional injection strategies\n * such as field injection.\n *\n * <p><b>NOTE:</b> This interface is a special purpose interface, mainly for\n * internal use within the framework. It is recommended to implement the plain\n * {@link BeanPostProcessor} interface as far as possible, or to derive from\n * {@link InstantiationAwareBeanPostProcessorAdapter} in order to be shielded\n * from extensions to this interface.\n *\n * @author Juergen Hoeller\n * @author Rod Johnson\n * @since 1.2\n * @see org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator#setCustomTargetSourceCreators\n * @see org.springframework.aop.framework.autoproxy.target.LazyInitTargetSourceCreator\n */")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("interface")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("InstantiationAwareBeanPostProcessor")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("extends")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("BeanPostProcessor")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n\t * Apply this BeanPostProcessor <i>before the target bean gets instantiated</i>.\n\t * The returned bean object may be a proxy to use instead of the target bean,\n\t * effectively suppressing default instantiation of the target bean.\n\t * <p>If a non-null object is returned by this method, the bean creation process\n\t * will be short-circuited. The only further processing applied is the\n\t * {@link #postProcessAfterInitialization} callback from the configured\n\t * {@link BeanPostProcessor BeanPostProcessors}.\n\t * <p>This callback will be applied to bean definitions with their bean class,\n\t * as well as to factory-method definitions in which case the returned bean type\n\t * will be passed in here.\n\t * <p>Post-processors may implement the extended\n\t * {@link SmartInstantiationAwareBeanPostProcessor} interface in order\n\t * to predict the type of the bean object that they are going to return here.\n\t * <p>The default implementation returns {@code null}.\n\t * @param beanClass the class of the bean to be instantiated\n\t * @param beanName the name of the bean\n\t * @return the bean object to expose instead of a default instance of the target bean,\n\t * or {@code null} to proceed with default instantiation\n\t * @throws org.springframework.beans.BeansException in case of errors\n\t * @see #postProcessAfterInstantiation\n\t * @see org.springframework.beans.factory.support.AbstractBeanDefinition#getBeanClass()\n\t * @see org.springframework.beans.factory.support.AbstractBeanDefinition#getFactoryMethodName()\n\t */")]),e._v("\n\t"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@Nullable")]),e._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("default")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Object")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("postProcessBeforeInstantiation")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v(" beanClass"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("String")]),e._v(" beanName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("throws")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("BeansException")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n\t * Perform operations after the bean has been instantiated, via a constructor or factory method,\n\t * but before Spring property population (from explicit properties or autowiring) occurs.\n\t * <p>This is the ideal callback for performing custom field injection on the given bean\n\t * instance, right before Spring's autowiring kicks in.\n\t * <p>The default implementation returns {@code true}.\n\t * @param bean the bean instance created, with properties not having been set yet\n\t * @param beanName the name of the bean\n\t * @return {@code true} if properties should be set on the bean; {@code false}\n\t * if property population should be skipped. Normal implementations should return {@code true}.\n\t * Returning {@code false} will also prevent any subsequent InstantiationAwareBeanPostProcessor\n\t * instances being invoked on this bean instance.\n\t * @throws org.springframework.beans.BeansException in case of errors\n\t * @see #postProcessBeforeInstantiation\n\t */")]),e._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("default")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("boolean")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("postProcessAfterInstantiation")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Object")]),e._v(" bean"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("String")]),e._v(" beanName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("throws")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("BeansException")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n\t * Post-process the given property values before the factory applies them\n\t * to the given bean, without any need for property descriptors.\n\t * <p>Implementations should return {@code null} (the default) if they provide a custom\n\t * {@link #postProcessPropertyValues} implementation, and {@code pvs} otherwise.\n\t * In a future version of this interface (with {@link #postProcessPropertyValues} removed),\n\t * the default implementation will return the given {@code pvs} as-is directly.\n\t * @param pvs the property values that the factory is about to apply (never {@code null})\n\t * @param bean the bean instance created, but whose properties have not yet been set\n\t * @param beanName the name of the bean\n\t * @return the actual property values to apply to the given bean (can be the passed-in\n\t * PropertyValues instance), or {@code null} which proceeds with the existing properties\n\t * but specifically continues with a call to {@link #postProcessPropertyValues}\n\t * (requiring initialized {@code PropertyDescriptor}s for the current bean class)\n\t * @throws org.springframework.beans.BeansException in case of errors\n\t * @since 5.1\n\t * @see #postProcessPropertyValues\n\t */")]),e._v("\n\t"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@Nullable")]),e._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("default")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("PropertyValues")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("postProcessProperties")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("PropertyValues")]),e._v(" pvs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Object")]),e._v(" bean"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("String")]),e._v(" beanName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("throws")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("BeansException")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n\n\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/**\n\t * Post-process the given property values before the factory applies them\n\t * to the given bean. Allows for checking whether all dependencies have been\n\t * satisfied, for example based on a "Required" annotation on bean property setters.\n\t * <p>Also allows for replacing the property values to apply, typically through\n\t * creating a new MutablePropertyValues instance based on the original PropertyValues,\n\t * adding or removing specific values.\n\t * <p>The default implementation returns the given {@code pvs} as-is.\n\t * @param pvs the property values that the factory is about to apply (never {@code null})\n\t * @param pds the relevant property descriptors for the target bean (with ignored\n\t * dependency types - which the factory handles specifically - already filtered out)\n\t * @param bean the bean instance created, but whose properties have not yet been set\n\t * @param beanName the name of the bean\n\t * @return the actual property values to apply to the given bean (can be the passed-in\n\t * PropertyValues instance), or {@code null} to skip property population\n\t * @throws org.springframework.beans.BeansException in case of errors\n\t * @see #postProcessProperties\n\t * @see org.springframework.beans.MutablePropertyValues\n\t * @deprecated as of 5.1, in favor of {@link #postProcessProperties(PropertyValues, Object, String)}\n\t */')]),e._v("\n\t"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@Deprecated")]),e._v("\n\t"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@Nullable")]),e._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("default")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("PropertyValues")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("postProcessPropertyValues")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n\t\t\t"),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("PropertyValues")]),e._v(" pvs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("PropertyDescriptor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" pds"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Object")]),e._v(" bean"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("String")]),e._v(" beanName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("throws")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("BeansException")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n\n\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" pvs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),t("ol",[t("li",[t("code",[e._v("InstantiationAwareBeanPostProcessor")]),e._v("接口继承"),t("code",[e._v("BeanPostProcessor")]),e._v("接口，它内部提供了3个方法，再加上"),t("code",[e._v("BeanPostProcessor")]),e._v("接口内部的2个方法，所以实现这个接口需要实现5个方法。"),t("code",[e._v("InstantiationAwareBeanPostProcessor")]),e._v("接口的主要作用在于目标对象的实例化过程中需要处理的事情，包括实例化对象的前后过程以及实例的属性设置")]),e._v(" "),t("li",[t("code",[e._v("postProcessBeforeInstantiation")]),e._v("方法是最先执行的方法，它在目标对象实例化之前调用，该方法的返回值类型是"),t("code",[e._v("Object")]),e._v("，我们可以返回任何类型的值。由于这个时候目标对象还未实例化，所以这个返回值可以用来代替原本该生成的目标对象的实例(比如代理对象)。如果该方法的返回值代替原本该生成的目标对象，后续只有"),t("code",[e._v("postProcessAfterInitialization")]),e._v("方法会调用，其它方法不再调用；否则按照正常的流程走")]),e._v(" "),t("li",[t("code",[e._v("postProcessAfterInstantiation")]),e._v("方法在目标对象实例化之后调用，这个时候对象已经被实例化，但是该实例的属性还未被设置，都是null。因为它的返回值是决定要不要调用"),t("code",[e._v("postProcessPropertyValues")]),e._v("方法的其中一个因素（因为还有一个因素是"),t("code",[e._v("mbd.getDependencyCheck()")]),e._v("）；如果该方法返回"),t("code",[e._v("false")]),e._v(",并且不需要"),t("code",[e._v("check")]),e._v("，那么"),t("code",[e._v("postProcessPropertyValues")]),e._v("就会被忽略不执行；如果返回"),t("code",[e._v("true")]),e._v(","),t("code",[e._v("postProcessPropertyValues")]),e._v("就会被执行")]),e._v(" "),t("li",[t("code",[e._v("postProcessPropertyValues")]),e._v("方法对属性值进行修改(这个时候属性值还未被设置，但是我们可以修改原本该设置进去的属性值)。如果"),t("code",[e._v("postProcessAfterInstantiation")]),e._v("方法返回"),t("code",[e._v("false")]),e._v("，该方法可能不会被调用。可以在该方法内对属性值进行修改")]),e._v(" "),t("li",[e._v("父接口"),t("code",[e._v("BeanPostProcessor")]),e._v("的2个方法"),t("code",[e._v("postProcessBeforeInitialization")]),e._v("和"),t("code",[e._v("postProcessAfterInitialization")]),e._v("都是在目标对象被实例化之后，并且属性也被设置之后调用的")])]),e._v(" "),t("h2",{attrs:{id:"用来感知ioc容器的各种aware扩展"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用来感知ioc容器的各种aware扩展"}},[e._v("#")]),e._v(" 用来感知"),t("code",[e._v("IOC")]),e._v("容器的各种"),t("code",[e._v("Aware")]),e._v("扩展")]),e._v(" "),t("h3",{attrs:{id:"beannameaware"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beannameaware"}},[e._v("#")]),e._v(" "),t("code",[e._v("BeanNameAware")])]),e._v(" "),t("p",[e._v("实现该接口并重写"),t("code",[e._v("void setBeanName(String var1)")]),e._v("方法；获取该"),t("code",[e._v("bean")]),e._v("在"),t("code",[e._v("BeanFactory")]),e._v("配置中的名字")]),e._v(" "),t("h3",{attrs:{id:"applicationcontextaware"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#applicationcontextaware"}},[e._v("#")]),e._v(" "),t("code",[e._v("ApplicationContextAware")])]),e._v(" "),t("p",[e._v("实现该接口，并重写"),t("code",[e._v("setApplicationContext(ApplicationContext applicationContext)")]),e._v("方法，获取"),t("code",[e._v("spring")]),e._v("上下文环境的对象，然后通过该上下文对象获取spring容器中的bean对象")]),e._v(" "),t("h3",{attrs:{id:"beanfactoryaware"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beanfactoryaware"}},[e._v("#")]),e._v(" "),t("code",[e._v("BeanFactoryAware")])]),e._v(" "),t("p",[e._v("实现该接口，并重写"),t("code",[e._v("void setBeanFactory(BeanFactory beanFactory)")]),e._v("方法，"),t("code",[e._v("Bean")]),e._v("获取配置他们的"),t("code",[e._v("BeanFactory")]),e._v("的引用")]),e._v(" "),t("h3",{attrs:{id:"servletcontextaware"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#servletcontextaware"}},[e._v("#")]),e._v(" "),t("code",[e._v("ServletContextAware")])]),e._v(" "),t("p",[e._v("实现该接口，并重写"),t("code",[e._v("void setServletContext(ServletContext servletContext)")]),e._v("方法；获取"),t("code",[e._v("servletContext")]),e._v("容器。")]),e._v(" "),t("h3",{attrs:{id:"resourceloaderaware"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#resourceloaderaware"}},[e._v("#")]),e._v(" "),t("code",[e._v("ResourceLoaderAware")])]),e._v(" "),t("p",[e._v("实现该接口，并重写"),t("code",[e._v("void setServletContext(ServletContext servletContext)")]),e._v("方法；获取"),t("code",[e._v("ResourceLoader")]),e._v("对象，便能够通过它获得各种资源。")]),e._v(" "),t("h3",{attrs:{id:"beanclassloaderaware"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beanclassloaderaware"}},[e._v("#")]),e._v(" "),t("code",[e._v("BeanClassLoaderAware")])]),e._v(" "),t("p",[e._v("实现该接口，并重写"),t("code",[e._v("void setBeanClassLoader(ClassLoader classLoader)")]),e._v("方法；获取 Bean 的"),t("code",[e._v("classLoader")])]),e._v(" "),t("h3",{attrs:{id:"initializingbean"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#initializingbean"}},[e._v("#")]),e._v(" "),t("code",[e._v("InitializingBean")])]),e._v(" "),t("p",[e._v("实现该接口，并重写"),t("code",[e._v("void afterPropertiesSet() throws Exception")]),e._v("方法；所有的属性被初始化后、在"),t("code",[e._v("init-method")]),e._v("之前调用。")]),e._v(" "),t("h2",{attrs:{id:"spring-context"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-context"}},[e._v("#")]),e._v(" "),t("code",[e._v("spring-context")])]),e._v(" "),t("h3",{attrs:{id:"importselector接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#importselector接口"}},[e._v("#")]),e._v(" "),t("code",[e._v("ImportSelector")]),e._v("接口")]),e._v(" "),t("p",[e._v("在初始化"),t("code",[e._v("bean")]),e._v("工厂时期["),t("code",[e._v("invokeBeanFactoryPostProcessors()")]),e._v("]  会调用。"),t("code",[e._v("ImportSelector")]),e._v("的导入实现是通过"),t("code",[e._v("BeanDefinitionRegistryPostProcessor.postProcessBeanDefinitionRegistry()")]),e._v("来实现的。")]),e._v(" "),t("h3",{attrs:{id:"importbeandefinitionregistrar接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#importbeandefinitionregistrar接口"}},[e._v("#")]),e._v(" "),t("code",[e._v("ImportBeanDefinitionRegistrar")]),e._v("接口")]),e._v(" "),t("p",[e._v("需要与 "),t("code",[e._v("@Import")]),e._v(" 和 "),t("code",[e._v("@Configuration")]),e._v(" 共同配合使用。"),t("code",[e._v("@EnableFeignClients")]),e._v(",  "),t("code",[e._v("@EnableDubboConfig")]),e._v(" 等都是通过"),t("code",[e._v("ImportBeanDefinitionRegistrar")]),e._v(" 来动态注入的服务调用类到spring容器里面。")]),e._v(" "),t("h3",{attrs:{id:"classpathbeandefinitionscanner"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#classpathbeandefinitionscanner"}},[e._v("#")]),e._v(" "),t("code",[e._v("ClassPathBeanDefinitionScanner")])]),e._v(" "),t("p",[e._v("可以扫描路径下的类(里面的一些方法可以脱离spring环境独立使用)")]),e._v(" "),t("h2",{attrs:{id:"spring-mvc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc"}},[e._v("#")]),e._v(" "),t("code",[e._v("spring-MVC")])]),e._v(" "),t("h3",{attrs:{id:"handlerinterceptor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#handlerinterceptor"}},[e._v("#")]),e._v(" "),t("code",[e._v("HandlerInterceptor")])]),e._v(" "),t("p",[e._v("拦截器，可以在一个请求被真正处理之前、请求被处理但还没输出到响应中、请求已经被输出到响应中之后这三个时间点去做任何我们想要做的事情，对应方法:  "),t("code",[e._v("preHandle()")]),e._v("/"),t("code",[e._v("postHandle()")]),e._v("/"),t("code",[e._v("afterCompletion()")]),e._v("。实际使用时，除了直接实现"),t("code",[e._v("HandlerInterceptor")]),e._v("，我们也经常直接继承"),t("code",[e._v("HandlerInterceptorAdapter")]),e._v("。")])])}),[],!1,null,null,null);t.default=s.exports}}]);