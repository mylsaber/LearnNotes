(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{291:function(t,s,a){"use strict";a.r(s);var n=a(13),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"集合概览"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#集合概览"}},[t._v("#")]),t._v(" 集合概览")]),t._v(" "),s("p",[t._v("这是测试修改")]),t._v(" "),s("h2",{attrs:{id:"集合概览-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#集合概览-2"}},[t._v("#")]),t._v(" 集合概览")]),t._v(" "),s("p",[t._v("Java 集合， 也叫作容器，主要是由两大接口派生而来：一个是 "),s("code",[t._v("Collection")]),t._v("接口，主要用于存放单一元素；另一个是 "),s("code",[t._v("Map")]),t._v(" 接口，主要用于存放键值对。对于"),s("code",[t._v("Collection")]),t._v(" 接口，下面又有三个主要的子接口："),s("code",[t._v("List")]),t._v("、"),s("code",[t._v("Set")]),t._v(" 和 "),s("code",[t._v("Queue")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/mylsaber/learn-notes/raw/master/java%E5%9F%BA%E7%A1%80/images/1.png",alt:""}})]),t._v(" "),s("h2",{attrs:{id:"集合框架底层数据结构总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#集合框架底层数据结构总结"}},[t._v("#")]),t._v(" 集合框架底层数据结构总结")]),t._v(" "),s("h3",{attrs:{id:"list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[t._v("#")]),t._v(" List")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Arraylist")]),t._v("： "),s("code",[t._v("Object[]")]),t._v(" 数组")]),t._v(" "),s("li",[s("code",[t._v("Vector")]),t._v("："),s("code",[t._v("Object[]")]),t._v(" 数组")]),t._v(" "),s("li",[s("code",[t._v("LinkedList")]),t._v("： 双向链表(JDK1.6 之前为循环链表，JDK1.7 取消了循环)")])]),t._v(" "),s("h4",{attrs:{id:"set"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[t._v("#")]),t._v(" Set")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("HashSet")]),t._v("(无序，唯一): 基于 "),s("code",[t._v("HashMap")]),t._v(" 实现的，底层采用 "),s("code",[t._v("HashMap")]),t._v(" 来保存元素")]),t._v(" "),s("li",[s("code",[t._v("LinkedHashSet")]),t._v(": "),s("code",[t._v("LinkedHashSet")]),t._v(" 是 "),s("code",[t._v("HashSet")]),t._v(" 的子类，并且其内部是通过 "),s("code",[t._v("LinkedHashMap")]),t._v(" 来实现的。有点类似于我们之前说的 "),s("code",[t._v("LinkedHashMap")]),t._v(" 其内部是基于 "),s("code",[t._v("HashMap")]),t._v(" 实现一样，不过还是有一点点区别的")]),t._v(" "),s("li",[s("code",[t._v("TreeSet")]),t._v("(有序，唯一): 红黑树(自平衡的排序二叉树)")])]),t._v(" "),s("h4",{attrs:{id:"queue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#queue"}},[t._v("#")]),t._v(" Queue")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("PriorityQueue")]),t._v(": "),s("code",[t._v("Object[]")]),t._v(" 数组来实现二叉堆")]),t._v(" "),s("li",[s("code",[t._v("ArrayQueue")]),t._v(": "),s("code",[t._v("Object[]")]),t._v(" 数组 + 双指针")])]),t._v(" "),s("h4",{attrs:{id:"map"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[t._v("#")]),t._v(" Map")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("HashMap")]),t._v("： JDK1.8 之前 "),s("code",[t._v("HashMap")]),t._v(" 由数组+链表组成的，数组是 "),s("code",[t._v("HashMap")]),t._v(" 的主体，链表则是主要为了解决哈希冲突而存在的（“拉链法”解决冲突）。JDK1.8  以后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）（将链表转换成红黑树前会判断，如果当前数组的长度小于  64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间")]),t._v(" "),s("li",[s("code",[t._v("LinkedHashMap")]),t._v("： "),s("code",[t._v("LinkedHashMap")]),t._v(" 继承自 "),s("code",[t._v("HashMap")]),t._v("，所以它的底层仍然是基于拉链式散列结构即由数组和链表或红黑树组成。另外，"),s("code",[t._v("LinkedHashMap")]),t._v(" 在上面结构的基础上，增加了一条双向链表，使得上面的结构可以保持键值对的插入顺序。同时通过对链表进行相应的操作，实现了访问顺序相关逻辑。")]),t._v(" "),s("li",[s("code",[t._v("Hashtable")]),t._v("： 数组+链表组成的，数组是 "),s("code",[t._v("Hashtable")]),t._v(" 的主体，链表则是主要为了解决哈希冲突而存在的")]),t._v(" "),s("li",[s("code",[t._v("TreeMap")]),t._v("： 红黑树（自平衡的排序二叉树）")])]),t._v(" "),s("h2",{attrs:{id:"list和set集合详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list和set集合详解"}},[t._v("#")]),t._v(" List和Set集合详解")]),t._v(" "),s("ul",[s("li",[t._v("有序性\n"),s("ul",[s("li",[t._v("list保证插入顺序")]),t._v(" "),s("li",[t._v("set不保证插入顺序")])])]),t._v(" "),s("li",[t._v("唯一性\n"),s("ul",[s("li",[t._v("list可以重复")]),t._v(" "),s("li",[t._v("set不能重复")])])]),t._v(" "),s("li",[t._v("获取元素\n"),s("ul",[s("li",[t._v("list可以通过索引获取元素")]),t._v(" "),s("li",[t._v("set不能通过索引获取")])])])]),t._v(" "),s("h3",{attrs:{id:"list的实现类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list的实现类"}},[t._v("#")]),t._v(" List的实现类")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("ArrayList")]),t._v("：底层数据结构是数组，查询快，增删慢，线程不安全，效率高，可以存储重复元素")]),t._v(" "),s("li",[s("strong",[t._v("LinkedList：")]),t._v(" 底层数据结构是链表，查询慢，增删快，线程不安全，效率高，可以存储重复元素")]),t._v(" "),s("li",[s("strong",[t._v("Vector")]),t._v(":底层数据结构是数组，查询快，增删慢，线程安全，效率低，可以存储重复元素")])]),t._v(" "),s("p",[t._v("List特有方法")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),t._v(" element"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),t._v(" element"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("indexOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//元素第一次出现位置")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListIterator")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listIterator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 列表迭代器")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("subList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fromIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" toIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//截取集合")]),t._v("\n")])])]),s("h3",{attrs:{id:"set实现类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set实现类"}},[t._v("#")]),t._v(" Set实现类")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("HashSet")]),t._v("：底层数据结构采用哈希表实现，元素无序且唯一，线程不安全，效率高，可以存储null元素，"),s("strong",[t._v("元素的唯一性是靠所存储元素类型是否重写hashCode()和equals()方法来保证的")]),t._v("，如果没有重写这两个方法，则无法保证元素的唯一性。")]),t._v(" "),s("li",[s("strong",[t._v("LinkedHashSet")]),t._v("：底层数据结构采用链表和哈希表共同实现，链表保证了元素的顺序与存储顺序一致，哈希表保证了元素的唯一性。线程不安全，效率高。")]),t._v(" "),s("li",[s("strong",[t._v("TreeSet")]),t._v("：底层数据结构采用红黑树来实现，元素唯一且已经排好序；唯一性同样需要重写hashCode和equals()方法，二叉树结构保证了元素的有序性。根据构造方法不同，分为自然排序（无参构造）和比较器排序（有参构造），自然排序要求元素必须实现Compareable接口，并重写里面的compareTo()方法，元素通过比较返回的int值来判断排序序列，返回0说明两个对象相同，不需要存储；比较器排序需要在TreeSet初始化是时候传入一个实现Comparator接口的比较器对象，或者采用匿名内部类的方式new一个Comparator对象，重写里面的compare()方法。")])]),t._v(" "),s("h3",{attrs:{id:"list和set总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list和set总结"}},[t._v("#")]),t._v(" List和Set总结")]),t._v(" "),s("ul",[s("li",[t._v("List,Set都是继承自\tCollection接口，Map则不是")]),t._v(" "),s("li",[s("strong",[t._v("List特点")]),t._v("：元素有放入顺序，元素可重复")]),t._v(" "),s("li",[t._v("**Set特点：**元素无放入顺序，元素不可重复，重复元素会覆盖掉，（注意：元素虽然无放入顺序，但是元素在set中的位置是有该元素的HashCode决定的，其位置其实是固定的，加入Set 的Object必须定义equals()方法 ，另外list支持for循环，也就是通过下标来遍历，也可以用迭代器，但是set只能用迭代，因为他无序，无法用下标来取得想要的值。）")]),t._v(" "),s("li",[s("strong",[t._v("Set")]),t._v("：检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位置改变。")]),t._v(" "),s("li",[s("strong",[t._v("List")]),t._v("：和数组类似，List可以动态增长，查找元素效率高，插入删除元素效率低，因为会引起其他元素位置改变。")])]),t._v(" "),s("h2",{attrs:{id:"map详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#map详解"}},[t._v("#")]),t._v(" Map详解")]),t._v(" "),s("p",[t._v("Map用于保存具有映射关系的数据，Map里保存着两组数据：key和value，它们都可以使任何引用类型的数据，但key不能重复。所以通过指定的key就可以取出对应的value。")]),t._v(" "),s("p",[t._v("Map接口有四个比较重要的实现类")]),t._v(" "),s("ul",[s("li",[t._v("HashMap")]),t._v(" "),s("li",[t._v("LinkedHashMap")]),t._v(" "),s("li",[t._v("TreeMap")]),t._v(" "),s("li",[t._v("HashTable。")])]),t._v(" "),s("p",[t._v("TreeMap是有序的，HashMap和HashTable是无序的。")]),t._v(" "),s("p",[t._v("Hashtable的方法是同步的，HashMap的方法不是同步的。这是两者最主要的区别。")]),t._v(" "),s("p",[t._v("Map 没有继承 Collection 接口， Map 提供 key 到 value 的映射，你可以通过“键”查找“值”。一个 Map 中不能包含相同的 key ，每个 key 只能映射一个 value 。 Map 接口提供 3 种集合的视图， Map 的内容可以被当作一组 key 集合，一组 value 集合，或者一组 key-value 映射。")]),t._v(" "),s("h3",{attrs:{id:"map常用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#map常用方法"}},[t._v("#")]),t._v(" Map常用方法")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("clear")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//清空map")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("containsKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("containsValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Entry")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("entrySet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回map中键值对所组成的set集合")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isEmpty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("keySet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回键所组成的set集合")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("putAll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collection")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("values")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回value所组成的collection")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//内部类entry")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回该entry里所包含的key")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回该entry里所包含的value")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//设置value并返回旧的value")]),t._v("\n")])])]),s("h3",{attrs:{id:"hashmap和hashtable的比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashmap和hashtable的比较"}},[t._v("#")]),t._v(" HashMap和HashTable的比较")]),t._v(" "),s("p",[t._v("HashMap不支持线程的同步，即任一时刻可以有多个线程同时写HashMap;可能会导致数据的不一致。如果需要同步，可以用  Collections的synchronizedMap方法使HashMap具有同步的能力，或者使用ConcurrentHashMap。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("线程安全")]),t._v("：HashTable线程安全")]),t._v(" "),s("li",[s("strong",[t._v("空值")]),t._v("：HashTable不能放入null，HashMap允许一个null为key，无数null为value")])]),t._v(" "),s("h3",{attrs:{id:"treemap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#treemap"}},[t._v("#")]),t._v(" TreeMap")]),t._v(" "),s("p",[t._v("实现SortMap接口，基于红黑树，对所有key排序，分为自然排序和定制排序")]),t._v(" "),s("h3",{attrs:{id:"map的遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#map的遍历"}},[t._v("#")]),t._v(" Map的遍历")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token import"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token import"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Iterator")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token import"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n   \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("     \n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("     \n         "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" map "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     \n         map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"first"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"linlin"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     \n         map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"second"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"好好学java"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     \n         map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"third"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sihai"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    \n         map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"first"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sihai2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   \n     \n     \n         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第一种：通过Map.keySet遍历key和value     ")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"===================通过Map.keySet遍历key和value:==================="')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     \n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("keySet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("     \n             "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"key= "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"  and  value= "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     \n         "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("     \n              \n         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第二种：通过Map.entrySet使用iterator遍历key和value     ")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"===================通过Map.entrySet使用iterator遍历key和value:==================="')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     \n         "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Iterator")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Entry")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" it "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("entrySet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("iterator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     \n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasNext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("     \n             "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Entry")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" entry "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" it"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     \n             "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"key= "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" entry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"  and  value= "')]),t._v("    \n                     "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" entry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     \n         "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("     \n     \n         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第三种：通过Map.entrySet遍历key和value     ")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"===================通过Map.entrySet遍历key和value:==================="')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     \n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Entry")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" entry "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("entrySet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("     \n             "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"key= "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" entry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"  and  value= "')]),t._v("    \n                     "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" entry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     \n         "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("     \n     \n         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第四种：通过Map.values()遍历所有的value，但是不能遍历键key     ")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"===================通过Map.values()遍历所有的value:==================="')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     \n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" v "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("values")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("     \n             "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value= "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     \n         "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("     \n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("          \n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("    \n")])])]),s("h3",{attrs:{id:"小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),s("ul",[s("li",[t._v("HashMap：非线程安全，基于哈希表实现。使用HashMap要求添加的键类明确定义了hashCode()和equals()[可以重写hashCode()和equals()]，为了优化HashMap空间的使用，您可以调优初始容量和负载因子。")]),t._v(" "),s("li",[t._v("TreeMap：非线程安全基于红黑树实现。TreeMap没有调优选项，因为该树总处于平衡状态。")])]),t._v(" "),s("h2",{attrs:{id:"重点问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重点问题"}},[t._v("#")]),t._v(" 重点问题")]),t._v(" "),s("h3",{attrs:{id:"说说-list-set-queue-map-四者的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说说-list-set-queue-map-四者的区别"}},[t._v("#")]),t._v(" 说说 List, Set, Queue, Map 四者的区别？")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("List")]),t._v("(对付顺序的好帮手): 存储的元素是有序的、可重复的。")]),t._v(" "),s("li",[s("code",[t._v("Set")]),t._v("(注重独一无二的性质): 存储的元素是无序的、不可重复的。")]),t._v(" "),s("li",[s("code",[t._v("Queue")]),t._v("(实现排队功能的叫号机): 按特定的排队规则来确定先后顺序，存储的元素是有序的、可重复的。")]),t._v(" "),s("li",[s("code",[t._v("Map")]),t._v('(用 key 来搜索的专家): 使用键值对（key-value）存储，类似于数学上的函数 y=f(x)，"x" 代表 key，"y" 代表 value，key 是无序的、不可重复的，value 是无序的、可重复的，每个键最多映射到一个值。')])]),t._v(" "),s("h3",{attrs:{id:"arraylist-与-linkedlist-区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arraylist-与-linkedlist-区别"}},[t._v("#")]),t._v(" "),s("code",[t._v("ArrayList")]),t._v(" 与 "),s("code",[t._v("LinkedList")]),t._v(" 区别?")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("是否保证线程安全： "),s("code",[t._v("ArrayList")]),t._v(" 和 "),s("code",[t._v("LinkedList")]),t._v(" 都是不同步的，也就是不保证线程安全；")])]),t._v(" "),s("li",[s("p",[t._v("底层数据结构： "),s("code",[t._v("Arraylist")]),t._v(" 底层使用的是 "),s("code",[t._v("Object")]),t._v(" 数组；"),s("code",[t._v("LinkedList")]),t._v(" 底层使用的是 双向链表 数据结构（JDK1.6之前为循环链表，JDK1.7取消了循环。）")])]),t._v(" "),s("li",[s("p",[t._v("插入和删除是否受元素位置的影响：")]),t._v(" "),s("p",[t._v("① "),s("code",[t._v("ArrayList")]),t._v(" 采用数组存储，所以插入和删除元素的时间复杂度受元素位置的影响。 比如：执行add(E e)方法的时候， "),s("code",[t._v("ArrayList")]),t._v(" 会默认在将指定的元素追加到此列表的末尾，这种情况时间复杂度就是O(1)。但是如果要在指定位置 i 插入和删除元素的话（add(int index, E element)）时间复杂度就为 O(n-i)。因为在进行上述操作的时候集合中第 i 和第 i 个元素之后的(n-i)个元素都要执行向后位/向前移一位的操作。")]),t._v(" "),s("p",[t._v("② "),s("code",[t._v("LinkedList")]),t._v("  采用链表存储，所以插入，删除元素时间复杂度不受元素位置的影响，都是近似 O（1）而数组为近似 O（n）。")])]),t._v(" "),s("li",[s("p",[t._v("是否支持快速随机访问： "),s("code",[t._v("LinkedList")]),t._v(" 不支持高效的随机元素访问，而 "),s("code",[t._v("ArrayList")]),t._v(" 支持。快速随机访问就是通过元素的序号快速获取元素对象(对应于"),s("code",[t._v("get(int index)")]),t._v("方法)。")])]),t._v(" "),s("li",[s("p",[t._v("内存空间占用： "),s("code",[t._v("ArrayList")]),t._v("的空 间浪费主要体现在在list列表的结尾会预留一定的容量空间，而"),s("code",[t._v("LinkedList")]),t._v(" 的空间花费则体现在它的每一个元素都需要消耗比"),s("code",[t._v("ArrayList")]),t._v("更多的空间（因为要存放直接后继和直接前驱以及数据）。")])])]),t._v(" "),s("h3",{attrs:{id:"arraylist-与-vector-区别呢-为什么要用arraylist取代vector呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arraylist-与-vector-区别呢-为什么要用arraylist取代vector呢"}},[t._v("#")]),t._v(" "),s("code",[t._v("ArrayList")]),t._v(" 与 "),s("code",[t._v("Vector")]),t._v(" 区别呢?为什么要用"),s("code",[t._v("ArrayList")]),t._v("取代"),s("code",[t._v("Vector")]),t._v("呢？")]),t._v(" "),s("p",[s("code",[t._v("Vector")]),t._v("类的所有方法都是同步的。可以由两个线程安全地访问一个"),s("code",[t._v("Vector")]),t._v("对象、但是一个线程访问"),s("code",[t._v("Vector")]),t._v("的话代码要在同步操作上耗费大量的时间。"),s("code",[t._v("Arraylist")]),t._v("不是同步的，所以在不需要保证线程安全时建议使用"),s("code",[t._v("ArrayList")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"hashmap和-hashtable的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashmap和-hashtable的区别"}},[t._v("#")]),t._v(" "),s("code",[t._v("HashMap")]),t._v("和 "),s("code",[t._v("Hashtable")]),t._v("的区别")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("线程是否安全")]),t._v("： HashMap 是非线程安全的，HashTable 是线程安全的；HashTable 内部的方法基本都经过"),s("code",[t._v("synchronized")]),t._v(" 修饰。（如果你要保证线程安全的话就使用 ConcurrentHashMap 吧！）；")]),t._v(" "),s("li",[s("strong",[t._v("效率")]),t._v("： 因为线程安全的问题，HashMap 要比 HashTable 效率高一点。另外，HashTable 基本被淘汰，不要在代码中使用它；")]),t._v(" "),s("li",[s("strong",[t._v("对Null key 和Null value的支持")]),t._v("： HashMap 中，null 可以作为键，这样的键只有一个，可以有一个或多个键所对应的值为 null。。但是在 HashTable 中 put 进的键值只要有一个 null，直接抛出 NullPointerException。")]),t._v(" "),s("li",[t._v("初始容量大小和每次扩充容量大小的不同 ： ①创建时如果不指定容量初始值，Hashtable 默认的初始大小为11，之后每次扩充，容量变为原来的2n+1。HashMap 默认的初始化大小为16。之后每次扩充，容量变为原来的2倍。②创建时如果给定了容量初始值，那么 Hashtable 会直接使用你给定的大小，而 HashMap 会将其扩充为2的幂次方大小。也就是说 HashMap 总是使用2的幂作为哈希表的大小。")]),t._v(" "),s("li",[s("strong",[t._v("底层数据结构")]),t._v("： JDK1.8 以后的 HashMap 在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）并且组长度是否大于64时，将链表转化为红黑树，以减少搜索时间。Hashtable 没有这样的机制。")])]),t._v(" "),s("h3",{attrs:{id:"hashmap-和-hashset区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-和-hashset区别"}},[t._v("#")]),t._v(" HashMap 和 HashSet区别")]),t._v(" "),s("p",[t._v("HashSet 底层就是基于 HashMap 实现的。（HashSet 的源码非常非常少，因为除了 clone()、writeObject()、readObject()是 HashSet 自己不得不实现之外，其他方法都是直接调用 HashMap 中的方法。")]),t._v(" "),s("h3",{attrs:{id:"hashmap的底层实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashmap的底层实现"}},[t._v("#")]),t._v(" HashMap的底层实现")]),t._v(" "),s("p",[t._v("JDK1.8之前")]),t._v(" "),s("p",[t._v("JDK1.8 之前 "),s("code",[t._v("HashMap")]),t._v(" 底层是 数组和链表 结合在一起使用也就是 链表散列。 "),s("code",[t._v("HashMap")]),t._v(" 通过 key 的 "),s("code",[t._v("hashCode")]),t._v("经过扰动函数处理过后得到 hash 值，然后通过 (n - 1) & hash 判断当前元素存放的位置（这里的 n 指的是数组的长度），如果当前位置存在元素的话，就判断该元素与要存入的元素的 hash 值以及 key 是否相同，如果相同的话，直接覆盖，不相同就通过拉链法解决冲突。")]),t._v(" "),s("p",[t._v("所谓扰动函数指的就是  "),s("code",[t._v("HashMap")]),t._v(" 的 hash 方法。使用 hash 方法也就是扰动函数是为了防止一些实现比较差的 "),s("code",[t._v("hashCode()")]),t._v("方法 换句话说使用扰动函数之后可以减少碰撞。")]),t._v(" "),s("p",[s("code",[t._v("HashMap")]),t._v("实现原理（比较好的描述）："),s("code",[t._v("HashMap")]),t._v("以键值对（key-value）的形式来储存元素，但调用put方法时，"),s("code",[t._v("HashMap")]),t._v("会通过hash函数来计算key的hash值，然后通过hash值&(HashMap.length-1)判断当前元素的存储位置，如果当前位置存在元素的话，就要判断当前元素与要存入的key是否相同，如果相同则覆盖，如果不同则通过拉链表来解决。JDk1.8时，当链表长度大于8并且组长度是否大于64时，将链表转为红黑树。")]),t._v(" "),s("h3",{attrs:{id:"concurrenthashmap-和hashtable的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap-和hashtable的区别"}},[t._v("#")]),t._v(" "),s("code",[t._v("ConcurrentHashMap")]),t._v(" 和"),s("code",[t._v("Hashtable")]),t._v("的区别")]),t._v(" "),s("p",[s("code",[t._v("ConcurrentHashMap")]),t._v("和 "),s("code",[t._v("Hashtable")]),t._v("的区别主要体现在实现线程安全的方式上不同。")]),t._v(" "),s("ul",[s("li",[t._v("底层数据结构： JDK1.7的 "),s("code",[t._v("ConcurrentHashMap")]),t._v(" 底层采用 分段的数组+链表 实现，JDK1.8 采用的数据结构跟"),s("code",[t._v("HashMap")]),t._v("1.8的结构一样，数组+链表/红黑二叉树。"),s("code",[t._v("Hashtable")]),t._v("和 JDK1.8 之前的 "),s("code",[t._v("HashMap")]),t._v("的底层数据结构类似都是采用 数组+链表 的形式，数组是 "),s("code",[t._v("HashMap")]),t._v(" 的主体，链表则是主要为了解决哈希冲突而存在的；")]),t._v(" "),s("li",[t._v("实现线程安全的方式（重要）： ① 在JDK1.7的时候，"),s("code",[t._v("ConcurrentHashMap")]),t._v("（分段锁） 对整个桶数组进行了分割分段(Segment)，每一把锁只锁容器其中一部分数据，多线程访问容器里不同数据段的数据，就不会存在锁竞争，提高并发访问率。 到了 JDK1.8 的时候已经摒弃了Segment的概念，而是直接用 Node 数组+链表+红黑树的数据结构来实现，并发控制使用 synchronized 和 CAS 来操作。（JDK1.6以后 对 synchronized锁做了很多优化） 整个看起来就像是优化过且线程安全的 "),s("code",[t._v("HashMap")]),t._v("，虽然在JDK1.8中还能看到 Segment 的数据结构，但是已经简化了属性，只是为了兼容旧版本；② "),s("code",[t._v("Hashtable")]),t._v("(同一把锁) 使用 synchronized 来保证线程安全，get/put所有相关操作都是synchronized的，这相当于给整个哈希表加了一把大锁，效率非常低下。当一个线程访问同步方法时，其他线程也访问同步方法，可能会进入阻塞或轮询状态，如使用 put 添加元素，另一个线程不能使用 put 添加元素，也不能使用 get，竞争会越来越激烈效率越低。")])]),t._v(" "),s("h3",{attrs:{id:"comparable和-comparator的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#comparable和-comparator的区别"}},[t._v("#")]),t._v(" "),s("code",[t._v("comparable")]),t._v("和 "),s("code",[t._v("Comparator")]),t._v("的区别")]),t._v(" "),s("ul",[s("li",[t._v("comparable接口实际上是出自java.lang包 它有一个 "),s("code",[t._v("compareTo(Object obj)")]),t._v("方法用来排序")]),t._v(" "),s("li",[t._v("comparator接口实际上是出自 java.util 包它有一个"),s("code",[t._v("compare(Object obj1, Object obj2)")]),t._v("方法用来排序")])])])}),[],!1,null,null,null);s.default=e.exports}}]);