(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{334:function(a,t,e){"use strict";e.r(t);var s=e(13),n=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"_1-对象概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-对象概述"}},[a._v("#")]),a._v(" 1 对象概述")]),a._v(" "),t("p",[a._v("Kubernetes对象时持久化的实体。Kubernetes使用这些实体去表示整个集群的状态。比如它描述了如下信息：")]),a._v(" "),t("ul",[t("li",[a._v("哪些容器化应用正在运行（以及在哪些节点上运行）")]),a._v(" "),t("li",[a._v("可以被应用使用的资源")]),a._v(" "),t("li",[a._v("关于应用运行时表现的策略，比如重启策略，升级策略以及容错策略")])]),a._v(" "),t("p",[a._v("Kubernetes对象时"),t("strong",[a._v("目标性记录")]),a._v("——一旦创建该对象，Kubernetes系统将不断工作以确保该对象存在。通过创建对象，你就是在告知Kubernetes系统，你想要的集群工作负载状态看起来应该是什么样子的，简单来说，就是通过创建Kubernetes对象来描述集群的"),t("strong",[a._v("期望状态")]),a._v("\n操作Kubernetes对象，无论是创建、修改或则删除，都需要使用Kubernetes API。比如当使用"),t("code",[a._v("kubectl")]),a._v("命令接口（CLI）时，CLI会调用必要的Kubernetes API；也可以使用客户端库，来直接调用Kubernetes API\n几乎每个Kubernetes对象包含两个嵌套的对象字段：")]),a._v(" "),t("ul",[t("li",[a._v("spec（规约）：必须在创建对象时设置其内容，描述你希望对象所具有的特征——"),t("strong",[a._v("期望状态")])]),a._v(" "),t("li",[a._v("status（状态）：描述了对象的当前状态，它由Kubernetes系统设置并更新。使之达成"),t("strong",[a._v("期望状态")])])]),a._v(" "),t("h1",{attrs:{id:"_2-描述对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-描述对象"}},[a._v("#")]),a._v(" 2 描述对象")]),a._v(" "),t("p",[a._v("创建Kubernetes对象时，必须提供对象的"),t("strong",[a._v("spec")]),a._v("，用来描述对象的"),t("strong",[a._v("期望状态")]),a._v("以及对象的基本信息。当使用Kubernetes API创建对象时，API请求必须包含JSON格式的对象信息，一般我们提供"),t("code",[a._v("yaml")]),a._v("文件给kubectl。kubectl在发起请求时，会自动转换为JSON格式。")]),a._v(" "),t("div",{staticClass:"language-yaml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("apiVersion")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" apps/v1\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("kind")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" Deployment\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("metadata")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" nginx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("deployment\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("spec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("selector")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("matchLabels")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("app")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" nginx\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("replicas")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 告知 Deployment 运行 2 个与该模板匹配的 Pod")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("template")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("metadata")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("labels")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("app")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" nginx\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("spec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("containers")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" nginx\n        "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("image")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" nginx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("1.14.2\n        "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("ports")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("containerPort")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("80")]),a._v("\n")])])]),t("p",[a._v("使用声明式对象配置部署：")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[a._v("kubectl apply "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-f")]),a._v(" nginxpod.yaml\n")])])]),t("p",[a._v("必要字段：")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("apiVersion")]),a._v("：创建该对象所使用的Kubernetes API版本")]),a._v(" "),t("li",[t("code",[a._v("kind")]),a._v("：创建对象的类别")]),a._v(" "),t("li",[t("code",[a._v("metadata")]),a._v("：帮助唯一标识对象的一些数据，包括一个"),t("code",[a._v("name")]),a._v("字符串，"),t("code",[a._v("UID")]),a._v("和可选的"),t("code",[a._v("namespace")])]),a._v(" "),t("li",[t("code",[a._v("spec")]),a._v("：所期望的该对象的状态")])]),a._v(" "),t("h1",{attrs:{id:"_3-创建kubernetes对象的yaml"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-创建kubernetes对象的yaml"}},[a._v("#")]),a._v(" 3 创建Kubernetes对象的yaml")]),a._v(" "),t("ul",[t("li",[a._v("如果Kubernetes集群中已经存在了要创建的对象，可以使用"),t("code",[a._v("kubectl get")]),a._v("直接输出到yaml，然后去除status即可：")])]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[a._v("kubectl get pod xxx "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-o")]),a._v(" yaml "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" demo.yaml\n")])])]),t("ul",[t("li",[a._v("如果Kubernetes集群没有要创建的对象，可以使用类似"),t("code",[a._v("kubectl run xxx --dry-run=client")]),a._v("输出yaml：")])]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[a._v("kubectl run nginx-pod "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--image")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("nginx --dry-run"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("client "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-o")]),a._v(" yaml "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" demo.yaml\n")])])]),t("h1",{attrs:{id:"_4-对象名称"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-对象名称"}},[a._v("#")]),a._v(" 4 对象名称")]),a._v(" "),t("h2",{attrs:{id:"_4-1-概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-概述"}},[a._v("#")]),a._v(" 4.1 概述")]),a._v(" "),t("p",[a._v("Kubernetes REST API中，所有的对象都是通过"),t("code",[a._v("name")]),a._v("和"),t("code",[a._v("UID")]),a._v("唯一确定的。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("/api/v1/namespaces/{namespace}/pods/{name}\n")])])]),t("h2",{attrs:{id:"_4-2-name"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-name"}},[a._v("#")]),a._v(" 4.2 Name")]),a._v(" "),t("p",[a._v("在同一个命名空间下，同一类型对象，可以通过name来确定唯一性。命名规则如下：")]),a._v(" "),t("ul",[t("li",[a._v("不超过253个字符。")]),a._v(" "),t("li",[a._v("只能由小写字母、数字、减号"),t("code",[a._v("-")]),a._v("、小数点"),t("code",[a._v(".")]),a._v("组成。")])]),a._v(" "),t("h2",{attrs:{id:"_4-3-uid"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-uid"}},[a._v("#")]),a._v(" 4.3 UID")]),a._v(" "),t("p",[a._v("由Kubernetes系统生成，唯一标识某个Kubernetes对象。Kubernetes中每创建一个对象，都有一个唯一的"),t("code",[a._v("UID")]),a._v("。用于区分多次创建的同名对象。（删除上一个对象后再次创建一个同名对象，"),t("code",[a._v("UID")]),a._v("不同）")]),a._v(" "),t("h1",{attrs:{id:"_5-命名空间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-命名空间"}},[a._v("#")]),a._v(" 5 命名空间")]),a._v(" "),t("h2",{attrs:{id:"_5-1-概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-概述"}},[a._v("#")]),a._v(" 5.1 概述")]),a._v(" "),t("p",[a._v("Kubernetes中命名空间是用来隔离对象资源的，默认情况下，会初始化四个命名空间：")]),a._v(" "),t("ul",[t("li",[a._v("default：所有没有指定 namespace 的对象都会被分配到此名称空间中。")]),a._v(" "),t("li",[a._v("kube-node-lease：Kubernetes 集群节点之间的心跳维护，V 1.13 开始引入。")]),a._v(" "),t("li",[a._v("kube-system：Kubernetes 系统创建的对象放在此名称空间中。")]),a._v(" "),t("li",[a._v("kube-public：此名称空间是 Kubernetes 集群安装时自动创建的，并且所有的用户都可以访问（包括未认证的用户），主要是为集群预留的，如：在某些情况中，某些 Kubernetes 对象应用应该能被所有集群用户访问到。")])]),a._v(" "),t("h2",{attrs:{id:"_5-2-特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-特点"}},[a._v("#")]),a._v(" 5.2 特点")]),a._v(" "),t("p",[a._v("资源隔离、网络不隔离。例如：配置文件不可以跨命名空间访问，但是网络可以跨命名空间访问。")]),a._v(" "),t("h2",{attrs:{id:"_5-3-使用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-使用场景"}},[a._v("#")]),a._v(" 5.3 使用场景")]),a._v(" "),t("ul",[t("li",[a._v("环境隔离：dev（开发）、test（测试）、prod（生产）等。")]),a._v(" "),t("li",[a._v("产品线隔离：前端、后端、ios、Android等。")])]),a._v(" "),t("h1",{attrs:{id:"_6-标签和标签选择器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-标签和标签选择器"}},[a._v("#")]),a._v(" 6 标签和标签选择器")]),a._v(" "),t("h2",{attrs:{id:"_6-1-概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-概述"}},[a._v("#")]),a._v(" 6.1 概述")]),a._v(" "),t("p",[a._v("标签是Kubernetes对象上一组键值对，标签可以用来按照用户自己的意图来组织和选择一组Kubernetes对象。我们可以在创建对象的时候添加标签，也可以在创建后添加。每个Kubernetes对象可以有多个标签。\n对于多个包含相同标签的Kubernetes对象。可以通过使用标签选择器（label selector）来选择一组对象，标签选择器是Kubernetes中最主要的分类和筛选手段。")]),a._v(" "),t("h2",{attrs:{id:"_6-2-标签的语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-标签的语法"}},[a._v("#")]),a._v(" 6.2 标签的语法")]),a._v(" "),t("div",{staticClass:"language-yaml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("apiVersion")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" v1\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("kind")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" Pod\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("metadata")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" nginx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("pod\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("labels")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 标签")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("app")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" nginx\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("environment")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" prod \n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("spec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("containers")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" nginx\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("image")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" nginx\n")])])]),t("h2",{attrs:{id:"_6-3-标签操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-标签操作"}},[a._v("#")]),a._v(" 6.3 标签操作")]),a._v(" "),t("h3",{attrs:{id:"_6-3-1-添加标签"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-1-添加标签"}},[a._v("#")]),a._v(" 6.3.1 添加标签")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[a._v("kubectl label pod nginx-pod "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("hello")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("world\n")])])]),t("h3",{attrs:{id:"_6-3-2-更新标签"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-2-更新标签"}},[a._v("#")]),a._v(" 6.3.2 更新标签")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[a._v("kubectl label pod nginx-pod "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("hello")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("java "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--overwrite")]),a._v("\n")])])]),t("h3",{attrs:{id:"_6-3-3-删除标签"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-3-删除标签"}},[a._v("#")]),a._v(" 6.3.3 删除标签")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[a._v("kubectl label pod nginx-pod hello-\n")])])]),t("h2",{attrs:{id:"_6-4-标签选择器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-标签选择器"}},[a._v("#")]),a._v(" 6.4 标签选择器")]),a._v(" "),t("p",[a._v("Kubernetes的api-server支持两种形式的标签选择器，"),t("code",[a._v("equality-based")]),a._v("基于等式和"),t("code",[a._v("set-based")]),a._v("基于集合。标签选择器可以包含多个条件，并使用逗号进行分隔。")]),a._v(" "),t("ul",[t("li",[a._v("基于等式：")])]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 选择了标签名为 `environment` 且 标签值为 `production` 的Kubernetes对象")]),a._v("\nkubectl get pods "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-l")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("environment")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("production,tier"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("frontend\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 选择了标签名为 `tier` 且标签值不等于 `frontend` 的对象，以及不包含标签 `tier` 的对象")]),a._v("\nkubectl get pods "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-l")]),a._v(" tier "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!=")]),a._v(" frontend\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 选择所有包含 `partition` 标签的对象")]),a._v("\nkubectl get pods "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-l")]),a._v(" partition\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 选择所有不包含 `partition` 标签的对象")]),a._v("\nkubectl get pods "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-l")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("partition\n")])])]),t("ul",[t("li",[a._v("基于集合，支持的操作符——"),t("code",[a._v("in")]),a._v("、"),t("code",[a._v("notin")]),a._v("、"),t("code",[a._v("exists")]),a._v("：")])]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 选择所有的包含 `environment` 标签且值为 `production` 或 `qa` 的对象")]),a._v("\nkubectl get pods "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-l")]),a._v(" environment "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("production, qa"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 选择所有的 `tier` 标签不为 `frontend` 和 `backend`的对象，或不含 `tier` 标签的对象")]),a._v("\nkubectl get pods "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-l")]),a._v(" tier notin "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("frontend, backend"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 选择包含 `partition` 标签（不检查标签值）且 `environment` 不是 `qa` 的对象")]),a._v("\nkubectl get pods "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-l")]),a._v(" partition,environment notin "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("qa"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);