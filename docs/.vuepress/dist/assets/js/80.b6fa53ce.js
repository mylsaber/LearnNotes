(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{352:function(v,_,e){"use strict";e.r(_);var a=e(13),t=Object(a.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h3",{attrs:{id:"java"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java"}},[v._v("#")]),v._v(" Java")]),v._v(" "),_("h4",{attrs:{id:"面向对象有哪些特征"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面向对象有哪些特征"}},[v._v("#")]),v._v(" 面向对象有哪些特征")]),v._v(" "),_("ul",[_("li",[v._v("封装：隐藏了类的内部实现机制，可以在不影响使用的情况下改变类的内部结构，同时也保护了数据。对外界而已它的内部细节是隐藏的，暴露给外界的只是它的访问方法。")]),v._v(" "),_("li",[v._v("继承：是为了重用父类代码。两个类若存在IS-A的关系就可以使用继承。，同时继承也为实现多态做了铺垫。")]),v._v(" "),_("li",[v._v("多态：就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。因为在程序运行时才确定具体的类，这样，不用修改源程序代码，就可以让引用变量绑定到各种不同的类实现上，从而导致该引用调用的具体方法随之改变，即不修改程序代码就可以改变程序运行时所绑定的具体代码，让程序可以选择多个运行状态，这就是多态性。")])]),v._v(" "),_("h4",{attrs:{id:"jdk8新特性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jdk8新特性"}},[v._v("#")]),v._v(" jdk8新特性")]),v._v(" "),_("blockquote",[_("ol",[_("li",[_("p",[v._v("Interface")]),v._v(" "),_("p",[v._v("新增default修饰方法，是普通实例方法，可以用"),_("code",[v._v("this")]),v._v("调用，可以被子类继承、重写")]),v._v(" "),_("p",[v._v("新增static修饰方法，使用和一般静态方法一样，但是不能被子类继承，只能通过``Interface`调用")])]),v._v(" "),_("li",[_("p",[v._v("functional-interface函数式接口")])]),v._v(" "),_("li",[_("p",[v._v("Lambda表达式")]),v._v(" "),_("p",[v._v("Lambda表达式是一个匿名函数，java 8允许吧函数作为参数传递进方法中，lambda 表达式可以引用外边变量，但是该变量默认拥有 final 属性，不能被修改，如果修改，编译时就报错。")])]),v._v(" "),_("li",[_("p",[v._v("方法引用")]),v._v(" "),_("p",[v._v("java 8允许使用"),_("code",[v._v("::")]),v._v("关键字来传递方法或者构造函数引用，无论如何，表达式返回的类型必须是functional-interface")])]),v._v(" "),_("li",[_("p",[v._v("Stream")]),v._v(" "),_("p",[v._v("Stream不存储数据，它可以检索和逻辑处理集合数据，包括筛选、排序、统计、计数等。可以分为Stream串行流、ParallelStream并行流，可多线程执行")])]),v._v(" "),_("li",[_("p",[v._v("Optional")]),v._v(" "),_("p",[v._v("使用 "),_("code",[v._v("Optional")]),v._v(" 解决 NPE（"),_("code",[v._v("java.lang.NullPointerException")]),v._v("）问题，它就是为 NPE 而生的，其中可以包含空值或非空值。")])]),v._v(" "),_("li",[_("p",[v._v("Date-Time API")])])])]),v._v(" "),_("h4",{attrs:{id:"java中抽象类和接口有什么区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java中抽象类和接口有什么区别"}},[v._v("#")]),v._v(" java中抽象类和接口有什么区别")]),v._v(" "),_("ul",[_("li",[v._v("构造方法：抽象类可以有构造方法，接口中不能有构造方法")]),v._v(" "),_("li",[v._v("成员变量：抽象类可以有普通成员变量，任意访问类型的的静态成员变量。接口中不能有普通成员变量，只能有"),_("code",[v._v("public static final")]),v._v("修饰的静态变量")]),v._v(" "),_("li",[v._v("方法：抽象类可以包含普通方法和抽象方法，接口中所有方法都是必须是抽象方法。抽象类中可以包含静态方法，接口中不能包含静态方法")]),v._v(" "),_("li",[v._v("访问类型：抽象类中方法可以是"),_("code",[v._v("public")]),v._v("、"),_("code",[v._v("protected")]),v._v("、默认，但是接口中的抽象方法只能是"),_("code",[v._v("public")]),v._v("，并且默认是"),_("code",[v._v("public abstract")]),v._v("类型")]),v._v(" "),_("li",[v._v("实现：抽象类单继承，接口可以多继承")]),v._v(" "),_("li",[v._v("应用上：抽象类主要用于抽象类别，接口主要用来抽象方法功能，当我们来抽象一个狗的对象时，可以使用抽象类来描述狗，具体到那种类型的狗时可以继承这个抽象类，当我们描述一类动作时，比如猫和狗都有跑这个能力，就可以实现接口来实现跑这个功能")])]),v._v(" "),_("h4",{attrs:{id:"hashcode和equals如何使用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#hashcode和equals如何使用"}},[v._v("#")]),v._v(" "),_("code",[v._v("hashcode")]),v._v("和"),_("code",[v._v("equals")]),v._v("如何使用")]),v._v(" "),_("p",[v._v("自定义类中的的"),_("code",[v._v("equals")]),v._v("和==是一样的，比较的是内存地址，当重写"),_("code",[v._v("equals")]),v._v("方法时，必须也要同事重写"),_("code",[v._v("hashcode")]),v._v("方法，因为在比如"),_("code",[v._v("HashMap")]),v._v("中，比较两个对象是否相等，首先是调用"),_("code",[v._v("hashcode")]),v._v("来比较，再用"),_("code",[v._v("equals")]),v._v("比较，如果使用"),_("code",[v._v("equals")]),v._v("比较相同，那么比较"),_("code",[v._v("hashcode")]),v._v("时也必须相同")]),v._v(" "),_("h4",{attrs:{id:"java代理的几种实现方式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java代理的几种实现方式"}},[v._v("#")]),v._v(" "),_("code",[v._v("java")]),v._v("代理的几种实现方式")]),v._v(" "),_("ul",[_("li",[v._v("静态代理：自己手动实现")]),v._v(" "),_("li",[v._v("动态代理：\n"),_("ol",[_("li",[_("code",[v._v("JDK")]),v._v("动态代理，代理类必须实现接口")]),v._v(" "),_("li",[_("code",[v._v("CGLIB")]),v._v("动态代理，代理类可以不用实现接口")])])])]),v._v(" "),_("h4",{attrs:{id:"和equals有哪些区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#和equals有哪些区别"}},[v._v("#")]),v._v(" ==和"),_("code",[v._v("equals")]),v._v("有哪些区别")]),v._v(" "),_("p",[_("code",[v._v("Object")]),v._v("类中，"),_("code",[v._v("equals")]),v._v("用==实现，对象都是比较内存地址，基本数据类型比较值，但是可以重写"),_("code",[v._v("equals")]),v._v("方法来实现内容比较，比如"),_("code",[v._v("String")]),v._v("中"),_("code",[v._v("equals")]),v._v("方法就是重写过的。")]),v._v(" "),_("h4",{attrs:{id:"java异常处理机制是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java异常处理机制是什么"}},[v._v("#")]),v._v(" "),_("code",[v._v("java")]),v._v("异常处理机制是什么")]),v._v(" "),_("p",[v._v("处理机制为：抛出异常，捕捉异常")]),v._v(" "),_("p",[v._v("抛出异常的方法："),_("code",[v._v("throws")]),v._v("和"),_("code",[v._v("throw")]),v._v("：")]),v._v(" "),_("ul",[_("li",[_("p",[_("code",[v._v("throws")]),v._v("：通常用在声明方法时，用来指定方法可能抛出的异常，多个异常使用逗号分隔，"),_("code",[v._v("throws")]),v._v("关键字将异常抛给上一级，如果不想处理该异常，可以继续向上抛出，但最终要有能够处理该异常的代码。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("throw")]),v._v("：通常用在方法体中或者用来抛出用户自定义异常，并且抛出一个异常对象。程序在执行到throw语句时立即停止，如果要捕捉"),_("code",[v._v("throw")]),v._v("抛出的异常，则必须使用"),_("code",[v._v("try-catch")]),v._v("语句块或者"),_("code",[v._v("try-catch-finally")]),v._v("语句。")]),v._v(" "),_("p",[_("code",[v._v("try-catch-finally")]),v._v("语句：首先执行"),_("code",[v._v("try")]),v._v("中代码，如果代码执行正常就就继续执行"),_("code",[v._v("finally")]),v._v("代码块，如果发生异常且被"),_("code",[v._v("catch")]),v._v("捕获到就执行"),_("code",[v._v("catch")]),v._v("代码块，然后执行"),_("code",[v._v("finally")]),v._v("代码块。")])])]),v._v(" "),_("h4",{attrs:{id:"java中重写和重载的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java中重写和重载的区别"}},[v._v("#")]),v._v(" "),_("code",[v._v("java")]),v._v("中重写和重载的区别")]),v._v(" "),_("p",[v._v("重写：实质是子类对父类的函数进行了重定义。若子类中的方法与父类中的某一方法具有相同的方法名、返回类型和参数表，则新方法将覆盖原有的方法，如需父类中原有的方法则可使用 super 关键字。重写方法访问修饰符不能小于被重写方法，抛出的异常必须是被重写方法抛出异常或者其子异常")]),v._v(" "),_("p",[v._v("重载：是让类以统一的方式处理不同类型数据的一种手段，实质表现就是多个具有不同的参数个数或者类型的同名函数（返回值类型可随意，不能以返回类型作为重载函数的区分标准）同时存在于同一个类中，是一个类中多态性的一种表现，调用时通过参数判断具体方法。")]),v._v(" "),_("p",[v._v("重载与重写是 "),_("code",[v._v("Java 多态性")]),v._v("的不同表现。")]),v._v(" "),_("ul",[_("li",[v._v("重写是父类与子类之间多态性的表现，在运行时起作用（动态多态性，譬如实现动态绑定）")]),v._v(" "),_("li",[v._v("而重载是一个类中多态性的表现，在编译时起作用（静态多态性，譬如实现静态绑定）。")])]),v._v(" "),_("h4",{attrs:{id:"string、stringbuffer、stringbuilder区别和使用场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#string、stringbuffer、stringbuilder区别和使用场景"}},[v._v("#")]),v._v(" "),_("code",[v._v("String")]),v._v("、"),_("code",[v._v("StringBuffer")]),v._v("、"),_("code",[v._v("StringBuilder")]),v._v("区别和使用场景")]),v._v(" "),_("p",[_("code",[v._v("String")]),v._v("：字符数组被final修饰，不可变，如果进行字符串操作是新建一个"),_("code",[v._v("String")]),v._v("。")]),v._v(" "),_("p",[_("code",[v._v("StringBuffer")]),v._v("：可变字符串，线程安全，适用于多线程环境操作字符串")]),v._v(" "),_("p",[_("code",[v._v("StringBuilder")]),v._v("：可变字符串，线程不安全，适用于单线程环境操作字符串，")]),v._v(" "),_("h4",{attrs:{id:"怎么声明一个类不会被继承"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#怎么声明一个类不会被继承"}},[v._v("#")]),v._v(" 怎么声明一个类不会被继承")]),v._v(" "),_("ul",[_("li",[v._v("使用"),_("code",[v._v("final")]),v._v("修饰类")]),v._v(" "),_("li",[v._v("私有化构造器")])]),v._v(" "),_("h3",{attrs:{id:"java集合"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java集合"}},[v._v("#")]),v._v(" Java集合")]),v._v(" "),_("h4",{attrs:{id:"高并发集合有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#高并发集合有哪些"}},[v._v("#")]),v._v(" 高并发集合有哪些")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("早期线程安全集合")]),v._v(" "),_("p",[_("code",[v._v("Vector")]),v._v("：类似于"),_("code",[v._v("ArrayList")]),v._v("，可变数组实现")]),v._v(" "),_("p",[_("code",[v._v("HashTable")]),v._v("：类似于"),_("code",[v._v("HashMap")]),v._v("，但是它的key和value都不能为null")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("Collections")]),v._v("包装方法")]),v._v(" "),_("div",{staticClass:"language-java extra-class"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("List")]),_("span",{pre:!0,attrs:{class:"token generics"}},[_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("<")]),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("E")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),v._v(" synArrayList "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Collections")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("synchronizedList")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("new")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("ArrayList")]),_("span",{pre:!0,attrs:{class:"token generics"}},[_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("<")]),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("E")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n\n"),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Set")]),_("span",{pre:!0,attrs:{class:"token generics"}},[_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("<")]),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("E")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),v._v(" synHashSet "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Collections")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("synchronizedSet")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("new")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("HashSet")]),_("span",{pre:!0,attrs:{class:"token generics"}},[_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("<")]),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("E")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n\n"),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Map")]),_("span",{pre:!0,attrs:{class:"token generics"}},[_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("<")]),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("K")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("V")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),v._v(" synHashMap "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Collections")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("synchronizedMap")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("new")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("HashMap")]),_("span",{pre:!0,attrs:{class:"token generics"}},[_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("<")]),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("K")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("V")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n")])])]),_("p",[_("code",[v._v("Collections")]),v._v("针对每种集合都声明了一个线程安全的包装类，在原集合的基础上添加了锁对象，集合中的每个方法都通过这个锁对象实现同步")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("java.util.concurrent")]),v._v("包中的集合")]),v._v(" "),_("ol",[_("li",[_("p",[_("code",[v._v("ConcurrentHashMap")]),v._v("：")]),v._v(" "),_("p",[_("code",[v._v("ConcurrentHashMap")]),v._v("和"),_("code",[v._v("HashTable")]),v._v("都是线程安全的集合，它们的不同主要是加锁粒度上的不同。"),_("code",[v._v("HashTable")]),v._v("的加锁方法是给每个方法加上synchronized关键字，这样锁住的是整个Table对象。而"),_("code",[v._v("ConcurrentHashMap")]),v._v("是更细粒度的加锁")]),v._v(" "),_("p",[v._v("在"),_("code",[v._v("JDK1.8")]),v._v("之前，"),_("code",[v._v("ConcurrentHashMap")]),v._v("加的是分段锁，也就是"),_("code",[v._v("Segment")]),v._v("锁，每个"),_("code",[v._v("Segment")]),v._v("含有整个"),_("code",[v._v("table")]),v._v("的一部分，这样不同分段之间的并发操作就互不影响\n"),_("code",[v._v("JDK1.8")]),v._v("对此做了进一步的改进，它取消了"),_("code",[v._v("Segment")]),v._v("字段，直接在"),_("code",[v._v("table")]),v._v("元素上加锁，实现对每一行进行加锁，进一步减小了并发冲突的概率")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("CopyOnWriteArrayList")]),v._v("和"),_("code",[v._v("CopyOnWriteArraySet")])]),v._v(" "),_("p",[v._v("它们是加了写锁的"),_("code",[v._v("ArrayList")]),v._v("和"),_("code",[v._v("ArraySet")]),v._v("，锁住的是整个对象，但读操作可以并发执行，"),_("code",[v._v("CopyOnWriteArraySet")]),v._v("底层使用"),_("code",[v._v("CopyOnWriteArrayList")]),v._v("实现")])]),v._v(" "),_("li",[_("p",[v._v("除此之外还有"),_("code",[v._v("ConcurrentSkipListMap")]),v._v("、"),_("code",[v._v("ConcurrentSkipListSet")]),v._v("、"),_("code",[v._v("ConcurrentLinkedQueue")]),v._v("、"),_("code",[v._v("ConcurrentLinkedDeque")]),v._v("等，至于为什么没有"),_("code",[v._v("ConcurrentArrayList")]),v._v("，原因是无法设计一个通用的而且可以规避"),_("code",[v._v("ArrayList")]),v._v("的并发瓶颈的线程安全的集合类，只能锁住整个"),_("code",[v._v("list")]),v._v("，这用"),_("code",[v._v("Collections")]),v._v("里的包装类就能办到")])])])])]),v._v(" "),_("h4",{attrs:{id:"hashmap和hashtable的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#hashmap和hashtable的区别"}},[v._v("#")]),v._v(" "),_("code",[v._v("HashMap")]),v._v("和"),_("code",[v._v("HashTable")]),v._v("的区别")]),v._v(" "),_("p",[v._v("线程安全不同：")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("Hashtable")]),v._v("的几乎所有函数都是同步的，即它是线程安全的，支持多线程。")]),v._v(" "),_("li",[_("code",[v._v("HashMap")]),v._v("的函数则是非同步的，它不是线程安全的。")])]),v._v(" "),_("p",[v._v("对null值的处理不同：")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("HashMap")]),v._v("的key、value都可以为null。")]),v._v(" "),_("li",[_("code",[v._v("Hashtable")]),v._v("的key、value都不可以为null。")])]),v._v(" "),_("p",[v._v("容量的初始值 和 增加方式都不一样：")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("HashMap")]),v._v("默认的容量大小是16；增加容量时，每次将容量变为“原始容量x2”。")]),v._v(" "),_("li",[_("code",[v._v("Hashtable")]),v._v("默认的容量大小是11；增加容量时，每次将容量变为“原始容量x2 + 1”。")])]),v._v(" "),_("p",[v._v("添加key-value时的hash值算法不同")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("HashMap")]),v._v("添加元素时，是使用自定义的哈希算法。")]),v._v(" "),_("li",[_("code",[v._v("Hashtable")]),v._v("没有自定义哈希算法，而直接采用的key的hashCode()。")])]),v._v(" "),_("h4",{attrs:{id:"hashmap有哪些线程安全的方式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#hashmap有哪些线程安全的方式"}},[v._v("#")]),v._v(" "),_("code",[v._v("HashMap")]),v._v("有哪些线程安全的方式")]),v._v(" "),_("ul",[_("li",[v._v("使用"),_("code",[v._v("Collections.synchronizedMap(new HashMap<String, Strinig>())")]),v._v("获取线程安全"),_("code",[v._v("Map")])]),v._v(" "),_("li",[v._v("使用"),_("code",[v._v("ConcurrentHashMap")])])]),v._v(" "),_("h4",{attrs:{id:"hashmap在扩容上做了哪些优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#hashmap在扩容上做了哪些优化"}},[v._v("#")]),v._v(" "),_("code",[v._v("HashMap")]),v._v("在扩容上做了哪些优化")]),v._v(" "),_("p",[_("code",[v._v("JDK7")])]),v._v(" "),_("ul",[_("li",[_("code",[v._v("HashMap")]),v._v("的内部数据保存的都是链表。因此逻辑相对简单：在准备好新的数组后，map会遍历数组的每个“桶”，然后遍历桶中的每个Entity，重新计算其hash值（也有可能不计算），找到新数组中的对应位置，以头插法插入新的链表。")])]),v._v(" "),_("p",[_("code",[v._v("JDK8")]),v._v("扩容")]),v._v(" "),_("ol",[_("li",[v._v("空参数的构造函数：实例化的"),_("code",[v._v("HashMap")]),v._v("默认内部数组是null，即没有实例化。第一次调用put方法时，则会开始第一次初始化扩容，长度为16。")]),v._v(" "),_("li",[v._v("有参构造函数：用于指定容量。会根据指定的正整数找到不小于指定容量的2的幂数，将这个数设置赋值给"),_("strong",[v._v("阈值")]),v._v("（threshold）。第一次调用put方法时，会将阈值赋值给容量，然后让 阈值=容量*负载因子（因此并不是我们手动指定了容量就一定不会触发扩容，超过阈值后一样会扩容！！)")]),v._v(" "),_("li",[v._v("如果不是第一次扩容，则容量变为原来的2倍，阈值也变为原来的2倍。"),_("em",[v._v("（容量和阈值都变为原来的2倍时，负载因子还是不变）")])])]),v._v(" "),_("p",[_("code",[v._v("JDK8")]),v._v("性能有了大大的提升：由于数组的容量是以2的幂次方扩容的，那么一个Entity在扩容时，新的位置要么在原位置，要么在原长度+原位置的位置。数组长度变为原来的2倍，表现在二进制上就是多了一个高位参与数组下标确定。此时，一个元素通过hash转换坐标的方法计算后，恰好出现一个现象：最高位是0则坐标不变，最高位是1则坐标变为“10000+原坐标”，即“原长度+原坐标”。")]),v._v(" "),_("h4",{attrs:{id:"为什么hashmap扩容的时候是两倍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么hashmap扩容的时候是两倍"}},[v._v("#")]),v._v(" 为什么"),_("code",[v._v("HashMap")]),v._v("扩容的时候是两倍")]),v._v(" "),_("ol",[_("li",[v._v("源码计算存储位置时"),_("code",[v._v("(n-1)&hash(key)")]),v._v("，容量为2的幂次方时，"),_("code",[v._v("n-1")]),v._v("的二进制会全为1，位运算时可以充分散列，避免不必要的哈希冲突。")]),v._v(" "),_("li",[v._v("扩容迁移的时候不需要再重新通过哈希定位新的位置了。扩容后，元素新的位置，要么在原脚标位，要么在原脚标位+扩容长度这么一个位置，是否移位，由扩容后表示的最高位是否1为所决定，由于移动的方向只有一个，即向高位移动。")])]),v._v(" "),_("h4",{attrs:{id:"arraylist和linkedlist有什么区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#arraylist和linkedlist有什么区别"}},[v._v("#")]),v._v(" "),_("code",[v._v("ArrayList")]),v._v("和"),_("code",[v._v("linkedList")]),v._v("有什么区别")]),v._v(" "),_("ul",[_("li",[v._v("数据结构不同："),_("code",[v._v("ArrayList")]),v._v("底层使用Array（数组）实现，"),_("code",[v._v("LinkedList")]),v._v("底层使用双向链表实现")]),v._v(" "),_("li",[_("code",[v._v("LinkedList")]),v._v("不支持高效的随机访问，而"),_("code",[v._v("ArrayList")]),v._v("支持，快速随机访问就是通过元素的序号快速获取元素对象（对应于"),_("code",[v._v("get(int index)")]),v._v("方法。")]),v._v(" "),_("li",[_("code",[v._v("ArrayList")]),v._v(" 的空 间浪费主要体现在在 "),_("code",[v._v("list")]),v._v(" 列表的结尾会预留一定的容量空间，而 "),_("code",[v._v("LinkedList")]),v._v(" 的空间花费则体现在它的每一个元素都需要消耗比 "),_("code",[v._v("ArrayList")]),v._v("更多的空间（因为要存放直接后继和直接前驱以及数据）。")]),v._v(" "),_("li",[_("code",[v._v("ArrayList")]),v._v("可以看做是一个能够自动增长的数组，扩容时按照当前容量1.5倍进行扩容")])]),v._v(" "),_("h4",{attrs:{id:"comparable-和-comparator-的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#comparable-和-comparator-的区别"}},[v._v("#")]),v._v(" comparable 和 Comparator 的区别")]),v._v(" "),_("blockquote",[_("p",[_("code",[v._v("comparable")]),v._v("接口实际上是出自于"),_("code",[v._v("java.lang")]),v._v("包，它有一个"),_("code",[v._v("compareTo")]),v._v("方法来排序，需要排序的类继承这个接口重载"),_("code",[v._v("comparable")]),v._v("方法。")]),v._v(" "),_("p",[_("code",[v._v("comparator")]),v._v("接口出自"),_("code",[v._v("java.util")]),v._v("包，它有一个"),_("code",[v._v("compare(Object obj1,Object obj2)")]),v._v("方法来排序")])]),v._v(" "),_("h4",{attrs:{id:"queue和deque的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#queue和deque的区别"}},[v._v("#")]),v._v(" Queue和Deque的区别")]),v._v(" "),_("blockquote",[_("p",[v._v("queue是单端队列，一般遵循**先进先出（FIFO）**规则")]),v._v(" "),_("p",[v._v("Deque是双端队列，在队列两端都可以插入或者删除元素，事实上，Deque还提供有"),_("code",[v._v("push()")]),v._v("和"),_("code",[v._v("pop()")]),v._v("等其他方法，可用于模拟栈")])]),v._v(" "),_("h4",{attrs:{id:"arraydeque与linkedlist的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#arraydeque与linkedlist的区别"}},[v._v("#")]),v._v(" "),_("code",[v._v("ArrayDeque")]),v._v("与"),_("code",[v._v("LinkedList")]),v._v("的区别")]),v._v(" "),_("blockquote",[_("p",[v._v("都实现了Deque接口：")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("ArrayDeque")]),v._v("是基于可变长的数组和双指针来实现的，而"),_("code",[v._v("LinkedList")]),v._v("是通过链表来实现的。")]),v._v(" "),_("li",[_("code",[v._v("ArrayDeque")]),v._v("不支持存储Null数据，但是"),_("code",[v._v("LinkedList")]),v._v("支持。")]),v._v(" "),_("li",[_("code",[v._v("ArrayDeque")]),v._v("在"),_("code",[v._v("jdk1.6")]),v._v("引入，"),_("code",[v._v("linkedList")]),v._v("在"),_("code",[v._v("jdk1.2")]),v._v("时就已经存在了。")]),v._v(" "),_("li",[_("code",[v._v("ArrayDeque")]),v._v("插入时操作为O(1)。"),_("code",[v._v("LinkedList")]),v._v("每次插入数据时要申请新的堆空间。")])])]),v._v(" "),_("h3",{attrs:{id:"jvm"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jvm"}},[v._v("#")]),v._v(" JVM")]),v._v(" "),_("h4",{attrs:{id:"什么情况下会发生栈内存溢出"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么情况下会发生栈内存溢出"}},[v._v("#")]),v._v(" 什么情况下会发生栈内存溢出")]),v._v(" "),_("blockquote",[_("p",[v._v("栈是线程私有的，他的生命周期与线程相同，每个方法在执行的时候都会创建一个栈帧，用来存储局部变量表，操作数栈，动态链接，方法出口等信息。局部变量表又包含基本数据类型，对象引用类型;")]),v._v(" "),_("p",[v._v("如果线程请求的栈深度大于虚拟机所允许的最大深度，将抛出StackOverflowError异常，方法递归调用产生这种结果;")]),v._v(" "),_("p",[v._v("如果Java虚拟机栈可以动态扩展，并且扩展的动作已经尝试过，但是无法申请到足够的内存去完成扩展，或者在新建立线程的时候没有足够的内存去创建对应的虚拟机栈，那么Java虚拟机将抛出一个OutOfMemory异常;")]),v._v(" "),_("p",[v._v("参数-Xss 去调整JVM栈的大小。")])]),v._v(" "),_("h4",{attrs:{id:"介绍一下jvm内存模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#介绍一下jvm内存模型"}},[v._v("#")]),v._v(" 介绍一下JVM内存模型")]),v._v(" "),_("blockquote",[_("p",[v._v("线程私有：")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("程序计数器")]),v._v(" "),_("p",[v._v("程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。字节码解释器工作时通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等功能都需要依赖这个计数器来完成。")]),v._v(" "),_("p",[v._v("注意：程序计数器是唯一一个不会出现 "),_("code",[v._v("OutOfMemoryError")]),v._v(" 的内存区域，它的生命周期随着线程的创建而创建，随着线程的结束而死亡。")])]),v._v(" "),_("li",[_("p",[v._v("虚拟机栈")]),v._v(" "),_("p",[v._v("它的生命周期和线程相同，描述的是 Java 方法执行的内存模型，每次方法调用的数据都是通过栈传递的。")]),v._v(" "),_("p",[v._v("实际上，Java 虚拟机栈是由一个个栈帧组成，而每个栈帧中都拥有：局部变量表、操作数栈、动态链接、方法出口信息。")]),v._v(" "),_("p",[v._v("局部变量表主要存放了编译期可知的各种数据类型（boolean、byte、char、short、int、float、long、double）、对象引用")]),v._v(" "),_("p",[v._v("Java 虚拟机栈会出现两种错误："),_("code",[v._v("StackOverFlowError")]),v._v(" 和 "),_("code",[v._v("OutOfMemoryError")])])]),v._v(" "),_("li",[_("p",[v._v("本地方法栈")]),v._v(" "),_("p",[v._v("和虚拟机栈所发挥的作用非常相似，区别是：虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 "),_("code",[v._v("Native")]),v._v(" 方法服务。 在 "),_("code",[v._v("HotSpot")]),v._v(" 虚拟机中和 "),_("code",[v._v("Java")]),v._v(" 虚拟机栈合二为一。")]),v._v(" "),_("p",[v._v("也会出现 "),_("code",[v._v("StackOverFlowError")]),v._v(" 和 "),_("code",[v._v("OutOfMemoryError")]),v._v(" 两种错误。")])])]),v._v(" "),_("p",[v._v("线程共享：")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("堆")]),v._v(" "),_("p",[v._v("Java 虚拟机所管理的内存中最大的一块，Java 堆是所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。")]),v._v(" "),_("p",[v._v("Java 堆是垃圾收集器管理的主要区域，因此也被称作"),_("code",[v._v("GC")]),v._v(" 堆（Garbage Collected Heap）。")])]),v._v(" "),_("li",[_("p",[v._v("方法区")]),v._v(" "),_("p",[v._v("方法区与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然 "),_("strong",[v._v("Java 虚拟机规范把方法区描述为堆的一个逻辑部分")]),v._v("，但是它却有一个别名叫做 "),_("strong",[v._v("Non-Heap（非堆）")]),v._v("，目的应该是与 Java 堆区分开来。")])]),v._v(" "),_("li",[_("p",[v._v("直接内存 (非运行时数据区的一部分)")])])]),v._v(" "),_("p",[v._v("运行时常量池：")]),v._v(" "),_("p",[v._v("运行时常量池是方法区的一部分。用于存放编译期间生成的各种字面量和符号引用。")]),v._v(" "),_("ol",[_("li",[_("code",[v._v("JDK1.7")]),v._v(" 之前运行时常量池逻辑包含字符串常量池存放在方法区, 此时 "),_("code",[v._v("hotspot")]),v._v(" 虚拟机对方法区的实现为永久代")]),v._v(" "),_("li",[_("code",[v._v("JDK1.7")]),v._v(" 字符串常量池被从方法区拿到了堆中, 这里没有提到运行时常量池,也就是说字符串常量池被单独拿到堆,运行时常量池剩下的东西还在方法区, 也就是 "),_("code",[v._v("hotspot")]),v._v(" 中的永久代 。")]),v._v(" "),_("li",[_("code",[v._v("JDK1.8 hotspot")]),v._v("移除了永久代用元空间("),_("code",[v._v("Metaspace")]),v._v(")取而代之, 这时候字符串常量池还在堆, 运行时常量池还在方法区, 只不过方法区的实现从永久代变成了元空间("),_("code",[v._v("Metaspace")]),v._v(")")])])]),v._v(" "),_("h4",{attrs:{id:"新生代为什么要分为eden区和两个survivor区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#新生代为什么要分为eden区和两个survivor区"}},[v._v("#")]),v._v(" 新生代为什么要分为Eden区和两个Survivor区")]),v._v(" "),_("ol",[_("li",[v._v("没有"),_("code",[v._v("Survivor")]),v._v("，"),_("code",[v._v("Eden")]),v._v("区每进行一次"),_("code",[v._v("Minor GC")]),v._v("，存活的对象就会被送到老年代。老年代很快被填满，触发"),_("code",[v._v("Major GC")]),v._v("老年代的内存空间远大于新生代，进行一次"),_("code",[v._v("Full GC")]),v._v("消耗的时间比"),_("code",[v._v("Minor GC")]),v._v("长得多,所以需要分为"),_("code",[v._v("Eden")]),v._v("和"),_("code",[v._v("Survivor")]),v._v("，"),_("code",[v._v("Survivor")]),v._v("的存在是为了筛选被送到老年代的对象，进而减少"),_("code",[v._v("Full GC")]),v._v("的发生")]),v._v(" "),_("li",[v._v("设置两个"),_("code",[v._v("Survivo")]),v._v("r区最大的好处就是解决了碎片化，刚刚新建的对象在"),_("code",[v._v("Eden")]),v._v("中，经历一次"),_("code",[v._v("Minor GC")]),v._v("，"),_("code",[v._v("Eden")]),v._v("中的存活对象就会被移动到第一块"),_("code",[v._v("survivor space S0")]),v._v("，"),_("code",[v._v("Eden")]),v._v("被清空;等"),_("code",[v._v("Eden")]),v._v("区再满了，就再触发一次"),_("code",[v._v("Minor GC")]),v._v("，"),_("code",[v._v("Eden")]),v._v("和"),_("code",[v._v("S0")]),v._v("中的存活对象又会被复制送入第二块"),_("code",[v._v("survivor space S1")]),v._v("(这个过程非常重要，因为这种复制算法保证了"),_("code",[v._v("S1")]),v._v("中来自"),_("code",[v._v("S0")]),v._v("和"),_("code",[v._v("Eden")]),v._v("两部分的存活对象占用连续的内存空间，避免了碎片化的发生)。")])]),v._v(" "),_("h4",{attrs:{id:"类加载过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#类加载过程"}},[v._v("#")]),v._v(" 类加载过程")]),v._v(" "),_("p",[v._v("系统加载Class类型的文件主要有三步：加载--\x3e连接--\x3e初始化。连接过程又可分为三步：验证--\x3e准备--\x3e解析")]),v._v(" "),_("h4",{attrs:{id:"什么是类加载器-类加载器有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是类加载器-类加载器有哪些"}},[v._v("#")]),v._v(" 什么是类加载器，类加载器有哪些")]),v._v(" "),_("blockquote",[_("p",[v._v("实现通过类的权限定名获取该类的二进制字节流的代码块叫做类加载器。主要有以下三种类加载器：")]),v._v(" "),_("ol",[_("li",[_("strong",[_("code",[v._v("BootstrapClassLoader")]),v._v("(启动类加载器)")]),v._v(" ：最顶层的加载类，由 C++实现，负责加载 "),_("code",[v._v("%JAVA_HOME%/lib")]),v._v("目录下的 jar 包和类或者被 "),_("code",[v._v("-Xbootclasspath")]),v._v("参数指定的路径中的所有类。")]),v._v(" "),_("li",[_("strong",[_("code",[v._v("ExtensionClassLoader")]),v._v("(扩展类加载器)")]),v._v(" ：主要负责加载 "),_("code",[v._v("%JRE_HOME%/lib/ext")]),v._v(" 目录下的 jar 包和类，或被 "),_("code",[v._v("java.ext.dirs")]),v._v(" 系统变量所指定的路径下的 jar 包。")]),v._v(" "),_("li",[_("strong",[_("code",[v._v("AppClassLoader")]),v._v("(应用程序类加载器)")]),v._v(" ：面向我们用户的加载器，负责加载当前应用 "),_("code",[v._v("classpath")]),v._v(" 下的所有 jar 包和类。")])]),v._v(" "),_("p",[v._v("可以通过继承"),_("code",[v._v("java.lang.ClassLoader")]),v._v("自定义类加载器。")])]),v._v(" "),_("h4",{attrs:{id:"说一说双亲委派机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#说一说双亲委派机制"}},[v._v("#")]),v._v(" 说一说双亲委派机制")]),v._v(" "),_("blockquote",[_("p",[v._v("每一个类都有一个对应它的类加载器。系统中的 "),_("code",[v._v("ClassLoader")]),v._v(" 在协同工作的时候会默认使用 "),_("strong",[v._v("双亲委派模型")]),v._v(" 。即在类加载的时候，系统会首先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载。加载的时候，首先会把该请求委派给父类加载器的 "),_("code",[v._v("loadClass()")]),v._v(" 处理，因此所有的请求最终都应该传送到顶层的启动类加载器 "),_("code",[v._v("BootstrapClassLoader")]),v._v(" 中。当父类加载器无法处理时，才由自己来处理。当父类加载器为 null 时，会使用启动类加载器 "),_("code",[v._v("BootstrapClassLoader")]),v._v(" 作为父类加载器。")]),v._v(" "),_("p",[v._v("双亲委派模型的实现代码非常简单，逻辑非常清晰，都集中在 "),_("code",[v._v("java.lang.ClassLoader")]),v._v(" 的 "),_("code",[v._v("loadClass()")]),v._v(" 中")]),v._v(" "),_("p",[v._v("双亲委派模型保证了 Java 程序的稳定运行，可以避免类的重复加载（"),_("code",[v._v("JVM")]),v._v(" 区分不同类的方式不仅仅根据类名，相同的类文件被不同的类加载器加载产生的是两个不同的类），也保证了 Java 的核心 "),_("code",[v._v("API")]),v._v(" 不被篡改。如果没有使用双亲委派模型，而是每个类加载器加载自己的话就会出现一些问题，比如我们编写一个称为 "),_("code",[v._v("java.lang.Object")]),v._v(" 类的话，那么程序运行的时候，系统就会出现多个不同的 "),_("code",[v._v("Object")]),v._v(" 类。")])]),v._v(" "),_("h4",{attrs:{id:"常用jvm参数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常用jvm参数"}},[v._v("#")]),v._v(" 常用"),_("code",[v._v("JVM")]),v._v("参数")]),v._v(" "),_("p",[_("code",[v._v("JVM")]),v._v("的参数非常之多，这里只列举比较重要的几个，通过各种各样的搜索引擎也可以得知这些信息。")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("参数名称")]),v._v(" "),_("th",[v._v("含义")]),v._v(" "),_("th",[v._v("默认值")]),v._v(" "),_("th",[v._v("说明")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("-Xms")]),v._v(" "),_("td",[v._v("初始堆大小")]),v._v(" "),_("td",[v._v("物理内存的1/64(<1GB)")]),v._v(" "),_("td",[v._v("默认(MinHeapFreeRatio参数可以调整)空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制.")])]),v._v(" "),_("tr",[_("td",[v._v("-Xmx")]),v._v(" "),_("td",[v._v("最大堆大小")]),v._v(" "),_("td",[v._v("物理内存的1/4(<1GB)")]),v._v(" "),_("td",[v._v("默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到 -Xms的最小限制")])]),v._v(" "),_("tr",[_("td",[v._v("-Xmn")]),v._v(" "),_("td",[v._v("年轻代大小(1.4or later)")]),v._v(" "),_("td"),v._v(" "),_("td",[v._v("注意：此处的大小是（eden+ 2 survivor space).与jmap -heap中显示的New gen是不同的。整个堆大小=年轻代大小 + 老年代大小 + 持久代（永久代）大小.增大年轻代后,将会减小年老代大小.此值对系统性能影响较大,Sun官方推荐配置为整个堆的3/8")])]),v._v(" "),_("tr",[_("td",[v._v("-XX:NewSize")]),v._v(" "),_("td",[v._v("设置年轻代大小(for 1.3/1.4)")]),v._v(" "),_("td"),v._v(" "),_("td")]),v._v(" "),_("tr",[_("td",[v._v("-XX:MaxNewSize")]),v._v(" "),_("td",[v._v("年轻代最大值(for 1.3/1.4)")]),v._v(" "),_("td"),v._v(" "),_("td")]),v._v(" "),_("tr",[_("td",[v._v("-XX:PermSize")]),v._v(" "),_("td",[v._v("设置持久代(perm gen)初始值")]),v._v(" "),_("td",[v._v("物理内存的1/64")]),v._v(" "),_("td")]),v._v(" "),_("tr",[_("td",[v._v("-XX:MaxPermSize")]),v._v(" "),_("td",[v._v("设置持久代最大值")]),v._v(" "),_("td",[v._v("物理内存的1/4")]),v._v(" "),_("td")]),v._v(" "),_("tr",[_("td",[v._v("-Xss")]),v._v(" "),_("td",[v._v("每个线程的堆栈大小")]),v._v(" "),_("td"),v._v(" "),_("td",[v._v("JDK5.0以后每个线程堆栈大小为1M,以前每个线程堆栈大小为256K.根据应用的线程所需内存大小进行 调整.在相同物理内存下,减小这个值能生成更多的线程.但是操作系统对一个进程内的线程数还是有限制的,不能无限生成,经验值在3000~5000左右一般小的应用， 如果栈不是很深， 应该是128k够用的 大的应用建议使用256k。这个选项对性能影响比较大，需要严格的测试。（校长）和threadstacksize选项解释很类似,官方文档似乎没有解释,在论坛中有这样一句话:-Xss is translated in a VM flag named ThreadStackSize”一般设置这个值就可以了")])]),v._v(" "),_("tr",[_("td",[v._v("-XX:NewRatio")]),v._v(" "),_("td",[v._v("年轻代(包括Eden和两个Survivor区)与年老代的比值(除去持久代)")]),v._v(" "),_("td"),v._v(" "),_("td",[v._v("-XX:NewRatio=4表示年轻代与年老代所占比值为1:4,年轻代占整个堆栈的1/5Xms=Xmx并且设置了Xmn的情况下，该参数不需要进行设置。")])]),v._v(" "),_("tr",[_("td",[v._v("-XX:SurvivorRatio")]),v._v(" "),_("td",[v._v("Eden区与Survivor区的大小比值")]),v._v(" "),_("td"),v._v(" "),_("td",[v._v("设置为8,则两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10")])]),v._v(" "),_("tr",[_("td",[v._v("-XX:+DisableExplicitGC")]),v._v(" "),_("td",[v._v("关闭System.gc()")]),v._v(" "),_("td"),v._v(" "),_("td",[v._v("这个参数需要严格的测试")])]),v._v(" "),_("tr",[_("td",[v._v("-XX:PretenureSizeThreshold")]),v._v(" "),_("td",[v._v("对象超过多大是直接在旧生代分配")]),v._v(" "),_("td",[v._v("0")]),v._v(" "),_("td",[v._v("单位字节 新生代采用Parallel ScavengeGC时无效另一种直接在旧生代分配的情况是大的数组对象,且数组中无外部引用对象.")])]),v._v(" "),_("tr",[_("td",[v._v("-XX:ParallelGCThreads")]),v._v(" "),_("td",[v._v("并行收集器的线程数")]),v._v(" "),_("td"),v._v(" "),_("td",[v._v("此值最好配置与处理器数目相等 同样适用于CMS")])]),v._v(" "),_("tr",[_("td",[v._v("-XX:MaxGCPauseMillis")]),v._v(" "),_("td",[v._v("每次年轻代垃圾回收的最长时间(最大暂停时间)")]),v._v(" "),_("td"),v._v(" "),_("td",[v._v("如果无法满足此时间,JVM会自动调整年轻代大小,以满足此值.")])])])]),v._v(" "),_("h4",{attrs:{id:"gc如何判断对象可以回收"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#gc如何判断对象可以回收"}},[v._v("#")]),v._v(" "),_("code",[v._v("GC")]),v._v("如何判断对象可以回收")]),v._v(" "),_("blockquote",[_("ol",[_("li",[_("p",[v._v("引用计数法")]),v._v(" "),_("p",[v._v("给对象添加一个引用计数器，每当有一个地方引用它，计数器就加1；引用失效，计数器就减1；这个方法实现简单，效率高，但是目前主流的虚拟机都没有选择这个算法来管理内存，主要原因就是它很难解决对象之间相互循环引用的问题。")])]),v._v(" "),_("li",[_("p",[v._v("可达性分析算法")]),v._v(" "),_("p",[v._v("基本思想就是通过一系列的“"),_("code",[v._v("GC Roots")]),v._v("”的对象作为起点，从这些节点开始向下搜索，节点所走过的路径称为引用链，当对象到"),_("code",[v._v("GC Roots")]),v._v("没有任何引用链时，则证明这个对象是不可用的，可以被回收。")]),v._v(" "),_("p",[v._v("可以作为"),_("code",[v._v("GC Roots")]),v._v("的对象")]),v._v(" "),_("ul",[_("li",[v._v("虚拟机栈（栈帧中的本地变量表）中引用的对象")]),v._v(" "),_("li",[v._v("本地方法栈中引用的对象")]),v._v(" "),_("li",[v._v("方法区中类静态属性引用的对象")]),v._v(" "),_("li",[v._v("方法区中常量引用的对象")]),v._v(" "),_("li",[v._v("所有被同步锁持有的对象")])])])])]),v._v(" "),_("h4",{attrs:{id:"垃圾回收算法有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收算法有哪些"}},[v._v("#")]),v._v(" 垃圾回收算法有哪些")]),v._v(" "),_("blockquote",[_("ol",[_("li",[_("p",[v._v("标记-清除算法")]),v._v(" "),_("p",[v._v("该算法分为"),_("strong",[v._v("标记")]),v._v("和"),_("strong",[v._v("清除")]),v._v("两个阶段：首先标记出所有不需要回收的对象，在标记后统一回收所有没有被标记的对象。这种算法有两个明显的问题：")]),v._v(" "),_("ul",[_("li",[v._v("效率问题")]),v._v(" "),_("li",[v._v("空间问题（标记清除后会产生大量不连续的碎片）")])])]),v._v(" "),_("li",[_("p",[v._v("标记-复制算法")]),v._v(" "),_("p",[v._v("该算法将内存分为大小相同的两块，每次使用其中一块，当一块内存使用完后，将存活的对象复制到另一快内存上去，然后把空间一次清除掉。")])]),v._v(" "),_("li",[_("p",[v._v("标记-整理算法")]),v._v(" "),_("p",[v._v("根据老年代的特点提出的一种标记算法，"),_("strong",[v._v("标记")]),v._v("存活对象后，让所有存活对象向一端移动，然后直接清除掉剩余内存空间")])])])]),v._v(" "),_("h4",{attrs:{id:"有哪些垃圾收集器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#有哪些垃圾收集器"}},[v._v("#")]),v._v(" 有哪些垃圾收集器")]),v._v(" "),_("blockquote",[_("ol",[_("li",[_("p",[_("code",[v._v("Serial")]),v._v("收集器")]),v._v(" "),_("p",[_("code",[v._v("Serial")]),v._v("（串行）收集器是最基本、历史最悠久的垃圾收集器了。大家看名字就知道这个收集器是一个单线程收集器了。它的 "),_("strong",[v._v("“单线程”")]),v._v(" 的意义不仅仅意味着它只会使用一条垃圾收集线程去完成垃圾收集工作，更重要的是它在进行垃圾收集工作的时候必须暂停其他所有的工作线程（ "),_("strong",[v._v('"Stop The World"')]),v._v(" ），直到它收集结束。")]),v._v(" "),_("p",[_("strong",[v._v("新生代采用标记-复制算法，老年代采用标记-整理算法。")])])]),v._v(" "),_("li",[_("p",[_("code",[v._v("ParNew")]),v._v("收集器")]),v._v(" "),_("p",[_("code",[v._v("ParNew")]),v._v(" 收集器其实就是 Serial 收集器的多线程版本，除了使用多线程进行垃圾收集外，其余行为（控制参数、收集算法、回收策略等等）和 Serial 收集器完全一样。")]),v._v(" "),_("p",[_("strong",[v._v("新生代采用标记-复制算法，老年代采用标记-整理算法。")])])]),v._v(" "),_("li",[_("p",[_("code",[v._v("Parallel Scavenge")]),v._v(" 收集器")]),v._v(" "),_("p",[_("code",[v._v("Parallel Scavenge")]),v._v(" 收集器也是使用标记-复制算法的多线程收集器，它看上去几乎和 "),_("code",[v._v("ParNew")]),v._v(" 都一样。"),_("strong",[v._v("Parallel Scavenge 收集器关注点是吞吐量（高效率的利用 CPU）。")])]),v._v(" "),_("p",[_("strong",[v._v("新生代采用标记-复制算法，老年代采用标记-整理算法。这是 JDK1.8 默认收集器")])])]),v._v(" "),_("li",[_("p",[_("code",[v._v("Serial Old")]),v._v(" 收集器")]),v._v(" "),_("p",[_("strong",[v._v("Serial 收集器的老年代版本")]),v._v("，它同样是一个单线程收集器。它主要有两大用途：一种用途是在 JDK1.5 以及以前的版本中与 Parallel Scavenge 收集器搭配使用，另一种用途是作为 CMS 收集器的后备方案。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("Parallel Old")]),v._v(" 收集器")]),v._v(" "),_("p",[_("strong",[v._v("Parallel Scavenge 收集器的老年代版本")]),v._v("。使用多线程和“标记-整理”算法。在注重吞吐量以及 CPU 资源的场合，都可以优先考虑 Parallel Scavenge 收集器和 Parallel Old 收集器。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("CMS")]),v._v(" 收集器")]),v._v(" "),_("p",[_("code",[v._v("CMS")]),v._v("（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。它非常符合在注重用户体验的应用上使用。"),_("code",[v._v("CMS")]),v._v("（Concurrent Mark Sweep）收集器是 "),_("code",[v._v("HotSpot")]),v._v(" 虚拟机第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程（基本上）同时工作。主要优点："),_("strong",[v._v("并发收集、低停顿")]),v._v("。但是它有下面三个明显的缺点：")]),v._v(" "),_("ul",[_("li",[v._v("对CPU资源敏感")]),v._v(" "),_("li",[v._v("无法处理浮动垃圾")]),v._v(" "),_("li",[v._v("使用"),_("strong",[v._v("标记-清除")]),v._v("算法会导致收集结束时会有大量空间碎片产生")])])]),v._v(" "),_("li",[_("p",[_("code",[v._v("G1")]),v._v("收集器")]),v._v(" "),_("p",[v._v("**"),_("code",[v._v("G1")]),v._v(" (Garbage-First) 是一款面向服务器的垃圾收集器,主要针对配备多颗处理器及大容量内存的机器. 以极高概率满足 "),_("code",[v._v("GC")]),v._v(" 停顿时间要求的同时,还具备高吞吐量性能特征.**它具备以下特点：")]),v._v(" "),_("ol",[_("li",[v._v("并行与并发："),_("code",[v._v("G1")]),v._v(" 能充分利用 CPU、多核环境下的硬件优势，使用多个 CPU（CPU 或者 CPU 核心）来缩短 Stop-The-World 停顿时间。部分其他收集器原本需要停顿 Java 线程执行的 "),_("code",[v._v("GC")]),v._v(" 动作，"),_("code",[v._v("G1")]),v._v(" 收集器仍然可以通过并发的方式让 "),_("code",[v._v("java")]),v._v(" 程序继续执行。")]),v._v(" "),_("li",[v._v("分代收集：虽然 G1 可以不需要其他收集器配合就能独立管理整个 GC 堆，但是还是保留了分代的概念。")]),v._v(" "),_("li",[v._v("空间整合：G1 从整体来看是基于“标记-整理”算法实现的收集器；从局部上来看是基于“标记-复制”算法实现的。")]),v._v(" "),_("li",[v._v("可预测的停顿：这是 "),_("code",[v._v("G1")]),v._v(" 相对于 "),_("code",[v._v("CMS")]),v._v(" 的另一个大优势，降低停顿时间是 "),_("code",[v._v("G1")]),v._v(" 和 "),_("code",[v._v("CMS")]),v._v(" 共同的关注点，但 "),_("code",[v._v("G1")]),v._v(" 除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为 M 毫秒的时间片段内。")])])])])]),v._v(" "),_("h3",{attrs:{id:"juc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#juc"}},[v._v("#")]),v._v(" JUC")]),v._v(" "),_("h4",{attrs:{id:"什么是线程和进程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是线程和进程"}},[v._v("#")]),v._v(" 什么是线程和进程")]),v._v(" "),_("blockquote",[_("p",[v._v("进程：程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序即是一个进程从创建，运行到消亡的过程。")]),v._v(" "),_("p",[v._v("线程：线程与进程相似，但线程是一个比进程更小的执行单位，一个进程在执行过程中可以产生多个线程。与进程不同的是多个线程共享进程的堆和方法区资源。但是每个线程有自己的程序计数机、虚拟机栈和本地方法栈，所以系统在产生一个线程，或是在各个线程之间切换工作，负担要比进程小得多，线程也被称为轻量级进程")]),v._v(" "),_("p",[_("strong",[v._v("线程是进程划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。线程执行开销小，但不利于资源的管理和保护；而进程正相反。")])])]),v._v(" "),_("h4",{attrs:{id:"什么是线程死锁-如何避免死锁"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是线程死锁-如何避免死锁"}},[v._v("#")]),v._v(" 什么是线程死锁，如何避免死锁")]),v._v(" "),_("blockquote",[_("p",[v._v("多个线程同时被阻塞，它们中的一个或者全部都在等待摸个资源被释放，由于线程被无限期地阻塞，因此程序不可能正常终止。")]),v._v(" "),_("p",[v._v("例如线程A持有资源1，线程B持有资源2，它们同时都想申请对方资源，所以两个线程就会互相等待进入死锁。")]),v._v(" "),_("p",[v._v("避免死锁：")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("破坏请求与保持条件")]),v._v(" ：一次性申请所有的资源。")]),v._v(" "),_("li",[_("strong",[v._v("破坏不剥夺条件")]),v._v(" ：占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源。")]),v._v(" "),_("li",[_("strong",[v._v("破坏循环等待条件")]),v._v(" ：靠按序申请资源来预防。按某一顺序申请资源，释放资源则反序释放。破坏循环等待条件。")])])]),v._v(" "),_("h4",{attrs:{id:"说说-sleep-方法和-wait-方法区别和共同点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#说说-sleep-方法和-wait-方法区别和共同点"}},[v._v("#")]),v._v(" 说说 sleep() 方法和 wait() 方法区别和共同点?")]),v._v(" "),_("blockquote",[_("ul",[_("li",[v._v("主要区别："),_("code",[v._v("sleep()")]),v._v("方法没有释放锁，而"),_("code",[v._v("wait()")]),v._v("方法释放了锁")]),v._v(" "),_("li",[v._v("两者都可以暂停线程的执行。")]),v._v(" "),_("li",[_("code",[v._v("wait()")]),v._v("通常被用于线程间交互/通信，"),_("code",[v._v("sleep()")]),v._v("通常被用于暂停执行。")]),v._v(" "),_("li",[_("code",[v._v("wait()")]),v._v("方法被调用后，线程不会自动苏醒，需要别的线程调用同一对象上的"),_("code",[v._v("notify()")]),v._v("或者"),_("code",[v._v("notifyAll()")]),v._v("方法。"),_("code",[v._v("sleep()")]),v._v("方法执行后，线程会自动苏醒。或者可以使用"),_("code",[v._v("wait(long timeout)")]),v._v("超时后线程会自动苏醒。")])])]),v._v(" "),_("h4",{attrs:{id:"说一说并发和并行的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#说一说并发和并行的区别"}},[v._v("#")]),v._v(" 说一说并发和并行的区别")]),v._v(" "),_("blockquote",[_("p",[v._v("并发：同一时间段，多个任务都在执行（单位时间内不一定同时执行）")]),v._v(" "),_("p",[v._v("并行：单位时间内，多个任务同时执行")])]),v._v(" "),_("h4",{attrs:{id:"怎么使用synchronized关键字"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#怎么使用synchronized关键字"}},[v._v("#")]),v._v(" 怎么使用synchronized关键字")]),v._v(" "),_("blockquote",[_("ol",[_("li",[v._v("修饰实例方法，作用于当前对象实例加锁。")]),v._v(" "),_("li",[v._v("修饰静态方法，当前类加锁，会作用于类的所有对象实例。")]),v._v(" "),_("li",[v._v("修饰代码块，指定加锁对象，对给定对象/类加锁")])])]),v._v(" "),_("h4",{attrs:{id:"谈谈你对volatile的理解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#谈谈你对volatile的理解"}},[v._v("#")]),v._v(" 谈谈你对volatile的理解")]),v._v(" "),_("blockquote",[_("p",[v._v("volatile是Java虚拟机提供的轻量级同步机制")]),v._v(" "),_("ol",[_("li",[v._v("保证可见性")]),v._v(" "),_("li",[v._v("不保证原子性")]),v._v(" "),_("li",[v._v("禁止指令重排")])])]),v._v(" "),_("h4",{attrs:{id:"说说threadlocal"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#说说threadlocal"}},[v._v("#")]),v._v(" 说说ThreadLocal")]),v._v(" "),_("blockquote",[_("p",[v._v("创建了一个"),_("code",[v._v("ThreadLocal")]),v._v("变量，那么访问这个变量的每个线程都会有这个变量的本地副本，这也是"),_("code",[v._v("ThreadLocal")]),v._v("变量名的由来。他们可以使用 "),_("code",[v._v("get（）")]),v._v(" 和 "),_("code",[v._v("set（）")]),v._v(" 方法来获取默认值或将其值更改为当前线程所存的副本的值，从而避免了线程安全问题。")])]),v._v(" "),_("h4",{attrs:{id:"谈谈你对cas的理解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#谈谈你对cas的理解"}},[v._v("#")]),v._v(" 谈谈你对"),_("code",[v._v("CAS")]),v._v("的理解")]),v._v(" "),_("blockquote",[_("p",[_("code",[v._v("CAS")]),v._v("就是"),_("code",[v._v("compareAndSet")]),v._v("，即比较并交换,是一种实现并发算法时常用到的技术。")]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ol",[_("li",[v._v("循环时间长开销大，我们可以看到"),_("code",[v._v("getAndAddInt")]),v._v("方法中有一个"),_("code",[v._v("dowhile")]),v._v("循环，如果"),_("code",[v._v("CAS")]),v._v("一直失败，会一直保持尝试。如果"),_("code",[v._v("CAS")]),v._v("长时间一直不成功，可能给"),_("code",[v._v("CPU")]),v._v("带来很大的开销。")]),v._v(" "),_("li",[v._v("只能保证一个共享变量的原子性。当对一个共享变量执行操作时，我们可以使用循环"),_("code",[v._v("CAS")]),v._v("的方式保证原子性操作，但是对多个共享变量的操作时，循环"),_("code",[v._v("CAS")]),v._v("就无法保证操作的原子性了，这个时候可以用锁来保证原子性。")]),v._v(" "),_("li",[v._v("会出现"),_("code",[v._v("ABA")]),v._v("问题，可以使用时间戳原子引用来解决这个问题。简单的说就是在修改数值的时候带上一个版本号。")])])]),v._v(" "),_("h4",{attrs:{id:"阻塞队列"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#阻塞队列"}},[v._v("#")]),v._v(" 阻塞队列")]),v._v(" "),_("ol",[_("li",[_("code",[v._v("ArrayBlockingQueue")]),v._v("：由数组结构组成的有界阻塞队列")]),v._v(" "),_("li",[_("code",[v._v("LinkedBlockingQueue")]),v._v("：由链表结构组成的有界阻塞队列，大小默认"),_("code",[v._v("Integer.MAX_VALUE")])]),v._v(" "),_("li",[_("code",[v._v("PriorityBlockingQueue")]),v._v("：支持优先级排序的无界队列")]),v._v(" "),_("li",[_("code",[v._v("DelayQueue")]),v._v("：使用优先级队列实现的延迟无界阻塞队列")]),v._v(" "),_("li",[_("code",[v._v("SynchronousQueue")]),v._v("：不存储元素的阻塞队列")]),v._v(" "),_("li",[_("code",[v._v("LinkedTransferQueue")]),v._v("：链表组成的无界阻塞队列")]),v._v(" "),_("li",[_("code",[v._v("LinkedBlockingDeque")]),v._v("：链表组成的双向阻塞队列")])]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("方法类型")]),v._v(" "),_("th",[v._v("抛出异常")]),v._v(" "),_("th",[v._v("特殊值")]),v._v(" "),_("th",[v._v("阻塞")]),v._v(" "),_("th",[v._v("超时")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("插入")]),v._v(" "),_("td",[v._v("add（e）")]),v._v(" "),_("td",[v._v("offer（e）")]),v._v(" "),_("td",[v._v("put（e）")]),v._v(" "),_("td",[v._v("offer（e，time，unit）")])]),v._v(" "),_("tr",[_("td",[v._v("移除")]),v._v(" "),_("td",[v._v("remove()")]),v._v(" "),_("td",[v._v("poll()")]),v._v(" "),_("td",[v._v("take（）")]),v._v(" "),_("td",[v._v("poll（time，unit）")])]),v._v(" "),_("tr",[_("td",[v._v("检查")]),v._v(" "),_("td",[v._v("element()")]),v._v(" "),_("td",[v._v("peek()")]),v._v(" "),_("td"),v._v(" "),_("td")])])]),v._v(" "),_("h4",{attrs:{id:"synchronized和lock有什么区别-用新的lock有什么好处-举例说说"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#synchronized和lock有什么区别-用新的lock有什么好处-举例说说"}},[v._v("#")]),v._v(" synchronized和Lock有什么区别？用新的Lock有什么好处？举例说说")]),v._v(" "),_("ul",[_("li",[v._v("原始构成\n"),_("ol",[_("li",[v._v("synchronized属于JVM层面，底层通过monitor对象来完成，wait/notify等方法也依赖与monitor对象只能在同步代码块或方法中才能调用")]),v._v(" "),_("li",[v._v("Lock是具体类，是"),_("code",[v._v("API")]),v._v("层面的锁")])])]),v._v(" "),_("li",[v._v("使用方法\n"),_("ol",[_("li",[v._v("synchronized不需要手动释放锁")]),v._v(" "),_("li",[v._v("ReentrantLock需要手动释放锁，否则可能会造成死锁现象")])])]),v._v(" "),_("li",[v._v("等待是否可中断\n"),_("ol",[_("li",[v._v("synchronized不可中断，除非抛异常或者正常执行完")]),v._v(" "),_("li",[v._v("ReentrantLock可中断\n"),_("ol",[_("li",[v._v("设置超时方法tryLock（long timeout，TimeUnit unit）")]),v._v(" "),_("li",[v._v("lockInterruptibly()放入代码块中，调用interrupt()方法中断")])])])])]),v._v(" "),_("li",[v._v("是否公平\n"),_("ol",[_("li",[v._v("synchronized非公平")]),v._v(" "),_("li",[v._v("ReentrantLock都可以实现")])])]),v._v(" "),_("li",[v._v("锁绑定多个条件Condition\n"),_("ol",[_("li",[v._v("synchronized没有")]),v._v(" "),_("li",[v._v("ReentrantLock可以实现分组唤醒线程，精确唤醒")])])])]),v._v(" "),_("h4",{attrs:{id:"线程池用过吗-threadpoolexecutor谈谈你的理解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#线程池用过吗-threadpoolexecutor谈谈你的理解"}},[v._v("#")]),v._v(" 线程池用过吗？ThreadPoolExecutor谈谈你的理解？")]),v._v(" "),_("p",[v._v("线程池主要工作是控制运行的线程数量，实现线程复用。")]),v._v(" "),_("ul",[_("li",[v._v("降低资源消耗。通过复用线程降低线程创建和销毁造成资源消耗")]),v._v(" "),_("li",[v._v("提高响应速度。任务到达时，立即执行")]),v._v(" "),_("li",[v._v("提高线程的可管理性。线程是稀缺资源，不能无限制创建，使用线程池可以进行统一分配，监控调优")])]),v._v(" "),_("p",[v._v("线程池的7大参数")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("corePoolSize")]),v._v("：核心线程数")]),v._v(" "),_("li",[_("code",[v._v("maximumPoolSize")]),v._v("：最大线程数")]),v._v(" "),_("li",[_("code",[v._v("keepAliveTime")]),v._v("：多余线程存活时间")]),v._v(" "),_("li",[_("code",[v._v("timeUnit")]),v._v("：时间单位")]),v._v(" "),_("li",[_("code",[v._v("workQueue")]),v._v("：阻塞队列")]),v._v(" "),_("li",[_("code",[v._v("threadFactory")]),v._v("：线程工厂")]),v._v(" "),_("li",[_("code",[v._v("rejectedHandler")]),v._v("：拒绝策略")])]),v._v(" "),_("h4",{attrs:{id:"线程池中execute和submit的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#线程池中execute和submit的区别"}},[v._v("#")]),v._v(" 线程池中execute和submit的区别")]),v._v(" "),_("blockquote",[_("ol",[_("li",[v._v("execute只能接受Runnable类型的任务，submit不管是Runnable还是Callable类型的任务都可以接受，但是Runnable返回值均为void，所以使用Future的get()获得的还是null")]),v._v(" "),_("li",[v._v("submit()有返回值，而execute()没有")]),v._v(" "),_("li",[v._v("submit()可以进行Exception处理")])])]),v._v(" "),_("h3",{attrs:{id:"spring"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring"}},[v._v("#")]),v._v(" Spring")]),v._v(" "),_("h4",{attrs:{id:"说说你对spring的理解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#说说你对spring的理解"}},[v._v("#")]),v._v(" 说说你对Spring的理解")]),v._v(" "),_("blockquote",[_("p",[v._v("Spring 是一款开源的轻量级 Java 开发框架，旨在提高开发人员的开发效率以及系统的可维护性。它是很多模块的集合，使用这些模块可以很方便地协助我们进行开发。比如说 Spring 自带 IoC（Inverse of Control:控制反转） 和 AOP(Aspect-Oriented Programming:面向切面编程)、可以很方便地对数据库进行访问、可以很方便地集成第三方组件（电子邮件，任务，调度，缓存等等）、对单元测试支持比较好、支持 RESTful Java 应用程序的开发。")])]),v._v(" "),_("h4",{attrs:{id:"说说你对aop的理解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#说说你对aop的理解"}},[v._v("#")]),v._v(" 说说你对"),_("code",[v._v("AOP")]),v._v("的理解")]),v._v(" "),_("blockquote",[_("p",[v._v("AOP(Aspect-Oriented Programming:面向切面编程)能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。")])]),v._v(" "),_("h4",{attrs:{id:"说说你对ioc的理解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#说说你对ioc的理解"}},[v._v("#")]),v._v(" 说说你对"),_("code",[v._v("IOC")]),v._v("的理解")]),v._v(" "),_("blockquote",[_("p",[_("strong",[v._v("IoC（Inverse of Control:控制反转）")]),v._v(" 是一种设计思想，而不是一个具体的技术实现。IoC 的思想就是将原本在程序中手动创建对象的控制权，交由 Spring 框架来管理。不过， IoC 并非 Spirng 特有，在其他语言中也有应用。")])]),v._v(" "),_("h4",{attrs:{id:"简述spring-bean的生命周期"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#简述spring-bean的生命周期"}},[v._v("#")]),v._v(" 简述Spring Bean的生命周期")]),v._v(" "),_("blockquote",[_("ol",[_("li",[v._v("Spring启动，查找并加载需要被Spring管理的bean，进行Bean的实例化")]),v._v(" "),_("li",[v._v("Bean实例化后对将Bean的引入和值注入到Bean的属性中")]),v._v(" "),_("li",[v._v("如果Bean实现了"),_("code",[v._v("BeanNameAware")]),v._v("接口的话，Spring将Bean的Id传递给"),_("code",[v._v("setBeanName()")]),v._v("方法")]),v._v(" "),_("li",[v._v("如果Bean实现了"),_("code",[v._v("BeanFactoryAware")]),v._v("接口的话，Spring将调用"),_("code",[v._v("setBeanFactory()")]),v._v("方法，将"),_("code",[v._v("BeanFactory")]),v._v("容器实例传入")]),v._v(" "),_("li",[v._v("如果Bean实现了"),_("code",[v._v("ApplicationContextAware")]),v._v("接口的话，Spring将调用Bean的"),_("code",[v._v("setApplicationContext()")]),v._v("方法，将bean所在应用上下文引用传入进来。")]),v._v(" "),_("li",[v._v("如果Bean实现了"),_("code",[v._v("BeanPostProcessor")]),v._v("接口，Spring就将调用他们的"),_("code",[v._v("postProcessBeforeInitialization()")]),v._v("方法。")]),v._v(" "),_("li",[v._v("如果Bean 实现了"),_("code",[v._v("InitializingBean")]),v._v("接口，Spring将调用他们的"),_("code",[v._v("afterPropertiesSet()")]),v._v("方法。类似的，如果bean使用"),_("code",[v._v("init-method")]),v._v("声明了初始化方法，该方法也会被调用")]),v._v(" "),_("li",[v._v("如果Bean 实现了"),_("code",[v._v("BeanPostProcessor")]),v._v("接口，Spring就将调用他们的"),_("code",[v._v("postProcessAfterInitialization()")]),v._v("方法。")]),v._v(" "),_("li",[v._v("此时，Bean已经准备就绪，可以被应用程序使用了。他们将一直驻留在应用上下文中，直到应用上下文被销毁。")]),v._v(" "),_("li",[v._v("如果bean实现了"),_("code",[v._v("DisposableBean")]),v._v("接口，Spring将调用它的"),_("code",[v._v("destory()")]),v._v("接口方法，同样，如果bean使用了"),_("code",[v._v("destory-method")]),v._v("声明销毁方法，该方法也会被调用。")])])]),v._v(" "),_("h4",{attrs:{id:"spring中单例bean是否线程安全"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring中单例bean是否线程安全"}},[v._v("#")]),v._v(" Spring中单例bean是否线程安全")]),v._v(" "),_("blockquote",[_("p",[v._v("有状态的bean：对象中有实例变量（成员变量），可以保存数据，是非线程安全的")]),v._v(" "),_("p",[v._v("无状态的bean：对象中没有实例变量（成员变量），不能保存数据，可以在多线程环境下共享，是线程安全的")]),v._v(" "),_("p",[v._v("在"),_("code",[v._v("spring")]),v._v("中，绝大部分bean都是无状态的，因此即使这些bean默认是单例的，也不会出现线程安全问题的。比如"),_("code",[v._v("controller")]),v._v("、"),_("code",[v._v("service")]),v._v("、"),_("code",[v._v("dao")]),v._v("这些类，这些类里面通常不会含有成员变量，因此它们被设计成单例的。如果这些类中定义了实例变量，就线程不安全了，所以尽量避免定义实例变量。")]),v._v(" "),_("p",[v._v("对于"),_("code",[v._v("spring")]),v._v("中有状态的bean，比如"),_("code",[v._v("RequestContextHolder")]),v._v("、"),_("code",[v._v("TransactionSynchronizationManager")]),v._v("、"),_("code",[v._v("LocaleContextHolder")]),v._v("，为什么也能够设计成单例的呢？它是怎么保证线程安全的？")]),v._v(" "),_("p",[v._v("对于有状态的bean，"),_("code",[v._v("spring")]),v._v("采用"),_("code",[v._v("ThreadLocal")]),v._v("进行处理，使它们成为线程安全可以共享的对象")])]),v._v(" "),_("h4",{attrs:{id:"beanfactory和applicationcontext的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#beanfactory和applicationcontext的区别"}},[v._v("#")]),v._v(" "),_("code",[v._v("BeanFactory")]),v._v("和"),_("code",[v._v("ApplicationContext")]),v._v("的区别")]),v._v(" "),_("blockquote",[_("p",[_("code",[v._v("BeanFactory")]),v._v("：是"),_("code",[v._v("Spring")]),v._v("里面最低层的接口，提供了最简单的容器的功能，只提供了实例化对象和拿对象的功能，"),_("code",[v._v("BeanFactory")]),v._v("启动时不会去实例化Bean，从容器中拿Bean的时候才会去实例化")]),v._v(" "),_("p",[_("code",[v._v("ApplicationContext")]),v._v("：应用上下文，继承了"),_("code",[v._v("BeanFactory")]),v._v("接口，是"),_("code",[v._v("Spring")]),v._v("中的一个更高级的容器，启动时实例化所有"),_("code",[v._v("Bean")]),v._v("，可以配置延迟加载来延迟实例化，提供了更多的功能")]),v._v(" "),_("p",[v._v("国际化、资源访问、载入多个（有继承关系）上下文 ，使得每一个上下文都专注于一个特定的层次，比如应用的web层、消息发送、响应机制（"),_("code",[v._v("ApplicationEventPublisher")]),v._v("）、"),_("code",[v._v("AOP")]),v._v("（拦截器）")])]),v._v(" "),_("h4",{attrs:{id:"说说你对spring-mvc的理解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#说说你对spring-mvc的理解"}},[v._v("#")]),v._v(" 说说你对Spring MVC的理解")]),v._v(" "),_("blockquote",[_("p",[v._v("MVC 是模型(Model)、视图(View)、控制器(Controller)的简写，其核心思想是通过将业务逻辑、数据、显示分离来组织代码。Spring MVC是对这种种思想的一个封装。")])]),v._v(" "),_("h4",{attrs:{id:"springmvc的工作流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#springmvc的工作流程"}},[v._v("#")]),v._v(" SpringMVC的工作流程")]),v._v(" "),_("blockquote",[_("ol",[_("li",[v._v("用户发送请求至前端控制器"),_("code",[v._v("DispatcherServlet")])]),v._v(" "),_("li",[_("code",[v._v("DispatcherServlet")]),v._v("收到请求调用处理器映射器"),_("code",[v._v("HandlerMapping")]),v._v("。")]),v._v(" "),_("li",[v._v("处理器映射器根据请求"),_("code",[v._v("url")]),v._v("找到具体的处理器，生成处理器执行链"),_("code",[v._v("HandlerExecutionChain")]),v._v("(包括处理器对象和处理器拦截器)一并返回给"),_("code",[v._v("DispatcherServlet")]),v._v("。")]),v._v(" "),_("li",[_("code",[v._v("DispatcherServlet")]),v._v("根据处理器"),_("code",[v._v("Handler")]),v._v("获取处理器适配器"),_("code",[v._v("HandlerAdapter")]),v._v("执行"),_("code",[v._v("HandlerAdapter")]),v._v("处理一系列的操作，如：参数封装，数据格式转换，数据验证等操作")]),v._v(" "),_("li",[v._v("执行处理器"),_("code",[v._v("Handler")]),v._v("("),_("code",[v._v("Controller")]),v._v("，也叫页面控制器)。")]),v._v(" "),_("li",[_("code",[v._v("Handler")]),v._v("执行完成返回"),_("code",[v._v("ModelAndView")])]),v._v(" "),_("li",[_("code",[v._v("HandlerAdapter")]),v._v("将"),_("code",[v._v("Handler")]),v._v("执行结果"),_("code",[v._v("ModelAndView")]),v._v("返回到"),_("code",[v._v("DispatcherServlet")])]),v._v(" "),_("li",[_("code",[v._v("DispatcherServlet")]),v._v("将"),_("code",[v._v("ModelAndView")]),v._v("传给"),_("code",[v._v("ViewReslover")]),v._v("视图解析器")]),v._v(" "),_("li",[_("code",[v._v("ViewReslover")]),v._v("解析后返回具体"),_("code",[v._v("View")])]),v._v(" "),_("li",[_("code",[v._v("DispatcherServlet")]),v._v("对"),_("code",[v._v("View")]),v._v("进行渲染视图（即将模型数据"),_("code",[v._v("model")]),v._v("填充至视图中）。")]),v._v(" "),_("li",[_("code",[v._v("DispatcherServlet")]),v._v("响应用户。")])])]),v._v(" "),_("h4",{attrs:{id:"springmvc九大内置组件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#springmvc九大内置组件"}},[v._v("#")]),v._v(" "),_("code",[v._v("SpringMVC")]),v._v("九大内置组件")]),v._v(" "),_("blockquote",[_("ol",[_("li",[_("p",[_("code",[v._v("HandlerMapping(")]),v._v("处理器映射器)")]),v._v(" "),_("p",[v._v("寻找Handler(注解/配置文件/接口)")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("HandlerAdapter")]),v._v("(处理器适配器)")]),v._v(" "),_("p",[v._v("处理找到的"),_("code",[v._v("Handler")]),v._v(",因为"),_("code",[v._v("Handler")]),v._v("的实现多种多样,所以对于"),_("code",[v._v("Handler")]),v._v("不同的内部结构需要进行一定的处理容器在初始化的时候会自动帮我们注入 (也可以自己配置)"),_("code",[v._v("RequestMappingHandlerAdapter")]),v._v(" "),_("code",[v._v("HttpRequestHandlerAdapter")]),v._v(" 和"),_("code",[v._v("SimpleControllerHandlerAdapter")]),v._v("这三个配置器。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("HandlerExceptionResolver")]),v._v("(异常处理器)")]),v._v(" "),_("p",[v._v("当我们在寻找和处理Handler时难免会出现一些问题(异常),这个时候就需要一个专门来处理异常的角色")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("ViewResolver")]),v._v("(视图解析器)")]),v._v(" "),_("p",[v._v("用来渲染页面的,而"),_("code",[v._v("ViewResolver")]),v._v("所要做的就是找到渲染所用的模板和技术(页面类型)")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("RequestToViewNameTranslator")]),v._v("(视图名称翻译器)")]),v._v(" "),_("p",[v._v("当没有"),_("code",[v._v("ViewName")]),v._v("时,从请求中解析获取视图名")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("LocaleResolver")]),v._v("(当前环境处理器)")]),v._v(" "),_("p",[v._v("协助view的解析")]),v._v(" "),_("ul",[_("li",[v._v("一是ViewResolver视图解析的时候；")]),v._v(" "),_("li",[v._v("二是用到国际化资源或者主题的时候。")])])]),v._v(" "),_("li",[_("p",[_("code",[v._v("ThemeResolver")]),v._v("(主题处理器)")]),v._v(" "),_("p",[v._v("主题处理器用于解析主题,相当于解析系统的整体样式和风格.")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("MultipartResolver")]),v._v("(文件处理器)")]),v._v(" "),_("p",[v._v("用于处理上传请求。处理方法是将普通的"),_("code",[v._v("request")]),v._v("包装成"),_("code",[v._v("MultipartHttpServletRequest")]),v._v("，后者可以直接调用"),_("code",[v._v("getFile")]),v._v("方法获取File，如果上传多个文件，还可以调用"),_("code",[v._v("getFileMap")]),v._v("得到"),_("code",[v._v("FileName->File")]),v._v("结构的"),_("code",[v._v("Map")]),v._v("。此组件中一共有三个方法，作用分别是判断是不是上传请求，将"),_("code",[v._v("equest")]),v._v("包装成"),_("code",[v._v("MultipartHttpServletRequest")]),v._v("、处理完后清理上传过程中产生的临时资源。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("FlashMapManager")]),v._v("(参数传递管理器)")]),v._v(" "),_("p",[v._v("请求重定向是的参数管理")])])])]),v._v(" "),_("h4",{attrs:{id:"spring、springmvc、sprinboot区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring、springmvc、sprinboot区别"}},[v._v("#")]),v._v(" Spring、SpringMVC、SprinBoot区别")]),v._v(" "),_("blockquote",[_("ul",[_("li",[v._v("Spring是一个一站式的轻量级java开发框架，核心是控制反转（IOC）和面向切面（AOP），Spring 是可以在 Java SE/EE 中使用的轻量级开源框架。")]),v._v(" "),_("li",[v._v("SpringBootspringboot是Spring开源框架下的子项目，是Spring的一站式解决方案，简化了spring的使用难度，遵循“约定优于配置”的原则，降低了对配置文件的要求，使得开发人员能够更容易得上手。")]),v._v(" "),_("li",[v._v("SpringMVC属于SpringFrameWork的后续产品，已经融合在Spring Web Flow里面。SpringMVC是一种web层mvc框架，用于替代servlet（处理|响应请求，获取表单参数，表单校验等。SpringMVC是一个MVC的开源框架，SpringMVC=struts2+spring，springMVC就相当于是Struts2加上Spring的整合。")])])]),v._v(" "),_("h4",{attrs:{id:"springboot自动装配原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#springboot自动装配原理"}},[v._v("#")]),v._v(" "),_("code",[v._v("SpringBoot")]),v._v("自动装配原理")]),v._v(" "),_("p",[_("code",[v._v("SpringBoot")]),v._v("所有自动配置类都是在启动的时候进行扫描并加载，通过"),_("code",[v._v("spring.factories")]),v._v("可以找到自动配置类的路径，但是不是所有存在于"),_("code",[v._v("spring,factories")]),v._v("中的配置都进行加载，而是通过"),_("code",[v._v("@ConditionalOnClass")]),v._v("注解进行判断条件是否成立（只要导入相应的stater，条件就能成立），如果条件成立则加载配置类，否则不加载该配置类。")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("SpringBoot")]),v._v("在启动的时候从类路径下的"),_("code",[v._v("META-INF/spring.factories")]),v._v("中获取"),_("code",[v._v("EnableAutoConfiguration")]),v._v("指定的值")]),v._v(" "),_("li",[v._v("将这些值作为自动配置类导入容器 ， 自动配置类就生效 ， 帮我们进行自动配置工作；")]),v._v(" "),_("li",[v._v("以前我们需要自己配置的东西 ， 自动配置类都帮我们解决了")]),v._v(" "),_("li",[v._v("整个"),_("code",[v._v("J2EE")]),v._v("的整体解决方案和自动配置都在"),_("code",[v._v("springboot-autoconfigure")]),v._v("的jar包中；")]),v._v(" "),_("li",[v._v("它将所有需要导入的组件以全类名的方式返回 ， 这些组件就会被添加到容器中 ；")]),v._v(" "),_("li",[v._v("它会给容器中导入非常多的自动配置类 "),_("code",[v._v("xxxAutoConfiguration")]),v._v(", 就是给容器中导入这个场景需要的所有组件 ，并配置好这些组件 ；")]),v._v(" "),_("li",[v._v("有了自动配置类 ， 免去了我们手动编写配置注入功能组件等的工作；")])]),v._v(" "),_("h4",{attrs:{id:"spring的核心"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring的核心"}},[v._v("#")]),v._v(" "),_("code",[v._v("Spring")]),v._v("的核心")]),v._v(" "),_("p",[_("code",[v._v("IOC(Inverse of Control 控制反转)")]),v._v("：传统的"),_("code",[v._v("java")]),v._v("开发模式中，当需要一个对象时我们，我们会自己使用"),_("code",[v._v("new")]),v._v("或者"),_("code",[v._v("getInstance")]),v._v("等直接或者间接调用构造方法创建一个对象，而在Spring开发模式中，Spring容器使用了工厂模式为我们创建了所需要的对象，我们使用时不需要自己去创建，直接调用Spring为我们提供的对象即可，这就是控制反转的思想。实例化一个"),_("code",[v._v("java")]),v._v("对象有三种方式：使用类构造器，使用静态工厂方法，使用实例工厂方法，当使用spring时我们就不需要关心通过何种方式实例化一个对象，spring通过控制反转机制自动为我们实例化一个对象。")]),v._v(" "),_("p",[_("code",[v._v("AOP(Aspect Oriented Programming 面向切面编程)")]),v._v("：在面向对象编程(OOP)思想中，我们将事物纵向抽象成一个个的对象。而在面向切面编程中，我们将一个个对象某些类似的方面横向抽象成一个切面，对这个切面进行一些如权限验证，事物管理，记录日志等公用操作处理的过程就是面向切面编程的思想。")]),v._v(" "),_("h4",{attrs:{id:"spring的事务传播机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring的事务传播机制"}},[v._v("#")]),v._v(" Spring的事务传播机制")]),v._v(" "),_("p",[v._v("一个事务方法运行在一个开启了事务的方法中时，当前方法是使用原来的事务还是开启一个新事务。")]),v._v(" "),_("p",[v._v("Spring支持7种传播属性")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("Propagation.REQUIRED（required）")]),v._v("：支持当前事务，如果当前有事务， 那么加入事务， 如果当前没有事务则新建一个(默认情况)")]),v._v(" "),_("li",[_("code",[v._v("Propagation.NOT_SUPPORTED（not_supported)")]),v._v("： 以非事务方式执行操作，如果当前存在事务就把当前事务挂起，执行完后恢复事务（忽略当前事务）；")]),v._v(" "),_("li",[_("code",[v._v("Propagation.SUPPORTS (supports)")]),v._v("：如果当前有事务则加入，如果没有则不用事务。")]),v._v(" "),_("li",[_("code",[v._v("Propagation.MANDATORY (mandatory)")]),v._v("：支持当前事务，如果当前没有事务，则抛出异常。（当前必须有事务）")]),v._v(" "),_("li",[_("code",[v._v("PROPAGATION_NEVER (never)")]),v._v(" ：以非事务方式执行，如果当前存在事务，则抛出异常。（当前必须不能有事务）")]),v._v(" "),_("li",[_("code",[v._v("Propagation.REQUIRES_NEW (requires_new)")]),v._v("：支持当前事务，如果当前有事务，则挂起当前事务，然后新创建一个事务，如果当前没有事务，则自己创建一个事务。")]),v._v(" "),_("li",[_("code",[v._v("Propagation.NESTED (nested 嵌套事务)")]),v._v(" ：如果当前存在事务，则嵌套在当前事务中。如果当前没有事务，则新建一个事务自己执行（和required一样）。嵌套的事务使用保存点作为回滚点，当内部事务回滚时不会影响外部事物的提交；但是外部回滚会把内部事务一起回滚回去。（这个和新建一个事务的区别）")])]),v._v(" "),_("h4",{attrs:{id:"spring中使用了哪些设计模式及应用场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring中使用了哪些设计模式及应用场景"}},[v._v("#")]),v._v(" Spring中使用了哪些设计模式及应用场景")]),v._v(" "),_("ul",[_("li",[v._v("工厂方法：实现"),_("code",[v._v("FactoryBean")]),v._v("接口")]),v._v(" "),_("li",[v._v("单例模式："),_("code",[v._v("Spring")]),v._v("依赖注入Bean实例默认单例")]),v._v(" "),_("li",[v._v("适配器模式："),_("code",[v._v("SpringMVC")]),v._v("中的适配器"),_("code",[v._v("HandlerAdatper")])]),v._v(" "),_("li",[v._v("装饰器模式："),_("code",[v._v("Spring")]),v._v("中用到的包装器模式在类名上有两种表现：一种是类名中含有Wrapper，另一种是类名中含有Decorator。")]),v._v(" "),_("li",[v._v("代理模式："),_("code",[v._v("AOP")]),v._v("底层，使用动态代理实现")]),v._v(" "),_("li",[v._v("观察者模式：spring的事件驱动模型使用的是观察者模式，Spring中Observer模式常用的地方是listener的实现。")]),v._v(" "),_("li",[v._v("模版方法：父类定义了骨架（调用哪些方法及顺序），某些特定方法由子类实现")])]),v._v(" "),_("h4",{attrs:{id:"spring事务的隔离级别有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring事务的隔离级别有哪些"}},[v._v("#")]),v._v(" Spring事务的隔离级别有哪些")]),v._v(" "),_("ol",[_("li",[_("p",[_("code",[v._v("DEFAULT")]),v._v(" （默认）")]),v._v(" "),_("p",[v._v("这是一个"),_("code",[v._v("PlatfromTransactionManager")]),v._v("默认的隔离级别，使用数据库默认的事务隔离级别。另外四个与"),_("code",[v._v("JDBC")]),v._v("的隔离级别相对。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("READ_UNCOMMITTED")]),v._v("（读未提交）")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("READ_COMMITTED")]),v._v("（读已提交）")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("REPEATABLE_READ")]),v._v("（可重复读）")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("SERIALIZABLE")]),v._v("（串行化）")])])]),v._v(" "),_("h4",{attrs:{id:"spring事务的实现原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring事务的实现原理"}},[v._v("#")]),v._v(" Spring事务的实现原理")]),v._v(" "),_("blockquote",[_("p",[v._v("Spring事务的本质其实就是数据库对事务的支持，没有数据库的事务支持，Spring是无法提供事务功能的。")]),v._v(" "),_("p",[v._v("我们经常使用的JPA、mybatis等数据库访问技术都有事务的处理机制，他们提供了用来开启事务，提交事务，回滚事务登相关API。Spring中提供了一个叫做PlatformTransactionManager接口，不同的数据库访问技术都会对改接口进行实现。")]),v._v(" "),_("p",[v._v("Spring的使用声明式事务是通过AOP实现的，编程式事务通过TransactionManager。")])]),v._v(" "),_("h4",{attrs:{id:"spring事务什么时候会失效"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring事务什么时候会失效"}},[v._v("#")]),v._v(" Spring事务什么时候会失效")]),v._v(" "),_("ol",[_("li",[v._v("spring的事务注解@Transactional只能放在public修饰的方法上才起作用，如果放在其他非public（private，protected）方法上，虽然不报错，但是事务不起作用")]),v._v(" "),_("li",[v._v("如使用mysql且引擎是MyISAM，则事务会不起作用，原因是MyISAM不支持事务，可以改成InnoDB引擎")]),v._v(" "),_("li",[v._v("在业务代码中如果抛出RuntimeException异常，事务回滚；但是抛出Exception，事务不回滚")]),v._v(" "),_("li",[v._v("代码中进行了异常捕获，没有抛出异常，事务也不会回滚。")]),v._v(" "),_("li",[v._v("非事务方法调用本类的注解事务方法，事务会失效，因为同一个类中，方法互相调用，切面无效，注解事务是通过AOP实现的。")])]),v._v(" "),_("h4",{attrs:{id:"spring是如何简化开发的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring是如何简化开发的"}},[v._v("#")]),v._v(" Spring是如何简化开发的")]),v._v(" "),_("ol",[_("li",[v._v("基于POJO的轻量级和最小侵入性编程；")]),v._v(" "),_("li",[v._v("通过依赖注入（DI）和面向接口实现松耦合；")]),v._v(" "),_("li",[v._v("基于切面和惯例进行切面式编程；")]),v._v(" "),_("li",[v._v("通过切面和模板减少样本式代码；")])]),v._v(" "),_("h4",{attrs:{id:"spring支持的bean作用域有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring支持的bean作用域有哪些"}},[v._v("#")]),v._v(" Spring支持的bean作用域有哪些")]),v._v(" "),_("ol",[_("li",[_("code",[v._v("singleton")]),v._v("作用域")]),v._v(" "),_("li",[_("code",[v._v("prototype")]),v._v("作用域")]),v._v(" "),_("li",[_("code",[v._v("request")]),v._v("作用域")]),v._v(" "),_("li",[_("code",[v._v("session")]),v._v("作用域")]),v._v(" "),_("li",[_("code",[v._v("global session")]),v._v("作用域")])]),v._v(" "),_("h4",{attrs:{id:"如何理解spring的starter"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何理解spring的starter"}},[v._v("#")]),v._v(" 如何理解Spring的starter")]),v._v(" "),_("h4",{attrs:{id:"如何实现一个ioc容器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何实现一个ioc容器"}},[v._v("#")]),v._v(" 如何实现一个"),_("code",[v._v("IOC")]),v._v("容器")]),v._v(" "),_("ol",[_("li",[v._v("配置配置文件，定义bean信息")]),v._v(" "),_("li",[v._v("加载配置文件，将读取到的bean信息封装"),_("code",[v._v("BeanDefination")])]),v._v(" "),_("li",[v._v("根据"),_("code",[v._v("BeanDefination")]),v._v("反射生成Bean")]),v._v(" "),_("li",[v._v("对Bean进行依赖注入")])]),v._v(" "),_("h4",{attrs:{id:"什么是自动装配-它有哪些方式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是自动装配-它有哪些方式"}},[v._v("#")]),v._v(" 什么是自动装配，它有哪些方式")]),v._v(" "),_("p",[v._v("Spring可以通过"),_("code",[v._v("@AutoWired")]),v._v("或者"),_("code",[v._v("xml")]),v._v("方式自动注入我们需要的依赖")]),v._v(" "),_("h4",{attrs:{id:"使用spring的优势"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#使用spring的优势"}},[v._v("#")]),v._v(" 使用Spring的优势")]),v._v(" "),_("ol",[_("li",[v._v("通过"),_("code",[v._v("IOC")]),v._v("容器和依赖注入，大大降低了代码的耦合和侵入性")]),v._v(" "),_("li",[v._v("支持"),_("code",[v._v("AOP")]),v._v("编程")]),v._v(" "),_("li",[v._v("支持声明式事务")]),v._v(" "),_("li",[v._v("方便集成各种优秀框架")]),v._v(" "),_("li",[v._v("对"),_("code",[v._v("Java EE")]),v._v("开发中的一些"),_("code",[v._v("API")]),v._v("提供了封装，降低了应用难度")]),v._v(" "),_("li",[v._v("非侵入式减少应用程序对框架的依赖")])]),v._v(" "),_("h4",{attrs:{id:"springcloud的核心组件有哪些-分别有什么作用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#springcloud的核心组件有哪些-分别有什么作用"}},[v._v("#")]),v._v(" SpringCloud的核心组件有哪些，分别有什么作用")]),v._v(" "),_("ol",[_("li",[v._v("Eureka：服务的注册与发现")]),v._v(" "),_("li",[v._v("Feign：基于动态代理和HTTP的远程调用")]),v._v(" "),_("li",[v._v("Ribbon：实现负载均衡")]),v._v(" "),_("li",[v._v("Hystrix：服务降级、熔断")]),v._v(" "),_("li",[v._v("gateway：网关路由，提供路由、鉴权、监控、限流、缓存等功能")])]),v._v(" "),_("h4",{attrs:{id:"微服务架构的原理是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#微服务架构的原理是什么"}},[v._v("#")]),v._v(" 微服务架构的原理是什么")]),v._v(" "),_("p",[_("strong",[v._v("概念：")]),v._v(" 把一个大型的单个应用程序和服务拆分为数个甚至数十个的支持微服务，它可扩展单个组件而不是整个的应用程序堆栈，从而满足服务等级协议。")]),v._v(" "),_("p",[_("strong",[v._v("定义：")]),v._v(" 围绕业务领域组件来创建应用，这些应用可独立地进行开发、管理和迭代。在分散的组件中使用云架构和平台式部署、管理和服务功能，使产品交付变得更加简单。")]),v._v(" "),_("p",[_("strong",[v._v("本质：")]),v._v(" 用一些功能比较明确、业务比较精练的服务去解决更大、更实际的问题。")]),v._v(" "),_("h4",{attrs:{id:"注册中心的原理是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#注册中心的原理是什么"}},[v._v("#")]),v._v(" 注册中心的原理是什么")]),v._v(" "),_("ol",[_("li",[v._v("各个微服务启动时，将自己的网络地址，服务名称等信息注册到注册中心，注册中心存储这些数据")]),v._v(" "),_("li",[v._v("服务消费者从注册中心查询服务提供者的地址，并通过获取的地址调用服务")]),v._v(" "),_("li",[v._v("各个微服务与注册中心通过一定的机制（例如心跳）通信，如果注册中心与某个微服务长时间无法通信，就会下线该实例")])]),v._v(" "),_("h4",{attrs:{id:"配置中心是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#配置中心是什么"}},[v._v("#")]),v._v(" 配置中心是什么")]),v._v(" "),_("p",[v._v("在服务运行之前，将所需配置从配置仓库拉取到本地服务，达到统一化配置管理，方便集群扩容")]),v._v(" "),_("h4",{attrs:{id:"配置中心是如何实现自动刷新的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#配置中心是如何实现自动刷新的"}},[v._v("#")]),v._v(" 配置中心是如何实现自动刷新的")]),v._v(" "),_("h4",{attrs:{id:"用zookeeper和eureka做注册中心有什么区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#用zookeeper和eureka做注册中心有什么区别"}},[v._v("#")]),v._v(" 用zookeeper和Eureka做注册中心有什么区别")]),v._v(" "),_("p",[v._v("Zookeeper 保证 CP")]),v._v(" "),_("blockquote",[_("p",[v._v("Zookeeper 是保证数据的一致性的，但是并不是强一致的。")]),v._v(" "),_("p",[v._v("比如客户端 A 提交一个写操作，Zookeeper 在过半数节点操作成功之后就可以返回，但此时，客户端 B 的读操作请求的是 A 写操作尚未同步到的节点，那么读取的就不是 A 最新提交的数据了。我们可以在读取数据的时候先执行一下 sync 操作，即与 leader 节点先同步一下数据，再去取，这样才能保证数据的强一致性。")]),v._v(" "),_("p",[v._v("关于可用性，Zookeeper 的 master 节点因为网络故障与其他节点失去联系时，剩余节点会重新进行 leader 选举，选举  leader 的时间太长，需要 30 ~ 120 s, 且选举期间整个 Zookeeper  集群都是不可用的，这就导致在选举期间注册服务瘫痪。同时，在云部署的环境下，因网络问题使得 Zookeeper 集群失去 master  节点是较大概率会发生的事，整个服务停下这么长的时间是非常严重的，比如双十一。")])]),v._v(" "),_("p",[v._v("Eureka 保证 AP")]),v._v(" "),_("blockquote",[_("p",[v._v("就是针对 Zookeeper 出现的这一问题，Eureka选择了优先保证可用性。")]),v._v(" "),_("p",[v._v("大规模网络部署时，失败是在所难免的。当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，但不能接受服务直接  down 掉不可用。而集群部署的 Eureka  即使挂掉一定的数量，也可以保证有信息可以返回，依然可以提供注册和查询服务，只不过查到的信息可能不是最新的。")])]),v._v(" "),_("h4",{attrs:{id:"springcloud和dubbo有哪些区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#springcloud和dubbo有哪些区别"}},[v._v("#")]),v._v(" "),_("code",[v._v("SpringCloud")]),v._v("和"),_("code",[v._v("Dubbo")]),v._v("有哪些区别")]),v._v(" "),_("ol",[_("li",[v._v("dubbo由于是二进制的传输，占用带宽会更少")]),v._v(" "),_("li",[v._v("springCloud是http协议传输，带宽会比较多，同时使用http协议一般会使用JSON报文，消耗会更大")]),v._v(" "),_("li",[v._v("dubbo的开发难度较大，原因是dubbo的jar包依赖问题很多大型工程无法解决")]),v._v(" "),_("li",[v._v("springcloud的接口协议约定比较自由且松散，需要有强有力的行政措施来限制接口无序升级")]),v._v(" "),_("li",[v._v("dubbo的注册中心可以选择zk,redis等，springcloud的注册中心用eureka或者Consul")])]),v._v(" "),_("h4",{attrs:{id:"ribbon负载均衡原理是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ribbon负载均衡原理是什么"}},[v._v("#")]),v._v(" Ribbon负载均衡原理是什么")]),v._v(" "),_("h4",{attrs:{id:"微服务熔断降级机制是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#微服务熔断降级机制是什么"}},[v._v("#")]),v._v(" 微服务熔断降级机制是什么")]),v._v(" "),_("blockquote",[_("ol",[_("li",[v._v("当调⽤出现问题时，开启⼀个时间窗（10s）")]),v._v(" "),_("li",[v._v("在这个时间窗内，统计调⽤次数是否达到最⼩请求数？如果没有达到，则重置统计信息，回到第1步如果达到了，则统计失败的请求数占所有请求数的百分⽐，是否达到阈值？ 如果达到，则跳闸（不再请求对应服务） 如果没有达到，则重置统计信息，回到第1步")]),v._v(" "),_("li",[v._v("如果跳闸，则会开启⼀个活动窗⼝（默认5s），每隔5s，Hystrix会让⼀个请求通过,到达那个问题服务，看 是否调⽤成功，如果成功，重置断路器回到第1步，如果失败，回到第3步")])])]),v._v(" "),_("h4",{attrs:{id:"openfeign配置"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#openfeign配置"}},[v._v("#")]),v._v(" OpenFeign配置")]),v._v(" "),_("div",{staticClass:"language-yml extra-class"},[_("pre",{pre:!0,attrs:{class:"language-yml"}},[_("code",[_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("feign")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("compression")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("request")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("enabled")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token boolean important"}},[v._v("true")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("# 开启请求压缩")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("mime-types")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v(" text/html"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v("application/xml"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v("application/json "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("# 设置压缩的数据类")]),v._v("\n型，此处也是默认值\n "),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("min-request-size")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("2048")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("# 设置触发压缩的⼤⼩下限，此处也是默认值")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("response")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("enabled")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token boolean important"}},[v._v("true")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("# 开启响应压缩")]),v._v("\n"),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("logging")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("level")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("# Feign⽇志只会对⽇志级别为debug的做出响应")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("com.lagou.edu.controller.service.ResumeServiceFeignClient")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v(" debug\n\n")])])]),_("h4",{attrs:{id:"openfeign中ribbon配置有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#openfeign中ribbon配置有哪些"}},[v._v("#")]),v._v(" OpenFeign中Ribbon配置有哪些")]),v._v(" "),_("div",{staticClass:"language-yml extra-class"},[_("pre",{pre:!0,attrs:{class:"language-yml"}},[_("code",[_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("#针对的被调⽤⽅微服务名称,不加就是全局⽣效")]),v._v("\n"),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("lagou-service-resume")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("ribbon")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("#请求连接超时时间")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("#ConnectTimeout: 2000")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("#请求处理超时时间")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("#ReadTimeout: 5000")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("#对所有操作都进⾏重试")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("OkToRetryOnAllOperations")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token boolean important"}},[v._v("true")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("####根据如上配置，当访问到故障请求的时候，它会再尝试访问⼀次当前实例（次数由")]),v._v("\nMaxAutoRetries配置），\n "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("####如果不⾏，就换⼀个实例进⾏访问，如果还不⾏，再换⼀次实例访问（更换次数由")]),v._v("\nMaxAutoRetriesNextServer配置），\n "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("####如果依然不⾏，返回失败信息。")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("MaxAutoRetries")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("0")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("#对当前选中实例重试次数，不包括第⼀次调⽤")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("MaxAutoRetriesNextServer")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("0")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("#切换实例的重试次数")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("NFLoadBalancerRuleClassName")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v(" com.netflix.loadbalancer.RoundRobinRule "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("#负载策略调整")]),v._v("\n")])])]),_("h4",{attrs:{id:"openfeign中hystrix配置有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#openfeign中hystrix配置有哪些"}},[v._v("#")]),v._v(" OpenFeign中Hystrix配置有哪些")]),v._v(" "),_("ol",[_("li",[v._v("开启Hystrix之后，Feign中的⽅法都会被进⾏⼀个管理了，⼀旦出现问题就进⼊对应的回退逻辑处理")]),v._v(" "),_("li",[v._v("针对超时这⼀点，当前有两个超时时间设置（Feign/hystrix），熔断的时候是根据这两个时间的最⼩值来进⾏的，即处理时⻓超过最短的那个超时时间了就熔断进⼊回退降级逻辑")])]),v._v(" "),_("div",{staticClass:"language-yml extra-class"},[_("pre",{pre:!0,attrs:{class:"language-yml"}},[_("code",[_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("# 开启Feign的熔断功能")]),v._v("\n"),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("feign")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("hystrix")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("enabled")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token boolean important"}},[v._v("true")]),v._v("\n"),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("hystrix")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("command")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("default")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("execution")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("isolation")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("thread")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("##########################################Hystrix的超时时⻓设置")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("timeoutInMilliseconds")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("15000")]),v._v("\n \n "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("# 配置熔断策略：")]),v._v("\n"),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("hystrix")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("command")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("default")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("circuitBreaker")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("# 强制打开熔断器，如果该属性设置为true，强制断路器进⼊打开状态，将会拒绝所有的请求。 默认false关闭的")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("forceOpen")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token boolean important"}},[v._v("false")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("# 触发熔断错误⽐例阈值，默认值50%")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("errorThresholdPercentage")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("50")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("# 熔断后休眠时⻓，默认值5秒")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("sleepWindowInMilliseconds")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("3000")]),v._v(" \n "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("# 熔断触发最⼩请求次数，默认值是20")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("requestVolumeThreshold")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("2")]),v._v(" \n "),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("execution")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("isolation")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("thread")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("# 熔断超时设置，默认为1秒")]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token key atrule"}},[v._v("timeoutInMilliseconds")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("2000")]),v._v("\n")])])]),_("h4",{attrs:{id:"zab协议是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#zab协议是什么"}},[v._v("#")]),v._v(" ZAB协议是什么")]),v._v(" "),_("h4",{attrs:{id:"注册中心挂了-或者服务挂了-应该如何处理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#注册中心挂了-或者服务挂了-应该如何处理"}},[v._v("#")]),v._v(" 注册中心挂了，或者服务挂了，应该如何处理")]),v._v(" "),_("h3",{attrs:{id:"mysql"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mysql"}},[v._v("#")]),v._v(" MySQL")]),v._v(" "),_("h4",{attrs:{id:"mvcc解决的问题是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mvcc解决的问题是什么"}},[v._v("#")]),v._v(" MVCC解决的问题是什么")]),v._v(" "),_("blockquote",[_("p",[v._v("MVCC，全称Multi-Version Concurrency Control，即多版本并发控制。MVCC是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问，在编程语言中实现事务内存。")]),v._v(" "),_("p",[v._v("MVCC在MySQL InnoDB中的实现主要是为了提高数据库并发性能，用更好的方式去处理读-写冲突，做到即使有读写冲突时，也能做到不加锁，非阻塞并发读，一般解决不可重复读和幻读问题")])]),v._v(" "),_("h4",{attrs:{id:"mvcc实现原理是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mvcc实现原理是什么"}},[v._v("#")]),v._v(" MVCC实现原理是什么")]),v._v(" "),_("blockquote",[_("p",[v._v("实现原理主要是依赖记录中的3隔隐式字段，undo log，Read View来实现")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("隐式字段：")]),v._v(" "),_("p",[v._v("每行记录除了我们自定义的字段外，还有数据库隐式定义的DB_TRX_ID，DB_ROLL_PTR，DB_ROW_ID字段")]),v._v(" "),_("ul",[_("li",[v._v("DB_TRX_ID：记录最近修改（修改/插入）事务ID，记录创建这条记录、最后一次修改该记录的事务ID")]),v._v(" "),_("li",[v._v("DB_ROLL_PTR：回滚指针，指向这条记录的上个版本。")]),v._v(" "),_("li",[v._v("DB_ROW_ID：隐含的自增ID（隐藏主键），如果数据表没有主键，InnoDB会自动以DB_ROW_ID产生一个聚簇索引。")])])]),v._v(" "),_("li",[_("p",[v._v("undo log日志：")]),v._v(" "),_("p",[v._v("insert undo log：代表事务在insert新记录时产生的undo log，只在事务回滚时需要，并且在事务提交后可以被立即丢弃")]),v._v(" "),_("p",[v._v("update undo log：事务在进行update或者delete时产生的undo log，不仅在事务回滚时需要，在快照读时也需要。")])]),v._v(" "),_("li",[_("p",[v._v("Read View主要是用来做可见性判断的, 即当我们某个事务执行快照读的时候，对该记录创建一个Read View读视图，把它比作条件用来判断当前事务能够看到哪个版本的数据，既可能是当前最新的数据，也有可能是该行记录的undo log里面的某个版本的数据。")])])])]),v._v(" "),_("h4",{attrs:{id:"事务的基本要素"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#事务的基本要素"}},[v._v("#")]),v._v(" 事务的基本要素")]),v._v(" "),_("ol",[_("li",[v._v("原子性：事务开始后，要么全部完成，要么全部放弃，是不可分割的整体")]),v._v(" "),_("li",[v._v("一致性：事务开始结束后，数据库的完整性约束没有被破坏")]),v._v(" "),_("li",[v._v("隔离性：同一时间，只能有一个事务请求数据，不同事务之间彼此没有任何干扰")]),v._v(" "),_("li",[v._v("持久性：事务完成后，事务对数据库的所有更新将被保存到数据库，不能回滚")])]),v._v(" "),_("h4",{attrs:{id:"mysql的隔离级别有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mysql的隔离级别有哪些"}},[v._v("#")]),v._v(" "),_("code",[v._v("Mysql")]),v._v("的隔离级别有哪些")]),v._v(" "),_("ol",[_("li",[v._v("读取未提交，可能产生脏读、不可重复读、幻读")]),v._v(" "),_("li",[v._v("读取已提交，可能产生不可重复读、幻读")]),v._v(" "),_("li",[v._v("可重复读，可能产生幻读")]),v._v(" "),_("li",[v._v("串行化")])]),v._v(" "),_("h4",{attrs:{id:"mysql复制的原理是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mysql复制的原理是什么"}},[v._v("#")]),v._v(" "),_("code",[v._v("Mysql")]),v._v("复制的原理是什么")]),v._v(" "),_("ol",[_("li",[v._v("Master记录二进制日志， 每次提交事务完成数据更新前，Master将数据更新的时间记录到二进制日志中，"),_("code",[v._v("MySql")]),v._v("会按事务提交的顺序而非每条语句的执行顺序来记录二进制日志。再记录二进制日志后，主库会告诉存储引擎可以提交事务了。")]),v._v(" "),_("li",[v._v("Slave将Master的二进制日志复制到本地的中继日志中，首先，Slave会启动一个工作线程，成为I/O线程，  I/O线程跟Master建立一个普通的客户端链接，然后再Master上启动一个特殊的二进制转储（binlog  dump）线程（该线程没有对应的SQL命令），这个二进制转储线程会读取主库上的二进制日志中的事件。从库I/O线程将接受到时间记录到中继日志中。")]),v._v(" "),_("li",[v._v("从库的SQL线程执行最后异步，该线程的从中继日志中读取事件并在从库执行，从而实现从库数据更新。")])]),v._v(" "),_("h4",{attrs:{id:"mysql聚簇索引和非聚簇索引的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mysql聚簇索引和非聚簇索引的区别"}},[v._v("#")]),v._v(" Mysql聚簇索引和非聚簇索引的区别")]),v._v(" "),_("p",[v._v("都是B+树的数据结构")]),v._v(" "),_("ul",[_("li",[v._v("聚簇索引：将数据存储和索引放在一起、并且是按照一定的顺序组织的，找到索引也就找到了数据，数据的物理存放顺序与索引顺序是一致的，即：只要索引是相邻的，那么对应的数据一定也是相邻的存放在磁盘上的。")]),v._v(" "),_("li",[v._v("非聚簇索引：叶子节点不存储数据，存储的是数据行地址，也就是说根据索引查找到数据行的位置再去磁盘查找数据，这就有点类似一本书的目录，比如要找到第三章第一节，那就现在目录里面查找，找到对应的页码后再去对应的页码看文章。")])]),v._v(" "),_("p",[v._v("优势")]),v._v(" "),_("ul",[_("li",[v._v("查找通过聚簇索引可以直接获取到数据，相比非聚簇索引需要第二次查询(覆盖索引除外)效率要高")]),v._v(" "),_("li",[v._v("聚簇索引对范围查询的效率很高，因为其数据是按照大小排列的")]),v._v(" "),_("li",[v._v("聚簇索引适合用在排序场合，非聚簇索引不适合。")])]),v._v(" "),_("p",[v._v("劣势")]),v._v(" "),_("ul",[_("li",[v._v("维护索引代价大，特别是插入新行或者主键被更新导致要分页的时候。建议在大量插入新行后，选择负载较低的时间段，通过OPTIMIZE TABLE优化表")]),v._v(" "),_("li",[v._v("表因为使用UUID作为主键，使数据存储稀疏，这就会出现聚簇索引有可能会比全表扫面更慢，所以建议使用int的auto_increment作为主键。")]),v._v(" "),_("li",[v._v("如果主键比较大的话，那辅助索引将会变得更大，因为辅助索引的叶子节点存储的是主键值，过长的主键值，会导致非叶子节点占用更多的物理空间")])]),v._v(" "),_("h4",{attrs:{id:"mysql索引的基本原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mysql索引的基本原理"}},[v._v("#")]),v._v(" "),_("code",[v._v("Mysql")]),v._v("索引的基本原理")]),v._v(" "),_("blockquote",[_("p",[v._v("本质都是通过不断地缩小想要获取数据的范围来筛选出最终想要的结果，同时吧随机的事件变成顺序的事件，也就是说，有了这种索引机制，我们可以总是用同一种查找方式来锁定数据。")])]),v._v(" "),_("h4",{attrs:{id:"mysql索引有哪些结构-各自优劣是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mysql索引有哪些结构-各自优劣是什么"}},[v._v("#")]),v._v(" "),_("code",[v._v("MySQL")]),v._v("索引有哪些结构，各自优劣是什么")]),v._v(" "),_("blockquote",[_("p",[v._v("mysql索引数据结构使用的是b+树。")]),v._v(" "),_("p",[v._v("MyISAM引擎的索引方式叫做“非聚集”的，索引指向data域地址。在MyISAM中，主索引和辅助索引（Secondary key）在结构上没有任何区别，只是主索引要求key是唯一的，而辅助索引的key可以重复。")]),v._v(" "),_("p",[v._v("InnoDB引擎中，表数据文件本身就是按B+Tree组织的一个索引结构，这棵树的叶节点data域保存了完整的数据记录。这个索引的key是数据表的主键，因此InnoDB表数据文件本身就是主索引。InnoDB的辅助索引data域存储相应记录主键的值而不是地址。换句话说，InnoDB的所有辅助索引都引用主键作为data域。")]),v._v(" "),_("p",[v._v("因为所有辅助索引都引用主索引，过长的主索引会令辅助索引变得过大。再例如，用非单调的字段作为主键在InnoDB中不是个好主意，因为InnoDB数据文件本身是一颗B+Tree，非单调的主键会造成在插入新记录时数据文件为了维持B+Tree的特性而频繁的分裂调整，十分低效，而使用自增字段作为主键则是一个很好的选择。")])]),v._v(" "),_("h4",{attrs:{id:"mysql锁的类型有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mysql锁的类型有哪些"}},[v._v("#")]),v._v(" "),_("code",[v._v("MySQL")]),v._v("锁的类型有哪些")]),v._v(" "),_("h4",{attrs:{id:"mysql发生锁表的情况"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mysql发生锁表的情况"}},[v._v("#")]),v._v(" "),_("code",[v._v("MySQL")]),v._v("发生锁表的情况")]),v._v(" "),_("blockquote",[_("p",[v._v("发生情况：锁表发生在insert  update 、delete 中")]),v._v(" "),_("p",[v._v("锁表的原理：数据库使用独占式封锁机制，当执行上面的语句时，对表进行锁住，直到发生commite 或者 回滚 或者退出数据库用户")]),v._v(" "),_("p",[v._v("锁表的原因：")]),v._v(" "),_("ol",[_("li",[v._v("A程序执行了对 tableA 的 insert ，并还未 commite时，B程序也对tableA 进行insert 则此时会发生资源正忙的异常 就是锁表")]),v._v(" "),_("li",[v._v("第二、锁表常发生于并发而不是并行（并行时，一个线程操作数据库时，另一个线程是不能操作数据库的，cpu 和i/o 分配原则）")])]),v._v(" "),_("p",[v._v("减少锁表的概率：减少insert 、update 、delete 语句执行到 commite 之间的时间。具体点批量执行改为单个执行、优化sql自身的非执行速度，如果异常对事物进行回滚")])]),v._v(" "),_("h4",{attrs:{id:"mysql为什需要主从同步"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mysql为什需要主从同步"}},[v._v("#")]),v._v(" "),_("code",[v._v("MySQL")]),v._v("为什需要主从同步")]),v._v(" "),_("ol",[_("li",[v._v("读写分离，使数据库能支撑更大的并发。")]),v._v(" "),_("li",[v._v("主数据库宕机，可以将业务系统切换到从数据库上，避免数据丢失。")])]),v._v(" "),_("h4",{attrs:{id:"mysql执行计划怎么看"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mysql执行计划怎么看"}},[v._v("#")]),v._v(" "),_("code",[v._v("MySQL")]),v._v("执行计划怎么看")]),v._v(" "),_("h4",{attrs:{id:"简述myisam和innodb的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#简述myisam和innodb的区别"}},[v._v("#")]),v._v(" 简述"),_("code",[v._v("MyISAM")]),v._v("和"),_("code",[v._v("InnoDB")]),v._v("的区别")]),v._v(" "),_("ol",[_("li",[_("code",[v._v("InnoDB")]),v._v("支持事务，"),_("code",[v._v("MyISAM")]),v._v("不支持事务。这是"),_("code",[v._v("MySQL")]),v._v("将默认存储引擎从"),_("code",[v._v("MyISAM")]),v._v("变成"),_("code",[v._v("InnoDB")]),v._v("的重要原因之一；")]),v._v(" "),_("li",[_("code",[v._v("InnoDB")]),v._v("支持外键，而"),_("code",[v._v("MyISAM")]),v._v("不支持。对一个包含外键的"),_("code",[v._v("InnoDB")]),v._v("表转为"),_("code",[v._v("MYISAM")]),v._v("会失败；")]),v._v(" "),_("li",[_("code",[v._v("InnoDB")]),v._v("是聚集索引，"),_("code",[v._v("MyISAM")]),v._v("是非聚集索引。聚簇索引的文件存放在主键索引的叶子节点上，因此"),_("code",[v._v("InnoDB")]),v._v("必须要有主键，通过主键索引效率很高。但是辅助索引需要两次查询，先查询到主键，然后再通过主键查询到数据。因此，主键不应该过大，因为主键太大，其他索引也都会很大。而"),_("code",[v._v("MyISAM")]),v._v("是非聚集索引，数据文件是分离的，索引保存的是数据文件的指针。主键索引和辅助索引是独立的。")]),v._v(" "),_("li",[_("code",[v._v("InnoDB")]),v._v("不保存表的具体行数，执行"),_("code",[v._v("select count(*) from table")]),v._v("时需要全表扫描。而"),_("code",[v._v("MyISAM")]),v._v("用一个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度很快")]),v._v(" "),_("li",[_("code",[v._v("InnoDB")]),v._v("最小的锁粒度是行锁，"),_("code",[v._v("MyISAM")]),v._v("最小的锁粒度是表锁。一个更新语句会锁住整张表，导致其他查询和更新都会被阻塞，因此并发访问受限。这也是 "),_("code",[v._v("MySQL")]),v._v("将默认存储引擎从"),_("code",[v._v("MyISAM")]),v._v("变成"),_("code",[v._v("InnoDB")]),v._v("的重要原因之一")])]),v._v(" "),_("h4",{attrs:{id:"简述mysql中索引类型有哪些-以及对数据库的性能影响"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#简述mysql中索引类型有哪些-以及对数据库的性能影响"}},[v._v("#")]),v._v(" 简述MySQL中索引类型有哪些，以及对数据库的性能影响")]),v._v(" "),_("p",[v._v("物理角度")]),v._v(" "),_("ol",[_("li",[v._v("聚簇索引")]),v._v(" "),_("li",[v._v("非聚簇索引")])]),v._v(" "),_("p",[v._v("从逻辑角度")]),v._v(" "),_("ol",[_("li",[v._v("主键索引：主键索引是一种特殊的唯一索引，不允许有空值")]),v._v(" "),_("li",[v._v("普通索引或者单列索引")]),v._v(" "),_("li",[v._v("多列索引（复合索引）：复合索引指多个字段上创建的索引，只有在查询条件中使用了创建索引时的第一个字段，索引才会被使用。使用复合索引时遵循最左前缀集合")]),v._v(" "),_("li",[v._v("唯一索引或者非唯一索引")])]),v._v(" "),_("h4",{attrs:{id:"如何处理mysql的慢查询"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何处理mysql的慢查询"}},[v._v("#")]),v._v(" 如何处理"),_("code",[v._v("MySQL")]),v._v("的慢查询")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("EXPLAIN")]),v._v(" "),_("p",[v._v("做"),_("code",[v._v("MySQL")]),v._v("优化，我们要善用"),_("code",[v._v("EXPLAIN")]),v._v("查看"),_("code",[v._v("SQL")]),v._v("执行计划。")]),v._v(" "),_("ul",[_("li",[v._v("type列，连接类型。一个好的SQL语句至少要达到range级别。杜绝出现all级别。")]),v._v(" "),_("li",[v._v("key列，使用到的索引名。如果没有选择索引，值是NULL。可以采取强制索引方式。")]),v._v(" "),_("li",[v._v("key_len列，索引长度。")]),v._v(" "),_("li",[v._v("rows列，扫描行数。该值是个预估值。")]),v._v(" "),_("li",[v._v("extra列，详细说明。注意，常见的不太友好的值，如下：Using filesort，Using temporary。")])])]),v._v(" "),_("li",[_("p",[_("code",[v._v("SQL")]),v._v("语句中IN包含的值不应过多")]),v._v(" "),_("p",[_("code",[v._v("MySQL")]),v._v("对于IN做了相应的优化，即将IN中的常量全部存储在一个数组里面，而且这个数组是排好序的。但是如果数值较多，产生的消耗也是比较大的。再例如："),_("code",[v._v("select id from t where num in(1,2,3)")]),v._v("对于连续的数值，能用"),_("code",[v._v("between")]),v._v("就不要用"),_("code",[v._v("in")]),v._v("了；再或者使用连接来替换。")])]),v._v(" "),_("li",[_("p",[v._v("SELECT语句务必指明字段名称")]),v._v(" "),_("p",[_("code",[v._v("SELECT*")]),v._v("增加很多不必要的消耗（CPU、IO、内存、网络带宽）；增加了使用覆盖索引的可能性；当表结构发生改变时，前断也需要更新。所以要求直接在"),_("code",[v._v("select")]),v._v("后面接上字段名。")])]),v._v(" "),_("li",[_("p",[v._v("当只需要一条数据的时候，使用"),_("code",[v._v("limit 1")])])]),v._v(" "),_("li",[_("p",[v._v("如果排序字段没有用到索引，就尽量少排序")])]),v._v(" "),_("li",[_("p",[v._v("如果限制条件中其他字段没有索引，尽量少用or")]),v._v(" "),_("p",[v._v("or两边的字段中，如果有一个不是索引字段，而其他条件也不是索引字段，会造成该查询不走索引的情况。很多时候使用union all或者是union（必要的时候）的方式来代替“or”会得到更好的效果。")])]),v._v(" "),_("li",[_("p",[v._v("尽量用union all代替union")]),v._v(" "),_("p",[v._v("union和union all的差异主要是前者需要将结果集合并后再进行唯一性过滤操作，这就会涉及到排序，增加大量的CPU运算，加大资源消耗及延迟。当然，union all的前提条件是两个结果集没有重复数据。")])]),v._v(" "),_("li",[_("p",[v._v("区分in和exists、not in和not exists")]),v._v(" "),_("p",[v._v("区分in和exists主要是造成了驱动顺序的改变（这是性能变化的关键），如果是exists，那么以外层表为驱动表，先被访问，如果是IN，那么先执行子查询。所以IN适合于外表大而内表小的情况；EXISTS适合于外表小而内表大的情况。")])]),v._v(" "),_("li",[_("p",[v._v("分段查询")]),v._v(" "),_("p",[v._v("在一些用户选择页面中，可能一些用户选择的时间范围过大，造成查询缓慢。主要的原因是扫描行数过多。这个时候可以通过程序，分段进行查询，循环遍历，将结果合并处理进行展示。")])]),v._v(" "),_("li",[_("p",[v._v("避免在where子句中对字段进行null值判断")]),v._v(" "),_("p",[v._v("对于null的判断会导致引擎放弃使用索引而进行全表扫描。")])]),v._v(" "),_("li",[_("p",[v._v("不建议使用%前缀模糊查询")])]),v._v(" "),_("li",[_("p",[v._v("避免在where子句中对字段进行表达式操作")])]),v._v(" "),_("li",[_("p",[v._v("对于联合索引来说，要遵守最左前缀法则")])])]),v._v(" "),_("h4",{attrs:{id:"什么是mvcc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是mvcc"}},[v._v("#")]),v._v(" 什么是MVCC")]),v._v(" "),_("h4",{attrs:{id:"什么是mysql主从复制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是mysql主从复制"}},[v._v("#")]),v._v(" 什么是"),_("code",[v._v("MySQL")]),v._v("主从复制")]),v._v(" "),_("p",[v._v("MySQL 主从复制是指数据可以从一个MySQL数据库服务器主节点复制到一个或多个从节点。可以实现读写分离，让主库负责写，从库负责读，使数据层能支持更大的并发")]),v._v(" "),_("h4",{attrs:{id:"索引的设计原则有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#索引的设计原则有哪些"}},[v._v("#")]),v._v(" 索引的设计原则有哪些")]),v._v(" "),_("ol",[_("li",[v._v("设置合理的索引，否则不仅会占用大量的磁盘空间，而且还会影响"),_("code",[v._v("INSERT、DELETE、UPDATE")]),v._v("等语句的性能")]),v._v(" "),_("li",[v._v("避免对经常更新的表进行过多的索引，并且索引中的列尽可能少。而对经常用于查询的字段应该创建索引，但要避免添加不必要的字段。")]),v._v(" "),_("li",[v._v("据量小的表最好不要使用索引，由于数据较少，查询花费的时间可能比遍历索引的时间还要短，索引可能不会产生优化效果。")]),v._v(" "),_("li",[v._v("在条件表达式中经常用到的、不同值较多的列上建立索引，在不同值较少的列上不要建立索引。")]),v._v(" "),_("li",[v._v("当唯一性是某种数据本身的特征时，指定唯一索引。使用唯一索引能够确保定义的列的数据完整性，提供查询速度。")]),v._v(" "),_("li",[v._v("在频繁进行排序和分组（GROUP BY或ORDER BY）的列上建立索引，如果排序的列有多个，可以在这些列上建立组合索引。")])]),v._v(" "),_("p",[v._v("优化原则")]),v._v(" "),_("ol",[_("li",[v._v("避免对列的操作。任何对列的操作都可能导致全表扫描，这里所谓的操作包括数据库函数、计算表达式等，查询时要尽可能将操作移至等式的右边，甚至去掉函数。")]),v._v(" "),_("li",[v._v("避免不必要的类型转换")]),v._v(" "),_("li",[v._v("增加查询的范围限制，避免全范围的查询")]),v._v(" "),_("li",[v._v("尽量去掉"),_("code",[v._v("IN")]),v._v("、"),_("code",[v._v("OR")]),v._v("，使用"),_("code",[v._v("between")]),v._v("和"),_("code",[v._v("union")]),v._v("代替")]),v._v(" "),_("li",[v._v("尽量去掉 <>")]),v._v(" "),_("li",[v._v("去掉WHERE字句中的IS NULL和IS NOT NULL。WHERE字句中的IS NULL和IS NOT NULL将不会使用索引而是进行全表搜索。")]),v._v(" "),_("li",[v._v("LIKE字句尽量前段匹配")])]),v._v(" "),_("h3",{attrs:{id:"redis"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#redis"}},[v._v("#")]),v._v(" Redis")]),v._v(" "),_("h4",{attrs:{id:"为什么要用-redis-为什么要用缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么要用-redis-为什么要用缓存"}},[v._v("#")]),v._v(" 为什么要用 Redis/为什么要用缓存？")]),v._v(" "),_("blockquote",[_("p",[v._v("高频数据放在缓存中可以提高数据响应速度")]),v._v(" "),_("p",[v._v("缓存可以提高系统并发能力。")])]),v._v(" "),_("h4",{attrs:{id:"redis-除了做缓存-还能做什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#redis-除了做缓存-还能做什么"}},[v._v("#")]),v._v(" Redis 除了做缓存，还能做什么？")]),v._v(" "),_("blockquote",[_("ul",[_("li",[_("strong",[v._v("分布式锁")]),v._v(" ： 通过 Redis 来做分布式锁是一种比较常见的方式。通常情况下，我们都是基于 Redisson 来实现分布式锁。")]),v._v(" "),_("li",[_("strong",[v._v("限流")]),v._v(" ：一般是通过 Redis + Lua 脚本的方式来实现限流。")]),v._v(" "),_("li",[_("strong",[v._v("消息队列")]),v._v(" ：Redis 自带的 list 数据结构可以作为一个简单的队列使用。Redis5.0 中增加的 Stream 类型的数据结构更加适合用来做消息队列。它比较类似于 Kafka，有主题和消费组的概念，支持消息持久化以及 ACK 机制。")]),v._v(" "),_("li",[_("strong",[v._v("复杂业务场景")]),v._v(" ：通过 Redis 以及 Redis 扩展（比如 Redisson）提供的数据结构，我们可以很方便地完成很多复杂的业务场景比如通过 bitmap 统计活跃用户、通过 sorted set 维护排行榜。")])])]),v._v(" "),_("h4",{attrs:{id:"redis持久化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#redis持久化"}},[v._v("#")]),v._v(" redis持久化")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("RDB模式")]),v._v(" "),_("p",[v._v("指定时间间隔将内存中的数据快照写入到磁盘，也是Redis默认的持久化方式。")]),v._v(" "),_("ul",[_("li",[v._v("RDB文件紧凑，全量备份，适合备份和容灾恢复")]),v._v(" "),_("li",[v._v("生成RDB文件的时候，redis主进程会fork()一个子进程来处理所有保存工作，主进程不需要进行任何磁盘IO操作。")]),v._v(" "),_("li",[v._v("RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快。")]),v._v(" "),_("li",[v._v("可能会丢失数据")])])]),v._v(" "),_("li",[_("p",[v._v("AOF机制")]),v._v(" "),_("p",[v._v("将每一个收到的写命令都通过write函数追加到文件中。通俗的理解就是日志记录。")]),v._v(" "),_("ul",[_("li",[v._v("可以更好的保护数据不丢失，一个设置间隔1秒，最对丢失1秒数据")]),v._v(" "),_("li",[v._v("AOF日志文件的命令通过非常可读的方式进行记录，这个特性非常适合做灾难性的误删除的紧急恢复。比如某人不小心用flushall命令清空了所有数据，只要这个时候后台rewrite还没有发生，那么就可以立即拷贝AOF文件，将最后一条flushall命令给删了，然后再将该AOF文件放回去，就可以通过恢复机制，自动恢复所有数据")]),v._v(" "),_("li",[v._v("AOF通常比RDB文件更大")]),v._v(" "),_("li",[v._v("性能不如RDB，但还是很高")])])])]),v._v(" "),_("h4",{attrs:{id:"redis单线程为什么这么快-有哪些线程模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#redis单线程为什么这么快-有哪些线程模型"}},[v._v("#")]),v._v(" redis单线程为什么这么快，有哪些线程模型")]),v._v(" "),_("ol",[_("li",[v._v("完全基于内存，绝大部分请求是纯粹的内存操作，非常快速。数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(1)；")]),v._v(" "),_("li",[v._v("数据结构简单，对数据操作也简单，Redis中的数据结构是专门进行设计的；")]),v._v(" "),_("li",[v._v("采用单线程，避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗 CPU，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗；")]),v._v(" "),_("li",[v._v("使用多路I/O复用模型，非阻塞IO；")])]),v._v(" "),_("h4",{attrs:{id:"redis的过期键有哪些删除策略"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#redis的过期键有哪些删除策略"}},[v._v("#")]),v._v(" "),_("code",[v._v("redis")]),v._v("的过期键有哪些删除策略")]),v._v(" "),_("p",[_("strong",[v._v("对于过期键一般有三种策略")])]),v._v(" "),_("ul",[_("li",[v._v("定时删除：在设置键的过期时间的同时，创建一个定时器(timer)，让定时器在键的过期时间来临时，立即执行对键的删除操作；")]),v._v(" "),_("li",[v._v("惰性删除：放任键过期不管，但是每次从键空间中获取键时，都检查取得的键是否过期，如果过期的话，就删除该键；如果没有过期，那就返回该键；")]),v._v(" "),_("li",[v._v("定期删除：每隔一段时间，程序就对数据库进行一次检查，删除里面的过期键。至于删除多少过期键，以及要检查多少个数据库，则由算法决定。")])]),v._v(" "),_("p",[_("strong",[_("code",[v._v("Redis")]),v._v("的过期键删除策略")]),v._v("：")]),v._v(" "),_("ol",[_("li",[v._v("惰性删除")]),v._v(" "),_("li",[v._v("定期删除")])]),v._v(" "),_("h4",{attrs:{id:"redis缓存如何回收"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#redis缓存如何回收"}},[v._v("#")]),v._v(" "),_("code",[v._v("redis")]),v._v("缓存如何回收")]),v._v(" "),_("p",[v._v("设置了"),_("code",[v._v("redis")]),v._v("的最大内存占用（"),_("code",[v._v("maxmemory")]),v._v("）后，当最大内存占用限制达到时，"),_("code",[v._v("redis")]),v._v("会使用缓存回收策略")]),v._v(" "),_("ol",[_("li",[_("code",[v._v("volatile-lru")]),v._v(" -> 根据"),_("code",[v._v("LRU")]),v._v("算法删除设置了超时属性（expire）的键，直到腾出足够空间为止。如果没有可删除的键对象，回退到"),_("code",[v._v("noeviction")]),v._v("策略。")]),v._v(" "),_("li",[_("code",[v._v("allkeys-lru")]),v._v(" -> 根据"),_("code",[v._v("LRU")]),v._v("算法删除键，不管数据有没有设置超时属性，直到腾出足够空间为止。")]),v._v(" "),_("li",[_("code",[v._v("volatile-lfu")]),v._v(" -> 根据"),_("code",[v._v("LFU")]),v._v("算法删除设置了超时属性（expire）的键，直到腾出足够空间为止。如果没有可删除的键对象，回退到"),_("code",[v._v("noeviction")]),v._v("策略。")]),v._v(" "),_("li",[_("code",[v._v("allkeys-lfu")]),v._v(" -> 根据"),_("code",[v._v("LFU")]),v._v("算法删除键，不管数据有没有设置超时属性，直到腾出足够空间为止。")]),v._v(" "),_("li",[_("code",[v._v("volatile-random")]),v._v(" -> 随机删除过期键，直到腾出足够空间为止。")]),v._v(" "),_("li",[_("code",[v._v("allkeys-random")]),v._v(" -> 随机删除所有键，直到腾出足够空间为止。")]),v._v(" "),_("li",[_("code",[v._v("volatile-ttl")]),v._v(" -> 根据键值对象的"),_("code",[v._v("ttl")]),v._v("属性，删除最近将要过期数据。如果没有，回退到"),_("code",[v._v("noeviction")]),v._v("策略。")]),v._v(" "),_("li",[_("code",[v._v("noeviction")]),v._v(" -> 不会删除任何数据，拒绝所有写入操作并返 回客户端错误信息，此 时"),_("code",[v._v("Redis")]),v._v("只响应读操作。")])]),v._v(" "),_("p",[_("code",[v._v("LRU")]),v._v(" (Least recently used) 最近最少使用，"),_("code",[v._v("LFU")]),v._v(" (Least frequently used) 最不经常使用")]),v._v(" "),_("h4",{attrs:{id:"redis集群有哪些方案"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#redis集群有哪些方案"}},[v._v("#")]),v._v(" "),_("code",[v._v("redis")]),v._v("集群有哪些方案")]),v._v(" "),_("p",[v._v("主从复制：")]),v._v(" "),_("ol",[_("li",[v._v("主机自动将数据同步到从机，可以实现读写分离，分担主机压力。")]),v._v(" "),_("li",[v._v("不具备自动容错和恢复功能，主从机宕机后需要手动重启或切换"),_("code",[v._v("IP")]),v._v("，主机宕机还有可能造成数据不一致问题。")]),v._v(" "),_("li",[_("code",[v._v("Redis")]),v._v("较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。")])]),v._v(" "),_("p",[v._v("哨兵模式：")]),v._v(" "),_("ol",[_("li",[v._v("哨兵模式基于主从复制，拥有它的所有有点，哨兵集群可以监视主从服务器，主服务器宕机后会自动选举从服务器代替")]),v._v(" "),_("li",[_("code",[v._v("Redis")]),v._v("较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。")])]),v._v(" "),_("p",[_("code",[v._v("Redis-Cluster")]),v._v("集群：")]),v._v(" "),_("p",[_("code",[v._v("redis3.0")]),v._v("上加入了"),_("code",[v._v("cluster")]),v._v("模式，实现的"),_("code",[v._v("redis")]),v._v("的分布式存储，也就是说每台"),_("code",[v._v("redis")]),v._v("节点上存储不同的内容。")]),v._v(" "),_("ul",[_("li",[v._v("所有的"),_("code",[v._v("redis")]),v._v("节点彼此互联("),_("code",[v._v("PING-PONG")]),v._v("机制),内部使用二进制协议优化传输速度和带宽。")]),v._v(" "),_("li",[v._v("节点的fail是通过集群中超过半数的节点检测失效时才生效。")]),v._v(" "),_("li",[v._v("客户端与"),_("code",[v._v("redis")]),v._v("节点直连,不需要中间代理层.客户端不需要连接集群所有节点,连接集群中任何一个可用节点即可。")])]),v._v(" "),_("p",[v._v("在"),_("code",[v._v("redis")]),v._v("的每一个节点上，都有这么两个东西，一个是插槽（slot），它的的取值范围是：0-16383。还有一个就是cluster，可以理解为是一个集群管理的插件。当我们的存取的key到达的时候，"),_("code",[v._v("redis")]),v._v("会根据"),_("code",[v._v("crc16")]),v._v("的算法得出一个结果，然后把结果对 16384 求余数，这样每个 key 都会对应一个编号在 0-16383  之间的哈希槽，通过这个值，去找到对应的插槽所对应的节点，然后直接自动跳转到这个对应的节点上进行存取操作。")]),v._v(" "),_("p",[v._v("为了保证高可用，"),_("code",[v._v("redis-cluster")]),v._v("集群引入了主从模式，一个主节点对应一个或者多个从节点，当主节点宕机的时候，就会启用从节点。当其它主节点ping一个主节点A时，如果半数以上的主节点与A通信超时，那么认为主节点A宕机了。如果主节点A和它的从节点A1都宕机了，那么该集群就无法再提供服务了。")]),v._v(" "),_("h4",{attrs:{id:"redis事务是如何实现的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#redis事务是如何实现的"}},[v._v("#")]),v._v(" "),_("code",[v._v("redis")]),v._v("事务是如何实现的")]),v._v(" "),_("p",[_("code",[v._v("Redis")]),v._v("事务通常会使用"),_("code",[v._v("MULTI,EXEC,WATCH,DISCARD")]),v._v("等命令来完成,"),_("code",[v._v("redis")]),v._v("实现事务实现的机制与常见的关系型数据库有很大的区别,比如"),_("code",[v._v("redis")]),v._v("的事务不支持回滚,事务执行时会阻塞其它客户端的请求执行")]),v._v(" "),_("p",[v._v("事务由multi开启，将多个命令入队到事务中，最后exec命令触发事务")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("原子性")]),v._v("：对于"),_("code",[v._v("Redis")]),v._v("的事务功能来说，事务队列中的命令要么就全部执行，要么就一个都不执行，但是"),_("code",[v._v("Redis")]),v._v("的事务是不支持回滚操作的")]),v._v(" "),_("li",[_("strong",[v._v("一致性")]),v._v("："),_("code",[v._v("Redis")]),v._v("通过谨慎的错误检测和简单的设计保证事务的一致性。"),_("code",[v._v("Redis")]),v._v("事务可能出错的地方以及解决方案：\n"),_("ol",[_("li",[_("strong",[v._v("入队错误")]),v._v("：如果一个事务在入队命令的过程中发现命令不存在或者命令格式不正确，"),_("code",[v._v("Redis")]),v._v("将拒绝执行这个事务")]),v._v(" "),_("li",[_("strong",[v._v("执行错误")]),v._v("：事务在执行的过程中发生错误的命令会被服务器识别出来，并进行相应的错误处理，所以这些出错的命令不会对数据库做任何修改，也不会对事务的一致性产生任何影响")]),v._v(" "),_("li",[_("strong",[v._v("服务器停机")]),v._v("：如果"),_("code",[v._v("Redis")]),v._v("服务器在执行事务的过程中停机，且服务器运行在任意模式下（无持久化的内存模式、"),_("code",[v._v("RDB")]),v._v("模式或者"),_("code",[v._v("AOF")]),v._v("模式），事务执行中途发生的停机都不会影响数据库的一致性")])])]),v._v(" "),_("li",[_("strong",[v._v("隔离性")]),v._v("："),_("code",[v._v("Redis")]),v._v("使用单线程的方式执行事务，并且服务器保证在执行事务期间不会对事务进行中断，因此，"),_("code",[v._v("Redis")]),v._v("的事务总是串行的方式运行，并且事务总是具有隔离性的")]),v._v(" "),_("li",[_("strong",[v._v("持久性")]),v._v("：当服务器运行在"),_("code",[v._v("AOF")]),v._v("持久化模式下，并且"),_("code",[v._v("appendfsync")]),v._v("选项的值是"),_("code",[v._v("always")]),v._v("时，事务是具有耐久性的，其他情况不具有耐久性")])]),v._v(" "),_("h4",{attrs:{id:"redis主从复制原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#redis主从复制原理"}},[v._v("#")]),v._v(" "),_("code",[v._v("redis")]),v._v("主从复制原理")]),v._v(" "),_("p",[_("strong",[v._v("全量同步")]),v._v(" "),_("code",[v._v("Redis")]),v._v("全量复制一般发生在Slave初始化阶段，这时Slave需要将Master上的所有数据都复制一份。具体步骤如下：")]),v._v(" "),_("ul",[_("li",[v._v("从服务器连接主服务器，发送SYNC命令；")]),v._v(" "),_("li",[v._v("主服务器接收到SYNC命名后，开始执行"),_("code",[v._v("BGSAVE")]),v._v("命令生成"),_("code",[v._v("RDB")]),v._v("文件并使用缓冲区记录此后执行的所有写命令；")]),v._v(" "),_("li",[v._v("主服务器"),_("code",[v._v("BGSAVE")]),v._v("执行完后，向所有从服务器发送快照文件，并在发送期间继续记录被执行的写命令；")]),v._v(" "),_("li",[v._v("从服务器收到快照文件后丢弃所有旧数据，载入收到的快照；")]),v._v(" "),_("li",[v._v("主服务器快照发送完毕后开始向从服务器发送缓冲区中的写命令；")]),v._v(" "),_("li",[v._v("从服务器完成对快照的载入，开始接收命令请求，并执行来自主服务器缓冲区的写命令；")])]),v._v(" "),_("p",[_("strong",[v._v("增量同步")]),v._v(" "),_("code",[v._v("Redis")]),v._v("增量复制是指Slave初始化后开始正常工作时主服务器发生的写操作同步到从服务器的过程。 增量复制的过程主要是主服务器每执行一个写命令就会向从服务器发送相同的写命令，从服务器接收并执行收到的写命令。")]),v._v(" "),_("h4",{attrs:{id:"缓存击穿、穿透、雪崩、预热解决方案"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缓存击穿、穿透、雪崩、预热解决方案"}},[v._v("#")]),v._v(" 缓存击穿、穿透、雪崩、预热解决方案")]),v._v(" "),_("p",[v._v("缓存穿透：")]),v._v(" "),_("blockquote",[_("p",[v._v("描述：访问一个缓存和数据库都不存在的 key，此时会直接打到数据库上，并且查不到数据，没法写缓存，所以下一次同样会打到数据库上。")]),v._v(" "),_("p",[v._v("此时，缓存起不到作用，请求每次都会走到数据库，流量大时数据库可能会被打挂。此时缓存就好像被“穿透”了一样，起不到任何作用。")]),v._v(" "),_("p",[v._v("解决方案：接口校验，布隆过滤器，缓存空值")])]),v._v(" "),_("p",[v._v("缓存击穿：")]),v._v(" "),_("blockquote",[_("p",[v._v("描述：某一个热点 key，在缓存过期的一瞬间，同时有大量的请求打进来，由于此时缓存过期了，所以请求最终都会走到数据库，造成瞬时数据库请求量大、压力骤增，甚至可能打垮数据库。")]),v._v(" "),_("p",[v._v("解决方案：加互斥锁，设置热点数据不过期")])]),v._v(" "),_("p",[v._v("缓存雪崩：")]),v._v(" "),_("blockquote",[_("p",[v._v("描述：大量的热点 key 设置了相同的过期时间，导在缓存在同一时刻全部失效，造成瞬时数据库请求量大、压力骤增，引起雪崩，甚至导致数据库被打挂。")]),v._v(" "),_("p",[v._v("缓存雪崩其实有点像“升级版的缓存击穿”，缓存击穿是一个热点 key，缓存雪崩是一组热点 key。")]),v._v(" "),_("p",[v._v("解决方案：打撒过期时间，设置热点数据不过期，加互斥锁")])]),v._v(" "),_("h3",{attrs:{id:"zookeeper"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper"}},[v._v("#")]),v._v(" zookeeper")]),v._v(" "),_("h4",{attrs:{id:"zookeeper的watch机制是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper的watch机制是什么"}},[v._v("#")]),v._v(" zookeeper的watch机制是什么")]),v._v(" "),_("h4",{attrs:{id:"zookeeper的命名、配置、管理是如何实现的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper的命名、配置、管理是如何实现的"}},[v._v("#")]),v._v(" zookeeper的命名、配置、管理是如何实现的")]),v._v(" "),_("h4",{attrs:{id:"zookeeper的数据模型和节点类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper的数据模型和节点类型"}},[v._v("#")]),v._v(" zookeeper的数据模型和节点类型")]),v._v(" "),_("h3",{attrs:{id:"kafka"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#kafka"}},[v._v("#")]),v._v(" kafka")]),v._v(" "),_("h4",{attrs:{id:"简述kafka架构设计"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#简述kafka架构设计"}},[v._v("#")]),v._v(" 简述kafka架构设计")]),v._v(" "),_("blockquote",[_("p",[v._v("Kafka采用"),_("strong",[v._v("发布-订阅")]),v._v("消息模型。使用主题（Topic）作为消息通信载体，类似于广播模式，发布者发布一条消息，该消息通过主题传递给所有的订阅者。")])]),v._v(" "),_("h4",{attrs:{id:"kafka-的多副本机制了解吗-带来了什么好处"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#kafka-的多副本机制了解吗-带来了什么好处"}},[v._v("#")]),v._v(" Kafka 的多副本机制了解吗？带来了什么好处？")]),v._v(" "),_("blockquote",[_("p",[v._v("Kafka的分区（Partition）可以有多个副本，多个副本中会有一个leader，其余副本为follower，我们发送的消息会被发送到leader中，然后follower副本从leader中同步消息。生产者和消费者只能与leader交互，其余副本只做安全备份。")]),v._v(" "),_("ul",[_("li",[v._v("Kafka通过给特定Topic指定多个Partition，而各个Partition可以分布在不同的Broker上，这样便能提供比较好的并发能力")]),v._v(" "),_("li",[v._v("Partition可以指定对应的副本数，极大地提高了消息存储的安全性，提高了容灾能力，不过也相应增加了所需要的存储空间。")])])]),v._v(" "),_("h4",{attrs:{id:"kafka的rebalance机制是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#kafka的rebalance机制是什么"}},[v._v("#")]),v._v(" kafka的rebalance机制是什么")]),v._v(" "),_("h4",{attrs:{id:"kafka是pull还是push-分析一下优劣"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#kafka是pull还是push-分析一下优劣"}},[v._v("#")]),v._v(" kafka是pull还是push，分析一下优劣")]),v._v(" "),_("blockquote",[_("p",[v._v("kafka采用的是pull方式")]),v._v(" "),_("p",[v._v("push方式由broker决定消息推送的速率，对于不同消费速率的consumer不好处理")]),v._v(" "),_("p",[v._v("pull方式consumer可以自主决定消费速率，决定是否批量拉取数据，但是当没有消息时，可能会导致consumer不断轮询。")])]),v._v(" "),_("h4",{attrs:{id:"kafka消息丢失的场景有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#kafka消息丢失的场景有哪些"}},[v._v("#")]),v._v(" kafka消息丢失的场景有哪些")]),v._v(" "),_("p",[v._v("生产者阶段：")]),v._v(" "),_("blockquote",[_("p",[v._v("生产者发送消息没有收到broker正确的响应，导致生产者重试。")]),v._v(" "),_("p",[v._v("生产者发送一条消息，broker落盘后因为网络等种种原因发送端得到一个发送失败的响应或者网络中断，然后生产者重试导致消息重复。")]),v._v(" "),_("p",[v._v("解决方案：启动kafka的幂等性；ack=0，不重试")])]),v._v(" "),_("p",[v._v("生产者和broker阶段：")]),v._v(" "),_("blockquote",[_("p",[v._v("ack=0，不重试，如果失败就会丢失消息")]),v._v(" "),_("p",[v._v("ack=1，leader宕机，发送之后只等leader写入成功就返回成功，leader宕机时，还未同步消息，可能会消息丢失")]),v._v(" "),_("p",[v._v("解决方案：")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("配置ack=all / -1,tries > 1,unclean.leader.election.enable : false")]),v._v(" "),_("p",[v._v("producer发送消息完，等待ollower同步完再返回，如果异常则重试。这时副本的数量可能影响吞吐量，最大不超过5个，一般三个足够了。不允许选举ISR以外的副本作为leader。")])]),v._v(" "),_("li",[_("p",[v._v("配置：min.insync.replicas > 1")]),v._v(" "),_("p",[v._v("当producer将acks设置为“all”(或“-1”)时，min.insync。副本指定必须确认写操作成功的最小副本数量。如果不能满足这个最小值，则生产者将引发一个异常(要么是NotEnoughReplicas，要么是NotEnoughReplicasAfterAppend)。")])]),v._v(" "),_("li",[_("p",[v._v("失败的offset单独记录")]),v._v(" "),_("p",[v._v("捕获失败的单独处理")])])])]),v._v(" "),_("p",[v._v("消费者阶段：")]),v._v(" "),_("blockquote",[_("p",[v._v("数据消费完没有及时提交offset到broker")]),v._v(" "),_("p",[v._v("解决方案：取消自动提交改为手动几条")])]),v._v(" "),_("h4",{attrs:{id:"kafka中zookeeper作用是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#kafka中zookeeper作用是什么"}},[v._v("#")]),v._v(" kafka中zookeeper作用是什么")]),v._v(" "),_("p",[v._v("broker")]),v._v(" "),_("blockquote",[_("p",[v._v("zookeeper会记录所有broker的存活状态，broker会向zookeeper发送心跳请求来上报自己的状态，zookeeper维护了一个正在运行集群的broker列表")]),v._v(" "),_("p",[v._v("如果分区leader故障，zookeeper会负责选取新的分区leader。")]),v._v(" "),_("p",[v._v("kafka 允许一些 client 有不同的生产和消费的限额。这些限额配置信息是保存在 zookeeper 里面的。所有 topic 的访问控制信息也是由 zookeeper 维护的。")]),v._v(" "),_("p",[v._v("ISR（in-sync replica） 是 partition 的一组同步集合，就是所有 follower 里面同步最积极的那部分。一条消息只有被 ISR 中的成员都接收到，才被视为“已同步”状态。只有处于 ISR 集合中的副本才有资格被选举为 leader。zookeeper 记录着 ISR 的信息，而且是实时更新的，只要发现其中有成员不正常，马上移除。")]),v._v(" "),_("p",[v._v("zookeeper 保存了所有 node 和 topic 的注册信息，可以方便的找到每个 broker 持有哪些 topic。node 和 topic 在 zookeeper 中是以临时节点的形式存在的，只要与 zookeeper 的 session 一关闭，他们的信息就没有了。")]),v._v(" "),_("p",[v._v("zookeeper 保存了 topic 相关配置，例如 topic 列表、每个 topic 的 partition 数量、副本的位置等等。")])]),v._v(" "),_("p",[v._v("消费者")]),v._v(" "),_("blockquote",[_("p",[v._v("kafka 老版本中，consumer 的消费偏移量是默认存储在 zookeeper 中的。新版本中，这个工作由 kafka 自己做了，kafka 专门做了一个 offset manager。")]),v._v(" "),_("p",[v._v("和 broker 一样，consumer 也需要注册。consumer 会自动注册，注册的方式也是创建一个临时节点，consumer down 了之后就会自动销毁。")]),v._v(" "),_("p",[v._v("kafka 的每个 partition 只能被消费组中的一个 consumer 消费，kafka 必须知道所有 partition 与 consumer 的关系。")])]),v._v(" "),_("h4",{attrs:{id:"kafka中高性能如何保障"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#kafka中高性能如何保障"}},[v._v("#")]),v._v(" kafka中高性能如何保障")]),v._v(" "),_("p",[v._v("分区")]),v._v(" "),_("blockquote",[_("p",[v._v("分区的设计使得Kafka消息的读写性能可以突破单台broker的I/O性能瓶颈，可以在创建主题的时候指定分区数，也可以在主题创建完成之后去修改分区数，通过增加分区数可以实现水平扩展，但是要注意，分区数也不是越多越好，一般达到某一个阈值之后，再增加分区数性能反而会下降，具体阈值需要对Kafka集群进行压测才能确定。")])]),v._v(" "),_("p",[v._v("消息顺序追加")]),v._v(" "),_("blockquote",[_("p",[v._v("Kafka是通过文件追加的方式来写入消息的，只能在日志文件的最后追加新的消息，并且不允许修改已经写入的消息，这种方式就是顺序写磁盘，而顺序写磁盘的速度是非常快的。")])]),v._v(" "),_("p",[v._v("页缓存")]),v._v(" "),_("blockquote",[_("p",[v._v("页缓存是操作系统实现的一种主要的磁盘缓存，以此用来减少对磁盘I/O的操作。具体来说，就是把磁盘中的数据缓存到内存中，把对磁盘的访问变为对内存的访问。Kafka中大量使用了页缓存，消息都是先被写入页缓存，再由操作系统负责具体的刷盘任务（Kafka中也提供了同步刷盘和间断性强制算盘的功能）。")])]),v._v(" "),_("p",[v._v("零拷贝")]),v._v(" "),_("blockquote",[_("p",[v._v("零拷贝技术是一种避免CPU将数据从一块存储拷贝到另一块存储的技术。Kafka使用零拷贝技术将数据直接从磁盘复制到网卡设备缓冲区中，而不需要经过应用程序的转发。通常应用程序将磁盘上的数据传送至网卡需要经过4步：")]),v._v(" "),_("ol",[_("li",[v._v("调用read()，将数据从磁盘复制到内核模式的缓冲区；")]),v._v(" "),_("li",[v._v("CPU会将数据从内核模式复制到用户模式下的缓冲区；")]),v._v(" "),_("li",[v._v("调用write()，将数据从用户模式下复制到内核模式下的Socket缓冲区；")]),v._v(" "),_("li",[v._v("将数据从内核模式的Socket缓冲区复制到网卡设备。")])]),v._v(" "),_("p",[v._v("上面的步骤中，第2、3步将数据从内核模式经过用户模式再绕回内核模式，浪费了两次复制过程。采用零拷贝技术，Kafka可以直接请求内核把磁盘中的数据复制到Socket缓冲区，而不用再经过用户模式。")])]),v._v(" "),_("h3",{attrs:{id:"rabbitmq"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rabbitmq"}},[v._v("#")]),v._v(" RabbitMq")]),v._v(" "),_("h4",{attrs:{id:"rabbitmq的架构设计"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rabbitmq的架构设计"}},[v._v("#")]),v._v(" rabbitmq的架构设计")]),v._v(" "),_("h4",{attrs:{id:"rabbitmq的事务消息处理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rabbitmq的事务消息处理"}},[v._v("#")]),v._v(" rabbitmq的事务消息处理")]),v._v(" "),_("h4",{attrs:{id:"rabbitmq如何保证消息的发送和接收"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rabbitmq如何保证消息的发送和接收"}},[v._v("#")]),v._v(" rabbitmq如何保证消息的发送和接收")]),v._v(" "),_("h4",{attrs:{id:"rabbitmq死信队列-延迟队列"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rabbitmq死信队列-延迟队列"}},[v._v("#")]),v._v(" rabbitmq死信队列，延迟队列")]),v._v(" "),_("h3",{attrs:{id:"mybatis"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mybatis"}},[v._v("#")]),v._v(" Mybatis")]),v._v(" "),_("h4",{attrs:{id:"mybatis的优缺点有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mybatis的优缺点有哪些"}},[v._v("#")]),v._v(" "),_("code",[v._v("Mybatis")]),v._v("的优缺点有哪些")]),v._v(" "),_("p",[_("code",[v._v("Mybatis")]),v._v("是一个半自动的"),_("code",[v._v("ORM")]),v._v("持久层框架，内部封装了"),_("code",[v._v("JDBC")]),v._v("。作为开发者只需要关注"),_("code",[v._v("sql")]),v._v("语句本身。"),_("code",[v._v("Mybatis")]),v._v("是通过"),_("code",[v._v("xml")]),v._v("或注解的方式将需要执行的各种"),_("code",[v._v("statement")]),v._v("配置起来。通过"),_("code",[v._v("Java")]),v._v("对象和"),_("code",[v._v("statement")]),v._v("中的"),_("code",[v._v("sql")]),v._v("动态参数映射生成最终执行的"),_("code",[v._v("sql")]),v._v("语句，最终由"),_("code",[v._v("Mabtais")]),v._v("框架执行"),_("code",[v._v("sql")]),v._v("并将结果映射为"),_("code",[v._v("Java")]),v._v("对象并返回。"),_("code",[v._v("MyBatis")]),v._v("支持定制化"),_("code",[v._v("SQL")]),v._v("、存储过程以及高级映射。"),_("code",[v._v("MyBatis")]),v._v("是可以双向映射的，可以将数据集映射为"),_("code",[v._v("Java")]),v._v("对象，也可以将"),_("code",[v._v("Java")]),v._v("对象映射为数据库中的记录。")]),v._v(" "),_("p",[v._v("优点：")]),v._v(" "),_("ul",[_("li",[v._v("简单易上手")]),v._v(" "),_("li",[v._v("消除了"),_("code",[v._v("JDBC")]),v._v("大量冗余代码")]),v._v(" "),_("li",[v._v("兼容各种数据库")]),v._v(" "),_("li",[v._v("提供很多第三方插件")]),v._v(" "),_("li",[v._v("和Spring集成性好")]),v._v(" "),_("li",[_("code",[v._v("sql")]),v._v("和代码解耦")]),v._v(" "),_("li",[v._v("支持动态"),_("code",[v._v("sql")])]),v._v(" "),_("li",[v._v("支持对象与数据"),_("code",[v._v("ORM")]),v._v("字段关系映射")])]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("sql")]),v._v("编写量大，要求一定"),_("code",[v._v("sql")]),v._v("功底")]),v._v(" "),_("li",[_("code",[v._v("sql")]),v._v("依赖数据库，可移植性差，不能随意更换数据库")])]),v._v(" "),_("h4",{attrs:{id:"mybatis和hibernate的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mybatis和hibernate的区别"}},[v._v("#")]),v._v(" Mybatis和hibernate的区别")]),v._v(" "),_("h4",{attrs:{id:"mybatis中-和-的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mybatis中-和-的区别"}},[v._v("#")]),v._v(" "),_("code",[v._v("Mybatis")]),v._v("中#{}和${}的区别")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("Mybatis")]),v._v("在处理#{}时，会将"),_("code",[v._v("sql")]),v._v("中的#{}替换为?号，调用"),_("code",[v._v("PreparedStatement")]),v._v("的 set 方法来赋值，使用#{}可以有效的防止"),_("code",[v._v("SQL")]),v._v("注入，提高系统安全性。")]),v._v(" "),_("li",[_("code",[v._v("Mybatis")]),v._v("在处理${}时，使用的是字符串拼接")])]),v._v(" "),_("h4",{attrs:{id:"mybatis插件的运行原理和开发流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mybatis插件的运行原理和开发流程"}},[v._v("#")]),v._v(" Mybatis插件的运行原理和开发流程")]),v._v(" "),_("blockquote",[_("p",[v._v("Mybatis插件又称拦截器，Mybatis采用责任链模式，通过动态代理组织多个插件（拦截器），通过这些插件可以改变Mybatis的默认行为。MyBatis 允许你在已映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis允许使用插件来拦截的方法调用包括：")]),v._v(" "),_("ol",[_("li",[v._v("Executor (update, query, flushStatements, commit, rollback,getTransaction, close, isClosed) 拦截执行器的方法；")]),v._v(" "),_("li",[v._v("ParameterHandler (getParameterObject, setParameters) 拦截参数的处理；")]),v._v(" "),_("li",[v._v("ResultSetHandler (handleResultSets, handleOutputParameters) 拦截结果集的处理；")]),v._v(" "),_("li",[v._v("StatementHandler (prepare, parameterize, batch, update, query) 拦截Sql语法构建的处理；")])]),v._v(" "),_("p",[v._v("开发方式")]),v._v(" "),_("p",[v._v("Mybatis的插件实现要实现Interceptor接口，这个接口只声明了三个方法。")]),v._v(" "),_("ol",[_("li",[v._v("setProperties方法是在Mybatis进行配置插件的时候可以配置自定义相关属性，即：接口实现对象的参数配置")]),v._v(" "),_("li",[v._v("plugin方法是插件用于封装目标对象的，通过该方法我们可以返回目标对象本身，也可以返回一个它的代理，可以决定是否要进行拦截进而决定要返回一个什么样的目标对象，官方提供了示例：return Plugin.wrap(target, this);")]),v._v(" "),_("li",[v._v("intercept方法就是要进行拦截的时候要执行的方法")])]),v._v(" "),_("div",{staticClass:"language-java extra-class"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[_("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[v._v("@Intercepts")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),_("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[v._v("@Signature")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("type "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Executor")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("class")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" method "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[v._v('"query"')]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v("\n        args "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("MappedStatement")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("class")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Object")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("class")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("RowBounds")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("class")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("ResultHandler")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("class")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("public")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("class")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("TestInterceptor")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("implements")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Interceptor")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("public")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Object")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("intercept")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Invocation")]),v._v(" invocation"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("throws")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Throwable")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n        "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Object")]),v._v(" target "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" invocation"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("getTarget")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//被代理对象")]),v._v("\n        "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Method")]),v._v(" method "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" invocation"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("getMethod")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//代理方法")]),v._v("\n        "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Object")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("[")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("]")]),v._v(" args "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" invocation"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("getArgs")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//方法参数")]),v._v("\n        "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// do something ...... 方法拦截前执行代码块")]),v._v("\n        "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Object")]),v._v(" result "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" invocation"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("proceed")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n        "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// do something .......方法拦截后执行代码块")]),v._v("\n        "),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("return")]),v._v(" result"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n    "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("public")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Object")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("plugin")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Object")]),v._v(" target"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n        "),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("return")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Plugin")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("wrap")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("target"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("this")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n    "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n")])])])]),v._v(" "),_("h3",{attrs:{id:"elasticsearch"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#elasticsearch"}},[v._v("#")]),v._v(" elasticsearch")]),v._v(" "),_("h4",{attrs:{id:"倒排索引是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#倒排索引是什么"}},[v._v("#")]),v._v(" 倒排索引是什么")]),v._v(" "),_("p",[v._v("传统检索是通过文章，逐个遍历找到对应的关键词的位置。而倒排索引，是通过分词策略，形成词和文章的映射关系表，这种词典+映射表就是倒排索引，可以实现o(1)时间复杂度的效率检索文章，极大的提高了检索效率。")])])}),[],!1,null,null,null);_.default=t.exports}}]);