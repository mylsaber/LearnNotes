(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{342:function(a,s,t){"use strict";t.r(s);var e=t(13),r=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"_1-变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-变量"}},[a._v("#")]),a._v(" 1. 变量")]),a._v(" "),s("h2",{attrs:{id:"_1-1-定义变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-定义变量"}},[a._v("#")]),a._v(" 1.1 定义变量")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("variable")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("value\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("variable")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'value'")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("variable")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"value"')]),a._v("\n")])])]),s("p",[a._v("variable是变量名，value是赋值给变量的值，如果value不包含任何空白符（例如空格、Tab缩进），那么可以不使用引号；如果value包含空白符，那么必须使用引号。")]),a._v(" "),s("blockquote",[s("p",[a._v("注意，"),s("code",[a._v("=")]),a._v("的周围不能有空格")])]),a._v(" "),s("h2",{attrs:{id:"_1-2-命名规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-命名规则"}},[a._v("#")]),a._v(" 1.2 命名规则")]),a._v(" "),s("ul",[s("li",[a._v("变量名由数字、字母、下划线组成")]),a._v(" "),s("li",[a._v("必须以字母或者下划线开头")]),a._v(" "),s("li",[a._v("不能使用Shell关键字（通过help命令可以查看）")])]),a._v(" "),s("h2",{attrs:{id:"_1-3-使用变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-使用变量"}},[a._v("#")]),a._v(" 1.3 使用变量")]),a._v(" "),s("p",[a._v("使用定义过的变量，只要在变量名前加美元符号"),s("code",[a._v("$")])]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("author")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"jiang"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$author")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${author}")]),a._v("\n")])])]),s("p",[a._v("变量名外的花括号"),s("code",[a._v("{}")]),a._v("是可选的，加花括号是为了帮助解释器识别变量的边界")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("skill")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Java"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"I am good at '),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${shill}")]),a._v('Script"')]),a._v("\n")])])]),s("p",[a._v("如果不加花括号，解释器就会把"),s("code",[a._v("$skillScript")]),a._v("当成一个变量。")]),a._v(" "),s("h2",{attrs:{id:"_1-4-修改变量值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-修改变量值"}},[a._v("#")]),a._v(" 1.4 修改变量值")]),a._v(" "),s("p",[a._v("已定义的变量，可以被重新赋值")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("url")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"http://mylsaber.com"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${url}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("url")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"http://mylsaber.com/shell/"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${url}")]),a._v("\n")])])]),s("h2",{attrs:{id:"_1-5-单引号-双引号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-单引号-双引号"}},[a._v("#")]),a._v(" 1.5 单引号&双引号")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token shebang important"}},[a._v("#!/bin/bash")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("url")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"http://mylsaber.com"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("website1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'官网：${url}'")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("website2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"官网：'),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${url}")]),a._v('"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$website1")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$website2")]),a._v("\n")])])]),s("p",[a._v("运行结果：")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("官网："),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${url}")]),a._v("\n官网：http://mylsaber.com\n")])])]),s("p",[a._v("单引号"),s("code",[a._v("''")]),a._v("包围变量时，单引号里面是什么就输出什么，即使内容中有变量和命令（命令需要反引起来）也会把它们原样输出。这种方式比较适合定义纯字符场景。\n双引号"),s("code",[a._v('""')]),a._v("包围变量时，输出会先解析里面的变量和命令，这个方式比较适合字符串中附带有变量和命令时的变量定义。")]),a._v(" "),s("h2",{attrs:{id:"_1-6-命令结果赋值变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-命令结果赋值变量"}},[a._v("#")]),a._v(" 1.6 命令结果赋值变量")]),a._v(" "),s("p",[a._v("Shell支持将命令的结果赋值给变量")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("variable")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("command")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("variable")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("command")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n")])])]),s("ul",[s("li",[a._v("第一种方式把命令用反引号``` `包围起来，反引号和单引号非常相似，不推荐这种方式。")]),a._v(" "),s("li",[a._v("第二种把命令用"),s("code",[a._v("$()")]),a._v("包围起来，推荐")])]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("jiangfangwei@la-jiangfangwei jfw % "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("cat")]),a._v(" test.sh \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#!/bin/bash")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$$")]),a._v("\njiangfangwei@la-jiangfangwei jfw % "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("log")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("cat")]),a._v(" test.sh"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(" \njiangfangwei@la-jiangfangwei jfw % "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$log")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#!/bin/bash")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$$")]),a._v("\n")])])]),s("h2",{attrs:{id:"_1-7-只读变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-只读变量"}},[a._v("#")]),a._v(" 1.7 只读变量")]),a._v(" "),s("p",[a._v("使用readonly命令可以将变量定义为只读变量")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"jiang"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("readonly")]),a._v(" name\n")])])]),s("h2",{attrs:{id:"_1-8-删除变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-删除变量"}},[a._v("#")]),a._v(" 1.8 删除变量")]),a._v(" "),s("p",[a._v("使用unset命令可以删除变量")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("unset")]),a._v(" variable_name\n")])])]),s("p",[a._v("unset命令不能删除只读变量。")]),a._v(" "),s("h1",{attrs:{id:"_2-shell命令替换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-shell命令替换"}},[a._v("#")]),a._v(" 2. Shell命令替换")]),a._v(" "),s("p",[a._v("Shell 中有两种方式可以完成命令替换，一种是反引号````，一种是"),s("code",[a._v("$()")]),a._v("，使用方法如下：")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("variable")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("command")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("variable")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("command")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n")])])]),s("blockquote",[s("p",[a._v("注意，如果被替换的命令的输出内容包括多行（也即有换行符），或者含有多个连续的空白符，那么在输出变量时应该将变量用双引号包围，否则系统会使用默认的空白符来填充，这会导致换行无效，以及连续的空白符被压缩成一个。")])]),a._v(" "),s("p",[a._v("原则上讲，上面提到的两种变量替换的形式是等价的，可以随意使用；但是，反引号毕竟看起来像单引号，有时候会对查看代码造成困扰，而使用 $() 就相对清晰，能有效避免这种混乱。而且有些情况必须使用 $()：$() 支持嵌套，反引号不行。")]),a._v(" "),s("h1",{attrs:{id:"_3-位置参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-位置参数"}},[a._v("#")]),a._v(" 3. 位置参数")]),a._v(" "),s("p",[a._v("运行Shell脚本时，我们可以给他传递一些参数，这些参数在脚本内部可以使用"),s("code",[a._v("$n")]),a._v("的形式来接收，例如"),s("code",[a._v("$1")]),a._v("表示第一个参数，"),s("code",[a._v("$2")]),a._v("表示第二个参数。")]),a._v(" "),s("h2",{attrs:{id:"_3-1-给脚本文件传递参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-给脚本文件传递参数"}},[a._v("#")]),a._v(" 3.1 给脚本文件传递参数")]),a._v(" "),s("p",[a._v("编写test.sh")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token shebang important"}},[a._v("#!/bin/bash")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Language: '),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$1")]),a._v('"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"URL: '),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$2")]),a._v('"')]),a._v("\n")])])]),s("p",[a._v("运行test.sh并附带参数")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("jiangfangwei@la-jiangfangwei jfw % ./test.sh "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("java")]),a._v(" www.mylsaber.com\nLanguage: "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("java")]),a._v("\nURL: www.mylsaber.com\n")])])]),s("h2",{attrs:{id:"_3-2-给函数传递参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-给函数传递参数"}},[a._v("#")]),a._v(" 3.2 给函数传递参数")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token shebang important"}},[a._v("#!/bin/bash")]),a._v("\n\nfunctioin "),s("span",{pre:!0,attrs:{class:"token function-name function"}},[a._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Language: '),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$1")]),a._v('"')]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"URL: '),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$2")]),a._v('"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\nfunc "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("java")]),a._v(" www.mylsaber.com\n")])])]),s("blockquote",[s("p",[a._v("如果参数个数太多，达到或者超过10个，那么就得使用"),s("code",[a._v("${n}")]),a._v("的形式来接收了。")])]),a._v(" "),s("h1",{attrs:{id:"_4-shell特殊变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-shell特殊变量"}},[a._v("#")]),a._v(" 4. Shell特殊变量")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("变量")]),a._v(" "),s("th",[a._v("含义")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("$0")]),a._v(" "),s("td",[a._v("当前脚本的文件名")])]),a._v(" "),s("tr",[s("td",[a._v("$n")]),a._v(" "),s("td",[a._v("脚本或者函数的位置参数")])]),a._v(" "),s("tr",[s("td",[a._v("$#")]),a._v(" "),s("td",[a._v("传递给脚本或者函数的参数个数")])]),a._v(" "),s("tr",[s("td",[a._v("$*")]),a._v(" "),s("td",[a._v("传递给脚本或者函数的所有参数")])]),a._v(" "),s("tr",[s("td",[a._v("$@")]),a._v(" "),s("td",[a._v("传递给脚本或者函数的所有参数。当被双引号"),s("code",[a._v('""')])])]),a._v(" "),s("tr",[s("td",[a._v("包含时，$@与$*稍有不同")]),a._v(" "),s("td")]),a._v(" "),s("tr",[s("td",[a._v("$?")]),a._v(" "),s("td",[a._v("上一个命令的退出状态，或者函数的返回值")])]),a._v(" "),s("tr",[s("td",[a._v("$$")]),a._v(" "),s("td",[a._v("当前Shell进程ID，对于Shell脚本，就是这些脚本所在的进程ID")])])])]),a._v(" "),s("h2",{attrs:{id:"_4-1-给脚本文件传递参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-给脚本文件传递参数"}},[a._v("#")]),a._v(" 4.1 给脚本文件传递参数")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token shebang important"}},[a._v("#!/bin/bash")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Process ID: '),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$$")]),a._v('"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"File Name: '),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$0")]),a._v('"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"First Parameter : '),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$1")]),a._v('"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Second Parameter : '),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$2")]),a._v('"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"All parameters 1: '),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$@")]),a._v('"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"All parameters 2: '),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$*")]),a._v('"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Total: '),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$#")]),a._v('"')]),a._v("\n")])])]),s("p",[a._v("运行结果：")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("jiangfangwei@la-jiangfangwei jfw % ./test.sh "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("java")]),a._v(" linux\nProcess ID: "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3858")]),a._v("\nFile Name: ./test.sh\nFirst Parameter "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("java")]),a._v("\nSecond Parameter "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" linux\nAll parameters "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(": "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("java")]),a._v(" linux\nAll parameters "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(": "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("java")]),a._v(" linux\nTotal: "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n")])])]),s("h2",{attrs:{id:"_4-2-给函数传递参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-给函数传递参数"}},[a._v("#")]),a._v(" 4.2 给函数传递参数")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token shebang important"}},[a._v("#!/bin/bash")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#定义函数")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function-name function"}},[a._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Language: '),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$1")]),a._v('"')]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"URL: '),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$2")]),a._v('"')]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"First Parameter : '),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$1")]),a._v('"')]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Second Parameter : '),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$2")]),a._v('"')]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"All parameters 1: '),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$@")]),a._v('"')]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"All parameters 2: '),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$*")]),a._v('"')]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Total: '),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$#")]),a._v('"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#调用函数")]),a._v("\nfunc Java www.mylsaber.com\n")])])]),s("p",[a._v("运行结果：")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("jiangfangwei@la-jiangfangwei jfw % ./test.sh \nLanguage: Java\nURL: www.mylsaber.com\nFirst Parameter "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" Java\nSecond Parameter "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" www.mylsaber.com\nAll parameters "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(": Java www.mylsaber.com\nAll parameters "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(": Java www.mylsaber.com\nTotal: "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n")])])]),s("h2",{attrs:{id:"_4-3-shell"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-shell"}},[a._v("#")]),a._v(" 4.3 Shell $?")]),a._v(" "),s("p",[s("code",[a._v("$?")]),a._v("用来获取上一个命令的退出状态，或者上一个函数的返回值。\n退出状态就是上一个命令执行后的返回结果。是一个数字，一般情况下，大部分命令执行成功会返回0，失败返回1。")]),a._v(" "),s("h3",{attrs:{id:"_4-3-1-获取上一个命令退出状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-1-获取上一个命令退出状态"}},[a._v("#")]),a._v(" 4.3.1 获取上一个命令退出状态")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token shebang important"}},[a._v("#!/bin/bash")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$1")]),a._v('"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("then")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exit")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#参数正确，退出状态为0")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exit")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#参数错误，退出状态1")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("fi")]),a._v("\n")])])]),s("p",[s("code",[a._v("exit")]),a._v("表示退出当前Shell进程，必须在新进程中运行test.sh，否者当前Shell会话会被关闭，我们就无法取得退出状态了。")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("jiangfangwei@la-jiangfangwei jfw % ./test.sh "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),a._v("\njiangfangwei@la-jiangfangwei jfw % "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$?")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\njiangfangwei@la-jiangfangwei jfw % ./test.sh "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v(" \njiangfangwei@la-jiangfangwei jfw % "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$?")]),a._v("     \n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n")])])]),s("h3",{attrs:{id:"_4-3-2-获取函数返回值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-2-获取函数返回值"}},[a._v("#")]),a._v(" 4.3.2 获取函数返回值")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token shebang important"}},[a._v("#!/bin/bash")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#得到两个数相加的和")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function-name function"}},[a._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("expr")]),a._v(" $1 + $2"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("23")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("50")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#调用函数")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$?")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#获取函数返回值")]),a._v("\n")])])]),s("blockquote",[s("p",[a._v("严格来说，Shell函数中的return关键字用来表示函数的退出状态，而不是函数的返回值；Shell不像其他编程语言，没有专门处理返回值的关键字。")])]),a._v(" "),s("h1",{attrs:{id:"_5-shell字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-shell字符串"}},[a._v("#")]),a._v(" 5. Shell字符串")]),a._v(" "),s("ul",[s("li",[a._v("由单引号"),s("code",[a._v("''")]),a._v("包围的字符串：\n"),s("ul",[s("li",[a._v("任何字符都会原样输出，在其中使用变量是无效的。")]),a._v(" "),s("li",[a._v("字符串中不能出现单引号，即使对单引号进行转义也不行。")])])]),a._v(" "),s("li",[a._v("由双引号"),s("code",[a._v('""')]),a._v("包围的字符串：\n"),s("ul",[s("li",[a._v("如果其中包含了某个变量，那么该变量会被解析（得到该变量的值），而不是原样输出。")]),a._v(" "),s("li",[a._v("字符串中可以出现双引号，只要它被转义了就行。")])])]),a._v(" "),s("li",[a._v("不被引号包围的字符串\n"),s("ul",[s("li",[a._v("不被引号包围的字符串中出现变量时也会被解析，这一点和双引号"),s("code",[a._v('" "')]),a._v("包围的字符串一样。")]),a._v(" "),s("li",[a._v("字符串中不能出现空格，否则空格后边的字符串会作为其他变量或者命令解析。")])])])]),a._v(" "),s("h2",{attrs:{id:"_5-1-获取字符串长度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-获取字符串长度"}},[a._v("#")]),a._v(" 5.1 获取字符串长度")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("#")]),a._v("string_name}")]),a._v("\n")])])]),s("p",[a._v("sting_name表示字符串名字。")]),a._v(" "),s("h2",{attrs:{id:"_5-2-字符串拼接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-字符串拼接"}},[a._v("#")]),a._v(" 5.2 字符串拼接")]),a._v(" "),s("p",[a._v("在Shell中你不需要使用任何运算符，将两个字符串并排放在一起就能实现拼接。")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token shebang important"}},[a._v("#!/bin/bash")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"shell"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("url")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"www.mylsaber.com"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("str1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$name")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$url")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#中间不能有空格")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("str2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$name")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$url")]),a._v('"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#双引号中间可以有空格")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("str3")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$name")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('": "')]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$url")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#中间可以出现别的字符串")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("str4")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$name")]),a._v(": "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$url")]),a._v('"')]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#这样写也可以")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("str5")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${name}")]),a._v("Script: "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${url}")]),a._v('index.html"')]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#这个时候需要给变量名加上大括号")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$str1")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$str2")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$str3")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$str4")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$str5")]),a._v("\n")])])]),s("h2",{attrs:{id:"_5-3-shell字符串截取"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-shell字符串截取"}},[a._v("#")]),a._v(" 5.3 Shell字符串截取")]),a._v(" "),s("h3",{attrs:{id:"_5-3-1-从指定位置开始截取"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-1-从指定位置开始截取"}},[a._v("#")]),a._v(" 5.3.1 从指定位置开始截取")]),a._v(" "),s("p",[a._v("这种方式需要两个参数：除了指定起始位置，还需要截取长度，才能最终确定要截取的字符串。")]),a._v(" "),s("ul",[s("li",[a._v("从字符串左边开始计数")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("${sting:start:length}\n")])])]),s("p",[a._v("sring是要截取的字符串，start起始位置，length截取长度")]),a._v(" "),s("ul",[s("li",[a._v("从字符串右边开始计数")])]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${sring"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" 0-start"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" length}")]),a._v("\n")])])]),s("h3",{attrs:{id:"_5-3-2-从指定字符开始截取"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-2-从指定字符开始截取"}},[a._v("#")]),a._v(" 5.3.2 从指定字符开始截取")]),a._v(" "),s("p",[a._v("这种截取方式无法指定字符串长度，只能从指定字符（子字符串）截取到字符串末尾。Shell 可以截取指定字符（子字符串）右边的所有字符，也可以截取左边的所有字符。")]),a._v(" "),s("ul",[s("li",[a._v("使用#截取右边字符")])]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${string"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("#")]),a._v("*chars}")]),a._v("\n")])])]),s("p",[a._v("其中，string 表示要截取的字符，chars 是指定的字符（或者子字符串），"),s("code",[a._v("*")]),a._v("是通配符的一种，表示任意长度的字符串。"),s("code",[a._v("*chars")]),a._v("连起来使用的意思是：忽略左边的所有字符，直到遇见 chars（chars 不会被截取）。\n如果不需要忽略 chars 左边的字符，那么也可以不写"),s("code",[a._v("*")]),a._v("。\n以上写法遇到第一个匹配的字符（子字符串）就结束了。\n如果希望直到最后一个指定字符（子字符串）再匹配结束，那么可以使用"),s("code",[a._v("##")]),a._v("，具体格式为：")]),a._v(" "),s("ul",[s("li",[a._v("使用 % 截取左边字符")])]),a._v(" "),s("p",[a._v("使用"),s("code",[a._v("%")]),a._v("号可以截取指定字符（或者子字符串）左边的所有字符，具体格式如下：")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${string"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("%")]),a._v("chars*}")]),a._v("\n")])])]),s("p",[a._v("请注意"),s("code",[a._v("*")]),a._v("的位置，因为要截取 chars 左边的字符，而忽略 chars 右边的字符，所以"),s("code",[a._v("*")]),a._v("应该位于 chars 的右侧。其他方面"),s("code",[a._v("%")]),a._v("和"),s("code",[a._v("#")]),a._v("的用法相同。")]),a._v(" "),s("h1",{attrs:{id:"_6-shell数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-shell数组"}},[a._v("#")]),a._v(" 6. Shell数组")]),a._v(" "),s("p",[a._v("Shell支持数组，并且没有限制大小，下标从0开始。")]),a._v(" "),s("h2",{attrs:{id:"_6-1-定义数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-定义数组"}},[a._v("#")]),a._v(" 6.1 定义数组")]),a._v(" "),s("p",[a._v("用括号"),s("code",[a._v("()")]),a._v("来表示数组，数组元素之间用空格来分隔。")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("array_name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("ele1 ele2 ele3 ele4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v("Shell是弱类型，并不要求所有数组元素类型相同。")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("arr")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("55")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"jiang"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"di"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v("Shell数组长度不固定，定义之后还可以增加元素。例如，nums数组长度为6，使用"),s("code",[a._v("nums[6]=78")]),a._v("，可以使其长度扩展到7。\n此外，无需逐个给数组赋值，下面代码就只给特定元素赋值。")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("ages")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("24")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("19")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("21")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v("以上代码就只给3、5、10元素赋值，所以数组长度为3。")]),a._v(" "),s("h2",{attrs:{id:"_6-2-获取数组元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-获取数组元素"}},[a._v("#")]),a._v(" 6.2 获取数组元素")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${array_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("}")]),a._v("\n")])])]),s("p",[a._v("使用"),s("code",[a._v("@")]),a._v("或"),s("code",[a._v("*")]),a._v("可以获取数组所有元素。")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("@"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("*"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("}")]),a._v("\n")])])]),s("h2",{attrs:{id:"_6-3-获取数组长度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-获取数组长度"}},[a._v("#")]),a._v(" 6.3 获取数组长度")]),a._v(" "),s("p",[a._v("利用"),s("code",[a._v("@")]),a._v("或"),s("code",[a._v("*")]),a._v("，可以将数组扩展成列表，然后使用"),s("code",[a._v("#")]),a._v("来获取数组元素的个数。")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("#")]),a._v("array_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("@"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("#")]),a._v("array_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("*"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("}")]),a._v("\n")])])]),s("p",[a._v("如果某个元素是字符串，还可以通过指定下标的方式获取该元素的长度。")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("#")]),a._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("}")]),a._v("\n")])])]),s("p",[a._v("Shell如何获取字符串长度的？其实如出一辙。")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("#")]),a._v("sting_name}")]),a._v("\n")])])]),s("h2",{attrs:{id:"_6-4-数组拼接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-数组拼接"}},[a._v("#")]),a._v(" 6.4 数组拼接")]),a._v(" "),s("p",[a._v("拼接数组的思路是：先利用"),s("code",[a._v("@")]),a._v("或"),s("code",[a._v("*")]),a._v("，将数组扩展成列表，然后再合并到一起。")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("array_new")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${array1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("@"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("}")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${array2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("@"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("array_new")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${array1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("*"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("}")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${array2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("*"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("h2",{attrs:{id:"_6-5-删除数组元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-删除数组元素"}},[a._v("#")]),a._v(" 6.5 删除数组元素")]),a._v(" "),s("p",[a._v("在 Shell 中，使用 unset 关键字来删除数组元素")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("unset")]),a._v(" array_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),s("p",[a._v("如果不写下标，就是删除整个数组。")]),a._v(" "),s("h1",{attrs:{id:"_7-shell内建命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-shell内建命令"}},[a._v("#")]),a._v(" 7 Shell内建命令")]),a._v(" "),s("p",[a._v("所谓内建命令，就是由Bash自身提供的命令，而不是文件系统中的某个可执行文件。\n可以使用type来确定一个命令是否是内建命令。")]),a._v(" "),s("h2",{attrs:{id:"_7-1-alias"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-alias"}},[a._v("#")]),a._v(" 7.1 alias")]),a._v(" "),s("p",[a._v("alias用来给命令创建别名。如果直接输入该命令且不带任何参数，则列出当前Shell进程中使用了哪些别名。这也是"),s("code",[a._v("ll")]),a._v("与"),s("code",[a._v("ls -l")]),a._v("命令效果一样的原因。")]),a._v(" "),s("h3",{attrs:{id:"_7-1-1-自定义别名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-1-自定义别名"}},[a._v("#")]),a._v(" 7.1.1 自定义别名")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("alias")]),a._v(" new-name"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'command'")]),a._v("\n")])])]),s("p",[a._v("比如，一般关机命令是"),s("code",[a._v("shutdown -h now")]),a._v("，写起来比较长，这时可以重新定义一个关机命令。")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("alias")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("myShutdown")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'shutdown -h now'")]),a._v("\n")])])]),s("p",[a._v("通过date命令可以获取当前UNIX时间戳，具体写法为"),s("code",[a._v("date +%s")]),a._v("，可一个定义一个别名。")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("alias")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("timestamp")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'date +%s'")]),a._v("\n")])])]),s("p",[s("strong",[a._v("别名只是临时的")]),a._v("\n在代码中使用alias命令定义的别名只能在当前Shell进程中使用，在子进程和其他进程中都不能使用。当前Shell进程结束后，别名也消失。")]),a._v(" "),s("h3",{attrs:{id:"_7-1-2-删除别名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-2-删除别名"}},[a._v("#")]),a._v(" 7.1.2 删除别名")]),a._v(" "),s("p",[a._v("使用unalias内建命令可以删除当前Shell进程中的别名。")]),a._v(" "),s("ul",[s("li",[a._v("命令后跟上别名，删除指定别名")]),a._v(" "),s("li",[a._v("命令后跟上"),s("code",[a._v("-a")]),a._v("参数，删除当前Shell进程中所有的别名。")])]),a._v(" "),s("h2",{attrs:{id:"_7-2-echo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-echo"}},[a._v("#")]),a._v(" 7.2 echo")]),a._v(" "),s("p",[a._v("用来在终端输出字符串，并在最后默认加上换行符。如果不希望换行，可以加上"),s("code",[a._v("-n")]),a._v("参数")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("jiang\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${name}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-n")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${name}")]),a._v("\n")])])]),s("h3",{attrs:{id:"_7-2-1-输出转义字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-1-输出转义字符"}},[a._v("#")]),a._v(" 7.2.1 输出转义字符")]),a._v(" "),s("p",[a._v("默认情况下，echo不会解析以反斜杠"),s("code",[a._v("\\")]),a._v("开头的转义字符。比如，"),s("code",[a._v("\\n")]),a._v("表示换行，echo默认会将它作为普通字符对待。")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("root@localhost ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v('# echo "hello \\nworld"')]),a._v("\nhello "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("nworld\n")])])]),s("p",[a._v("我们可以添加"),s("code",[a._v("-e")]),a._v("参数来让echo命令解析转义字符。")]),a._v(" "),s("h2",{attrs:{id:"_7-3-read"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-read"}},[a._v("#")]),a._v(" 7.3 read")]),a._v(" "),s("p",[a._v("用来从标准输入中读取数据并赋值给变量。如果没有进行重定向，默认就是从键盘读取用户输入的数据；如果进行重定向，那么可以从文件中读取数据。")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("read")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("-option"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("variables"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),s("p",[s("code",[a._v("option")]),a._v("表示选项，"),s("code",[a._v("variables")]),a._v("表示用来存储数据的变量。\n"),s("code",[a._v("option")]),a._v("和"),s("code",[a._v("variables")]),a._v("都是可选的，如果没有提供变量名，那么读取的数据将存放到环境变量REPLY中。")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("选项")]),a._v(" "),s("th",[a._v("说明")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("-a array")]),a._v(" "),s("td",[a._v("把读取的数据赋值给数组 array，从下标 0 开始。")])]),a._v(" "),s("tr",[s("td",[a._v("-d delimiter")]),a._v(" "),s("td",[a._v("用字符串 delimiter 指定读取结束的位置，而不是一个换行符（读取到的数据不包括 delimiter）。")])]),a._v(" "),s("tr",[s("td",[a._v("-e")]),a._v(" "),s("td",[a._v("在获取用户输入的时候，对功能键进行编码转换，不会直接显式功能键对应的字符。")])]),a._v(" "),s("tr",[s("td",[a._v("-n num")]),a._v(" "),s("td",[a._v("读取 num 个字符，而不是整行字符。")])]),a._v(" "),s("tr",[s("td",[a._v("-p prompt")]),a._v(" "),s("td",[a._v("显示提示信息，提示内容为 prompt。")])]),a._v(" "),s("tr",[s("td",[a._v("-r")]),a._v(" "),s("td",[a._v("原样读取（Raw mode），不把反斜杠字符解释为转义字符。")])]),a._v(" "),s("tr",[s("td",[a._v("-s")]),a._v(" "),s("td",[a._v("静默模式（Silent mode），不会在屏幕上显示输入的字符。当输入密码和其它确认信息的时候，这是很有必要的。")])]),a._v(" "),s("tr",[s("td",[a._v("-t seconds")]),a._v(" "),s("td",[a._v("设置超时时间，单位为秒。如果用户没有在指定时间内输入完成，那么 read 将会返回一个非 0 的退出状态，表示读取失败。")])]),a._v(" "),s("tr",[s("td",[a._v("-u fd")]),a._v(" "),s("td",[a._v("使用文件描述符 fd 作为输入源，而不是标准输入，类似于重定向。")])])])]),a._v(" "),s("h2",{attrs:{id:"_7-4-exit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-exit"}},[a._v("#")]),a._v(" 7.4 exit")]),a._v(" "),s("p",[a._v("用来退出当前Shell进程，并返回一个退出状态；使用"),s("code",[a._v("$?")]),a._v("可以接收这个退出状态。\nexit可以接受一个整数作为参数，代表退出状态，如果不指定，默认状态为0。一般情况，0代表成功，非0表示执行失败（出错）了。\nexit退出状态只能是一个介于0~255之间的整数。其中只有0表示成功，其他值都表示失败。")]),a._v(" "),s("h2",{attrs:{id:"_7-5-declare-typeset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-declare-typeset"}},[a._v("#")]),a._v(" 7.5 declare&typeset")]),a._v(" "),s("p",[a._v("declare和typeset用法相同，都是用来设置变量的属性。不过typeset已经被弃用了，推荐使用declare替代。")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("declare")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("+/-"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("aAfFgilprtux"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("变量名"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("变量值"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),s("p",[s("code",[a._v("-")]),a._v("表示设置属性，"),s("code",[a._v("+")]),a._v("表示取消属性，"),s("code",[a._v("aAfFgilprtux")]),a._v("都是具体的选项，它们的含义如下表所示：")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("选项")]),a._v(" "),s("th",[a._v("含义")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("-f [name]")]),a._v(" "),s("td",[a._v("列出之前由用户在脚本中定义的函数名称和函数体。")])]),a._v(" "),s("tr",[s("td",[a._v("-F [name]")]),a._v(" "),s("td",[a._v("仅列出自定义函数名称。")])]),a._v(" "),s("tr",[s("td",[a._v("-g name")]),a._v(" "),s("td",[a._v("在 Shell 函数内部创建全局变量。")])]),a._v(" "),s("tr",[s("td",[a._v("-p [name]")]),a._v(" "),s("td",[a._v("显示指定变量的属性和值。")])]),a._v(" "),s("tr",[s("td",[a._v("-a name")]),a._v(" "),s("td",[a._v("声明变量为普通数组。")])]),a._v(" "),s("tr",[s("td",[a._v("-A name")]),a._v(" "),s("td",[a._v("声明变量为关联数组（支持索引下标为字符串）。")])]),a._v(" "),s("tr",[s("td",[a._v("-i name")]),a._v(" "),s("td",[a._v("将变量定义为整数型。")])]),a._v(" "),s("tr",[s("td",[a._v("-r name[=value]")]),a._v(" "),s("td",[a._v("将变量定义为只读（不可修改和删除），等价于 readonly name。")])]),a._v(" "),s("tr",[s("td",[a._v("-x name[=value]")]),a._v(" "),s("td",[a._v("将变量设置为环境变量，等价于 export name[=value]。")])])])]),a._v(" "),s("h1",{attrs:{id:"_8-shell数学计算"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-shell数学计算"}},[a._v("#")]),a._v(" 8. Shell数学计算")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("算术运算符")]),a._v(" "),s("th",[a._v("说明/含义")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("+、-")]),a._v(" "),s("td",[a._v("加法（或正号）、减法（或负号）")])]),a._v(" "),s("tr",[s("td",[a._v("*、/、%")]),a._v(" "),s("td",[a._v("乘法、除法、取余（取模）")])]),a._v(" "),s("tr",[s("td",[a._v("**")]),a._v(" "),s("td",[a._v("幂运算")])]),a._v(" "),s("tr",[s("td",[a._v("++、--")]),a._v(" "),s("td",[a._v("自增和自减，可以放在变量的前面也可以放在变量的后面")])]),a._v(" "),s("tr",[s("td",[a._v("!、&&、||")]),a._v(" "),s("td",[a._v("逻辑非（取反）、逻辑与（and）、逻辑或（or）")])]),a._v(" "),s("tr",[s("td",[a._v("<、<=、>、>=")]),a._v(" "),s("td",[a._v("比较符号（小于、小于等于、大于、大于等于）")])]),a._v(" "),s("tr",[s("td",[a._v("==、!=、=")]),a._v(" "),s("td",[a._v("比较符号（相等、不相等；对于字符串，= 也可以表示相当于）")])]),a._v(" "),s("tr",[s("td",[a._v("<<、>>")]),a._v(" "),s("td",[a._v("向左移位、向右移位")])]),a._v(" "),s("tr",[s("td",[a._v("~、|、 &、^")]),a._v(" "),s("td",[a._v("按位取反、按位或、按位与、按位异或")])]),a._v(" "),s("tr",[s("td",[a._v("=、+=、-=、*=、/=、%=")]),a._v(" "),s("td",[a._v("赋值运算符，例如 a+=1 相当于 a=a+1，a-=1 相当于 a=a-1")])])])]),a._v(" "),s("p",[a._v("但是，Shell 和其它编程语言不同，Shell 不能直接进行算数运算，必须使用数学计算命令\n这是因为，在 Bash Shell 中，如果不特别指明，每一个变量的值都是字符串，无论你给变量赋值时有没有使用引号，值都会以字符串的形式存储。")]),a._v(" "),s("h2",{attrs:{id:"_8-1-数学计算命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-数学计算命令"}},[a._v("#")]),a._v(" 8.1 数学计算命令")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("运算操作符/运算命令")]),a._v(" "),s("th",[a._v("说明")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[s("a",{attrs:{href:"http://m.biancheng.net/view/2480.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("(( ))"),s("OutboundLink")],1)]),a._v(" "),s("td",[a._v("用于整数运算，效率很高，"),s("strong",[a._v("推荐使用")]),a._v("。")])]),a._v(" "),s("tr",[s("td",[s("a",{attrs:{href:"http://m.biancheng.net/view/2504.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("let"),s("OutboundLink")],1)]),a._v(" "),s("td",[a._v("用于整数运算，和 (()) 类似。")])]),a._v(" "),s("tr",[s("td",[s("a",{attrs:{href:"http://m.biancheng.net/view/vip_3235.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("$[]"),s("OutboundLink")],1)]),a._v(" "),s("td",[a._v("用于整数运算，不如 (()) 灵活。")])]),a._v(" "),s("tr",[s("td",[s("a",{attrs:{href:"http://m.biancheng.net/view/vip_3236.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("expr"),s("OutboundLink")],1)]),a._v(" "),s("td",[a._v("可用于整数运算，也可以处理字符串。比较麻烦，需要注意各种细节，不推荐使用。")])]),a._v(" "),s("tr",[s("td",[s("a",{attrs:{href:"http://m.biancheng.net/view/vip_3237.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("bc"),s("OutboundLink")],1)]),a._v(" "),s("td",[a._v("Linux下的一个计算器程序，可以处理整数和小数。Shell 本身只支持整数运算，想计算小数就得使用 bc 这个外部的计算器。")])]),a._v(" "),s("tr",[s("td",[s("a",{attrs:{href:"http://m.biancheng.net/view/vip_3238.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("declare -i"),s("OutboundLink")],1)]),a._v(" "),s("td",[a._v("将变量定义为整数，然后再进行数学运算时就不会被当做字符串了。功能有限，仅支持最基本的数学运算（加减乘除和取余），不支持逻辑运算、自增自减等，所以在实际开发中很少使用。")])])])]),a._v(" "),s("h3",{attrs:{id:"_8-1-1-用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-1-用法"}},[a._v("#")]),a._v(" 8.1.1 (())用法")]),a._v(" "),s("p",[a._v("将数学运算表达式放在"),s("code",[a._v("((")]),a._v("和"),s("code",[a._v("))")]),a._v("之间。表达式可以只有一个，也可以有多个，多个表达式之间以逗号"),s("code",[a._v(",")]),a._v("分隔。对于多个表达式的情况，以最后一个表达式的值作为整个 (( )) 命令的执行结果。\n可以使用"),s("code",[a._v("$")]),a._v("获取 (( )) 命令的结果，这和使用"),s("code",[a._v("$")]),a._v("获得变量值是类似的。")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("运算操作符/运算命令")]),a._v(" "),s("th",[a._v("说明")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("((a=10+66) ((b=a-15)) ((c=a+b))")]),a._v(" "),s("td",[a._v("这种写法可以在计算完成后给变量赋值。以 ((b=a-15)) 为例，即将 a-15 的运算结果赋值给变量 c。  注意，使用变量时不用加"),s("code",[a._v("$")])])]),a._v(" "),s("tr",[s("td",[a._v("前缀，(( )) 会自动解析变量名。")]),a._v(" "),s("td")]),a._v(" "),s("tr",[s("td",[a._v("a=$((10+66) b=$((a-15)) c=$((a+b))")]),a._v(" "),s("td",[a._v("可以在 (( )) 前面加上"),s("code",[a._v("$")])])]),a._v(" "),s("tr",[s("td",[a._v("符号获取 (( )) 命令的执行结果，也即获取整个表达式的值。以 c=$((a+b)) 为例，即将 a+b 这个表达式的运算结果赋值给变量 c。  注意，类似 c=((a+b)) 这样的写法是错误的，不加"),s("code",[a._v("$")]),a._v("就不能取得表达式的结果。")]),a._v(" "),s("td")]),a._v(" "),s("tr",[s("td",[a._v("((a>7 && b==c))")]),a._v(" "),s("td",[a._v("(( )) 也可以进行逻辑运算，在 if 语句中常会使用逻辑运算。")])]),a._v(" "),s("tr",[s("td",[a._v("echo $((a+10))")]),a._v(" "),s("td",[a._v("需要立即输出表达式的运算结果时，可以在 (( )) 前面加"),s("code",[a._v("$")])])]),a._v(" "),s("tr",[s("td",[a._v("符号。")]),a._v(" "),s("td")]),a._v(" "),s("tr",[s("td",[a._v("((a=3+5, b=a+10))")]),a._v(" "),s("td",[a._v("对多个表达式同时进行计算。")])])])]),a._v(" "),s("p",[s("strong",[a._v("在 (( )) 中使用变量无需加上")]),s("code",[a._v("**$**")]),s("strong",[a._v("前缀，(( )) 会自动解析变量名，这使得代码更加简洁，也符合程序员的书写习惯。")])]),a._v(" "),s("h3",{attrs:{id:"_8-1-2-let命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-2-let命令"}},[a._v("#")]),a._v(" 8.1.2 let命令")]),a._v(" "),s("p",[a._v("let 命令和双小括号 (( )) 的用法是类似的，它们都是用来对整数进行运算")]),a._v(" "),s("blockquote",[s("p",[a._v("注意：和双小括号 (( )) 一样，let 命令也只能进行整数运算，不能对小数（浮点数）或者字符串进行运算。")])]),a._v(" "),s("p",[a._v("Shell let 命令的语法格式为：")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("let")]),a._v(" 表达式\n")])])]),s("p",[a._v("或者")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("let")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"表达式"')]),a._v("\n")])])]),s("p",[a._v("或者")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("let")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'表达式'")]),a._v("\n")])])]),s("p",[a._v("它们都等价于"),s("code",[a._v("((表达式))")]),a._v("。\n当表达式中含有 Shell 特殊字符（例如 |）时，需要用双引号"),s("code",[a._v('" "')]),a._v("或者单引号"),s("code",[a._v("' '")]),a._v("将表达式包围起来。\n和 (( )) 类似，let 命令也支持一次性计算多个表达式，并且以最后一个表达式的值作为整个 let 命令的执行结果。但是，对于多个表达式之间的分隔符，let 和 (( )) 是有区别的：")]),a._v(" "),s("ul",[s("li",[a._v("let 命令以空格来分隔多个表达式；")]),a._v(" "),s("li",[a._v("(( )) 以逗号"),s("code",[a._v(",")]),a._v("来分隔多个表达式。")])]),a._v(" "),s("p",[a._v("另外还要注意，对于类似"),s("code",[a._v("let x+y")]),a._v("这样的写法，Shell 虽然计算了 x+y 的值，但却将结果丢弃；若不想这样，可以使用"),s("code",[a._v("let sum=x+y")]),a._v("将 x+y 的结果保存在变量 sum 中。")]),a._v(" "),s("h1",{attrs:{id:"_9-if-else语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-if-else语句"}},[a._v("#")]),a._v(" 9. if else语句")]),a._v(" "),s("h2",{attrs:{id:"_9-1-if语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-1-if语句"}},[a._v("#")]),a._v(" 9.1 if语句")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v("  condition\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("then")]),a._v("\n    statement"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("fi")]),a._v("\n")])])]),s("p",[s("code",[a._v("condition")]),a._v("是判断条件，如果 condition 成立（返回“真”），那么 then 后边的语句将会被执行；如果 condition 不成立（返回“假”），那么不会执行任何语句。\n也可以将 then 和 if 写在一行：")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v("  condition"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("then")]),a._v("\n    statement"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("fi")]),a._v("\n")])])]),s("blockquote",[s("p",[a._v("注意 condition 后边的分号"),s("code",[a._v(";")]),a._v("，当 if 和 then 位于同一行的时候，这个分号是必须的，否则会有语法错误。")])]),a._v(" "),s("h2",{attrs:{id:"_9-2-if-else-语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-2-if-else-语句"}},[a._v("#")]),a._v(" 9.2 if else 语句")]),a._v(" "),s("p",[a._v("如果有两个分支，就可以使用 if else 语句")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v("  condition\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("then")]),a._v("\n   statement1\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v("\n   statement2\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("fi")]),a._v("\n")])])]),s("h2",{attrs:{id:"_9-3-if-elif-else-语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-3-if-elif-else-语句"}},[a._v("#")]),a._v(" 9.3 if elif else 语句")]),a._v(" "),s("p",[a._v("Shell 支持任意数目的分支，当分支比较多时，可以使用 if elif else 结构")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v("  condition1\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("then")]),a._v("\n   statement1\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("elif")]),a._v(" condition2\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("then")]),a._v("\n    statement2\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("elif")]),a._v(" condition3\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("then")]),a._v("\n    statement3\n……\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v("\n   statementn\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("fi")]),a._v("\n")])])]),s("blockquote",[s("p",[a._v("注意，if 和 elif 后边都得跟着 then。")])]),a._v(" "),s("h1",{attrs:{id:"_10-shell退出状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-shell退出状态"}},[a._v("#")]),a._v(" 10. Shell退出状态")]),a._v(" "),s("p",[a._v("每一条 Shell 命令，不管是 Bash 内置命令（例如 cd、echo），还是外部的 Linux 命令（例如 ls、awk），还是自定义的 Shell 函数，当它退出（运行结束）时，都会返回一个比较小的整数值给调用（使用）它的程序，这就是命令的"),s("strong",[a._v("退出状态（exit statu）")]),a._v("。")]),a._v(" "),s("blockquote",[s("p",[a._v("很多 Linux 命令其实就是一个C语言程序，熟悉C语言的读者都知道，main() 函数的最后都有一个"),s("code",[a._v("return 0")]),a._v("，如果程序想在中间退出，还可以使用"),s("code",[a._v("exit 0")]),a._v("，这其实就是C语言程序的退出状态。当有其它程序调用这个程序时，就可以捕获这个退出状态。")])]),a._v(" "),s("p",[a._v("if 语句的判断条件，从本质上讲，判断的就是命令的退出状态。\n"),s("strong",[a._v("按照惯例来说，退出状态为 0 表示“成功”；也就是说，程序执行完成并且没有遇到任何问题。除 0 以外的其它任何退出状态都为“失败”。")])]),a._v(" "),s("h1",{attrs:{id:"_11-test命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-test命令"}},[a._v("#")]),a._v(" 11. test命令")]),a._v(" "),s("p",[a._v("test 是 Shell 内置命令，用来检测某个条件是否成立。test 通常和 if 语句一起使用，并且大部分 if 语句都依赖 test。test 命令有很多选项，可以进行数值、字符串和文件三个方面的检测。\nShell test 命令的用法为：")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("test")]),a._v(" expression\n")])])]),s("p",[a._v("当 test 判断 expression 成立时，退出状态为 0，否则为非 0 值。\ntest 命令也可以简写为"),s("code",[a._v("[]")]),a._v("，它的用法为：")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(" expression "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),s("p",[a._v("注意"),s("code",[a._v("[]")]),a._v("和"),s("code",[a._v("expression")]),a._v("之间的空格，这两个空格是必须的，否则会导致语法错误。"),s("code",[a._v("[]")]),a._v("的写法更加简洁，比 test 使用频率高。")]),a._v(" "),s("h2",{attrs:{id:"_11-1-与文件检测相关的-test-选项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-1-与文件检测相关的-test-选项"}},[a._v("#")]),a._v(" 11.1 与文件检测相关的 test 选项")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("文件类型判断")]),a._v(" "),s("th")])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("选 项")]),a._v(" "),s("td",[a._v("作 用")])]),a._v(" "),s("tr",[s("td",[a._v("-b filename")]),a._v(" "),s("td",[a._v("判断文件是否存在，并且是否为块设备文件。")])]),a._v(" "),s("tr",[s("td",[a._v("-c filename")]),a._v(" "),s("td",[a._v("判断文件是否存在，并且是否为字符设备文件。")])]),a._v(" "),s("tr",[s("td",[a._v("-d filename")]),a._v(" "),s("td",[a._v("判断文件是否存在，并且是否为目录文件。")])]),a._v(" "),s("tr",[s("td",[a._v("-e filename")]),a._v(" "),s("td",[a._v("判断文件是否存在。")])]),a._v(" "),s("tr",[s("td",[a._v("-f filename")]),a._v(" "),s("td",[a._v("判断文件是否存在，井且是否为普通文件。")])]),a._v(" "),s("tr",[s("td",[a._v("-L filename")]),a._v(" "),s("td",[a._v("判断文件是否存在，并且是否为符号链接文件。")])]),a._v(" "),s("tr",[s("td",[a._v("-p filename")]),a._v(" "),s("td",[a._v("判断文件是否存在，并且是否为管道文件。")])]),a._v(" "),s("tr",[s("td",[a._v("-s filename")]),a._v(" "),s("td",[a._v("判断文件是否存在，并且是否为非空。")])]),a._v(" "),s("tr",[s("td",[a._v("-S filename")]),a._v(" "),s("td",[a._v("判断该文件是否存在，并且是否为套接字文件。")])]),a._v(" "),s("tr",[s("td",[a._v("文件权限判断")]),a._v(" "),s("td")]),a._v(" "),s("tr",[s("td",[a._v("选 项")]),a._v(" "),s("td",[a._v("作 用")])]),a._v(" "),s("tr",[s("td",[a._v("-r filename")]),a._v(" "),s("td",[a._v("判断文件是否存在，并且是否拥有读权限。")])]),a._v(" "),s("tr",[s("td",[a._v("-w filename")]),a._v(" "),s("td",[a._v("判断文件是否存在，并且是否拥有写权限。")])]),a._v(" "),s("tr",[s("td",[a._v("-x filename")]),a._v(" "),s("td",[a._v("判断文件是否存在，并且是否拥有执行权限。")])]),a._v(" "),s("tr",[s("td",[a._v("-u filename")]),a._v(" "),s("td",[a._v("判断文件是否存在，并且是否拥有 SUID 权限。")])]),a._v(" "),s("tr",[s("td",[a._v("-g filename")]),a._v(" "),s("td",[a._v("判断文件是否存在，并且是否拥有 SGID 权限。")])]),a._v(" "),s("tr",[s("td",[a._v("-k filename")]),a._v(" "),s("td",[a._v("判断该文件是否存在，并且是否拥有 SBIT 权限。")])]),a._v(" "),s("tr",[s("td",[a._v("文件比较")]),a._v(" "),s("td")]),a._v(" "),s("tr",[s("td",[a._v("选 项")]),a._v(" "),s("td",[a._v("作 用")])]),a._v(" "),s("tr",[s("td",[a._v("filename1 -nt filename2")]),a._v(" "),s("td",[a._v("判断 filename1 的修改时间是否比 filename2 的新。")])]),a._v(" "),s("tr",[s("td",[a._v("filename -ot filename2")]),a._v(" "),s("td",[a._v("判断 filename1 的修改时间是否比 filename2 的旧。")])]),a._v(" "),s("tr",[s("td",[a._v("filename1 -ef filename2")]),a._v(" "),s("td",[a._v("判断 filename1 是否和 filename2 的 inode 号一致，可以理解为两个文件是否为同一个文件。这个判断用于判断硬链接是很好的方法")])])])]),a._v(" "),s("h2",{attrs:{id:"_11-2-与数值比较相关的-test-选项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-2-与数值比较相关的-test-选项"}},[a._v("#")]),a._v(" 11.2 与数值比较相关的 test 选项")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("选 项")]),a._v(" "),s("th",[a._v("作 用")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("num1 -eq num2")]),a._v(" "),s("td",[a._v("判断 num1 是否和 num2 相等。")])]),a._v(" "),s("tr",[s("td",[a._v("num1 -ne num2")]),a._v(" "),s("td",[a._v("判断 num1 是否和 num2 不相等。")])]),a._v(" "),s("tr",[s("td",[a._v("num1 -gt num2")]),a._v(" "),s("td",[a._v("判断 num1 是否大于 num2 。")])]),a._v(" "),s("tr",[s("td",[a._v("num1 -lt num2")]),a._v(" "),s("td",[a._v("判断 num1 是否小于 num2。")])]),a._v(" "),s("tr",[s("td",[a._v("num1 -ge num2")]),a._v(" "),s("td",[a._v("判断 num1 是否大于等于 num2。")])]),a._v(" "),s("tr",[s("td",[a._v("num1 -le num2")]),a._v(" "),s("td",[a._v("判断 num1 是否小于等于 num2。")])])])]),a._v(" "),s("blockquote",[s("p",[a._v("注意，test 只能用来比较整数，小数相关的比较还得依赖 bc 命令。")])]),a._v(" "),s("h2",{attrs:{id:"_11-3-与字符串判断相关的-test-选项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-3-与字符串判断相关的-test-选项"}},[a._v("#")]),a._v(" 11.3 与字符串判断相关的 test 选项")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("选 项")]),a._v(" "),s("th",[a._v("作 用")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("-z str")]),a._v(" "),s("td",[a._v("判断字符串 str 是否为空。")])]),a._v(" "),s("tr",[s("td",[a._v("-n str")]),a._v(" "),s("td",[a._v("判断宇符串 str 是否为非空。")])]),a._v(" "),s("tr",[s("td",[a._v("str1 = str2 str1 == str2")]),a._v(" "),s("td",[s("code",[a._v("=")])])])])]),a._v(" "),s("p",[a._v("和"),s("code",[a._v("==")]),a._v("\n是等价的，都用来判断 str1 是否和 str2 相等。 |\n| str1 != str2 | 判断 str1 是否和 str2 不相等。 |\n| str1 > str2 | 判断 str1 是否大于 str2。"),s("code",[a._v("\\\\>")]),a._v("\n是"),s("code",[a._v(">")]),a._v("\n的转义字符，这样写是为了防止"),s("code",[a._v(">")]),a._v("\n被误认为成重定向运算符。 |\n| str1 < str2 | 判断 str1 是否小于 str2。同样，"),s("code",[a._v("\\\\<")]),a._v("\n也是转义字符。 |")]),a._v(" "),s("h2",{attrs:{id:"_11-4-与逻辑运算相关的-test-选项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-4-与逻辑运算相关的-test-选项"}},[a._v("#")]),a._v(" 11.4 与逻辑运算相关的 test 选项")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("选 项")]),a._v(" "),s("th",[a._v("作 用")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("expression1 -a expression")]),a._v(" "),s("td",[a._v("逻辑与，表达式 expression1 和 expression2 都成立，最终的结果才是成立的。")])]),a._v(" "),s("tr",[s("td",[a._v("expression1 -o expression2")]),a._v(" "),s("td",[a._v("逻辑或，表达式 expression1 和 expression2 有一个成立，最终的结果就成立。")])]),a._v(" "),s("tr",[s("td",[a._v("!expression")]),a._v(" "),s("td",[a._v("逻辑非，对 expression 进行取反。")])])])]),a._v(" "),s("h1",{attrs:{id:"_12-详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-详解"}},[a._v("#")]),a._v(" 12. [[]]详解")]),a._v(" "),s("p",[s("code",[a._v("[[ ]]")]),a._v("是 Shell 内置关键字，它和 test 命令类似，也用来检测某个条件是否成立。\ntest 能做到的，[[ ]] 也能做到，而且 [[ ]] 做的更好；test 做不到的，[[ ]] 还能做到。可以认为 [[ ]] 是 test 的升级版，对细节进行了优化，并且扩展了一些功能。\n[[ ]] 的用法为：")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(" expression "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),s("p",[a._v("当 [[ ]] 判断 expression 成立时，退出状态为 0，否则为非 0 值。注意"),s("code",[a._v("[[ ]]")]),a._v("和"),s("code",[a._v("expression")]),a._v("之间的空格，这两个空格是必须的，否则会导致语法错误。")])])}),[],!1,null,null,null);s.default=r.exports}}]);